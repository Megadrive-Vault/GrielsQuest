0001   0000             ; eXtended Genesis Music (XGM) Z80 driver - Stéphane Dallongeville @2014
0002   0000             ;
0003   0000             ; XGM is a music format dedicated to the Sega Megadrive/Genesis system.
0004   0000             ; It has been designed to minimize CPU decoding resource and keep reasonable data size (should be smaller than VGM file).
0005   0000             ; It supports both FM and PSG chip and allow up to 4 PCM channels (8 bits signed at 14 Khz) to be played at once.
0006   0000             ; These 4 PCM channels are obtained by software mixing in the FM DAC in replacement of the 6th FM channel (so at best you can have 5FM + 4PCM + 4PSG = 13 channels)
0007   0000             ;
0008   0000             ; The driver supports playing SFX in PCM format with 16 priority levels and also allow PSG channel reservation so you can use them from the 68000 to play SFX or whatever you want.
0009   0000             ; PCM samples can be >32KB, the only restriction is that they should have their address and size aligned to 256 bytes.
0010   0000             ;
0011   0000             ; we have to do 254 cycles per sample output which consist of :
0012   0000             ; - bufferize 4 PCM samples from the rom and mix them in write buffer
0013   0000             ; - read 1 sample from read buffer and output it to the DAC
0014   0000             ; - handle loop
0015   0000             ; - bufferize XGM data / parse and apply XGM command / handle extern command
0016   0000             ;
0017   0000             ; register usage :
0018   0000             ; HL  = sample source (in ROM)
0019   0000             ; DE  = write buffer / XGM buffer
0020   0000             ; BC  = counter
0021   0000             ; B = $80 (used for overflow and sample unsign)
0022   0000             ; IYL = vint counter
0023   0000             ; HL' = YMPORT1
0024   0000             ; BC' = read buffer
0025   0000             
0026   0000             ; ###########################      define      ##############################
0027   0000             
0028   0000                         INCLUDE "z80_def.i80"   ; basic definitions
0001+  0000             ; ############################ define ##############################
0002+  0000             
0003+  0000             YMPORT0     EQU     $4000           ; YM2612 port 0
0004+  0000             YMPORT1     EQU     $4001           ; YM2612 port 1
0005+  0000             YMPORT2     EQU     $4002           ; YM2612 port 2
0006+  0000             YMPORT3     EQU     $4003           ; YM2612 port 3
0007+  0000             PSGPORT     EQU     $7F11           ; PSG port
0008+  0000             BANKREG     EQU     $6000           ; bank register
0009+  0000             
0010+  0000             COMPLAY_SFT EQU     0               ; start play command
0011+  0000             COMSTOP_SFT EQU     4               ; stop play command
0012+  0000             
0013+  0000             STATPLAY_SFT  EQU   0               ; playing status
0014+  0000             STATREADY_SFT EQU   7               ; driver ready status
0015+  0000             
0016+  0000             CH0_SFT     EQU     0               ; channel 0
0017+  0000             CH1_SFT     EQU     1               ; channel 1
0018+  0000             CH2_SFT     EQU     2               ; channel 2
0019+  0000             CH3_SFT     EQU     3               ; channel 3
0020+  0000             
0021+  0000             COMPLAY     EQU     1<<COMPLAY_SFT
0022+  0000             COMSTOP     EQU     1<<COMSTOP_SFT
0023+  0000             
0024+  0000             STATPLAY    EQU     1<<STATPLAY_SFT
0025+  0000             STATREADY   EQU     1<<STATREADY_SFT
0026+  0000             
0027+  0000             CH0         EQU     1<<CH0_SFT
0028+  0000             CH1         EQU     1<<CH1_SFT
0029+  0000             CH2         EQU     1<<CH2_SFT
0030+  0000             CH3         EQU     1<<CH3_SFT
0031+  0000             
0032+  0000             
0033+  0000             ; ########################### variable #############################
0034+  0000             
0035+  0000             COMMAND     EQU     $0100           ; command from 68K
0036+  0000             STATUS      EQU     $0102           ; status from Z80
0037+  0000             PARAMS      EQU     $0104           ; parameters (68K and Z80)
0029   0000             
0030   0000             
0031   0000             ; ###########################       var        ##############################
0032   0000             
0033   0000             XGM_PLAY_SFT    EQU     6           ; XGM music play command bit
0034   0000             XGM_RESUME_SFT  EQU     5           ; XGM music resume command bit
0035   0000             XGM_STOP_SFT    EQU     4           ; XGM music stop command bit
0036   0000             
0037   0000                                                 ; COMMAND b0 = play PCM0   STATUS b0 = PCM0 playing
0038   0000                                                 ; COMMAND b1 = play PCM1   STATUS b1 = PCM1 playing
0039   0000                                                 ; COMMAND b2 = play PCM2   STATUS b2 = PCM2 playing
0040   0000                                                 ; COMMAND b3 = play PCM3   STATUS b3 = PCM3 playing
0041   0000                                                 ; COMMAND b4 = stop XGM
0042   0000                                                 ; COMMAND b5 = resume XGM
0043   0000                                                 ; COMMAND b6 = play XGM    STATUS b6 = XGM playing
0044   0000             
0045   0000             XGM_ARG_A   EQU     PARAMS+$00      ; XGM address (bit 0 --> bit 23)
0046   0000             
0047   0000             PCM0_ARG_P  EQU     PARAMS+$04      ; priority (0 to 15)
0048   0000             PCM0_ARG_ID EQU     PARAMS+$05      ; PCM id (0 to 255)
0049   0000             PCM1_ARG_P  EQU     PARAMS+$06      ; priority (0 to 15)
0050   0000             PCM1_ARG_ID EQU     PARAMS+$07      ; PCM id (0 to 255)
0051   0000             PCM2_ARG_P  EQU     PARAMS+$08      ; priority (0 to 15)
0052   0000             PCM2_ARG_ID EQU     PARAMS+$09      ; PCM id (0 to 255)
0053   0000             PCM3_ARG_P  EQU     PARAMS+$0A      ; priority (0 to 15)
0054   0000             PCM3_ARG_ID EQU     PARAMS+$0B      ; PCM id (0 to 255)
0055   0000             
0056   0000             PCM_ARG_P   EQU     PCM0_ARG_P
0057   0000             PCM_ARG_ID  EQU     PCM0_ARG_ID
0058   0000             
0059   0000             PSG_ARG     EQU     PARAMS+$0C      ; xxxx CCCC  where 'CCCC' is PSG channel '3210'
0060   0000                                                 ; PSG channel reservation for 68k
0061   0000             
0062   0000             PCM0_PRIO   EQU     PARAMS+$10      ; PCM0 internal priority
0063   0000             PCM0_ADDR   EQU     PARAMS+$12      ; PCM0 internal addr (bit8 --> bit23)
0064   0000             PCM0_LEN    EQU     PARAMS+$14      ; PCM0 internal len (bit8 --> bit23)
0065   0000             PCM1_PRIO   EQU     PARAMS+$18      ; PCM1 internal priority
0066   0000             PCM1_ADDR   EQU     PARAMS+$1A      ; PCM1 internal addr (bit8 --> bit23)
0067   0000             PCM1_LEN    EQU     PARAMS+$1C      ; PCM1 internal len (bit8 --> bit23)
0068   0000             PCM2_PRIO   EQU     PARAMS+$20      ; PCM2 internal priority
0069   0000             PCM2_ADDR   EQU     PARAMS+$22      ; PCM2 internal addr (bit8 --> bit23)
0070   0000             PCM2_LEN    EQU     PARAMS+$24      ; PCM2 internal len (bit8 --> bit23)
0071   0000             PCM3_PRIO   EQU     PARAMS+$28      ; PCM3 internal priority
0072   0000             PCM3_ADDR   EQU     PARAMS+$2A      ; PCM3 internal addr (bit8 --> bit23)
0073   0000             PCM3_LEN    EQU     PARAMS+$2C      ; PCM3 internal len (bit8 --> bit23)
0074   0000             
0075   0000             PCM_PRIO    EQU     PCM0_PRIO
0076   0000             PCM_ADDR    EQU     PCM0_ADDR
0077   0000             PCM_LEN     EQU     PCM0_LEN
0078   0000             
0079   0000             XGM_ADDR    EQU     PARAMS+$30      ; XGM internal addr (bit0 --> bit23)
0080   0000             
0081   0000             WRITEBUF    EQU     PARAMS+$34      ; PCM write buffer pointer (bit8 --> bit9)
0082   0000             READBUF     EQU     PARAMS+$36      ; PCM read buffer pointer (bit8 --> bit9)
0083   0000             
0084   0000             YM_RR_SAV   EQU     PARAMS+$40      ; YM RR save (4 slots * 6 channels)
0085   0000             PSG_ENV_SAV EQU     PARAMS+$58      ; PSG env save (4 channels)
0086   0000             YM_2B_SAV   EQU     PARAMS+$5C      ; YM register $2B last write save
0087   0000             YM_2B_CNT   EQU     PARAMS+$5D      ; YM register $2B ON expiration
0088   0000             
0089   0000             YM_RR_OFF   EQU     PARAMS+$60      ; YM RR off (4 slots * 6 channels)
0090   0000             PSG_ENV_OFF EQU     PARAMS+$78      ; PSG env off (4 channels)
0091   0000             
0092   0000             VINT_OVER   EQU     PARAMS+$5E      ; contains number of vint to process (just for info)
0093   0000             IDLE_LOOP   EQU     PARAMS+$5F      ; idle loop counter (just for info)
0094   0000             
0095   0000             JUMP_TABLE  EQU     $1600           ; XGM command jump table (size = $100)
0096   0000             XGM_BUFFER  EQU     $1700           ; XGM music data buffer (size = $100)
0097   0000             
0098   0000             PCM_BUFFER0 EQU     $1800           ; PCM buffer 0
0099   0000             PCM_BUFFER1 EQU     $1900           ; PCM buffer 1
0100   0000             PCM_BUFFER2 EQU     $1A00           ; PCM buffer 2
0101   0000             PCM_BUFFER3 EQU     $1B00           ; PCM buffer 3
0102   0000             
0103   0000             PCM_BUFFER  EQU     PCM_BUFFER0     ; PCM buffer
0104   0000             
0105   0000             
0106   0000             ID_TABLE    EQU     $1C00           ; sample id table (size = $400)
0107   0000             
0108   0000             STACK       EQU     JUMP_TABLE      ; stack pointer above buffer region ($1600 --> $15XX)
0109   0000             
0110   0000             
0111   0000             ; ###########################      macro       ##############################
0112   0000             
0113   0000                         INCLUDE "z80_mac.i80"  ; basic macros
0001+  0000             ; ############################     macro     ##############################
0002+  0000             
0003+  0000             
0004+  0000             ; setBank
0005+  0000             ; -------
0006+  0000             ; A    -> bit 22-15 of rom address to set in the bank register
0007+  0000             ; HL  <-  BANKREG
0008+  0000             ;
0009+  0000             ; set the bank register for ROM area
0010+  0000             ; = 101 cycles
0011+  0000             
0012+  0000                         macro   setBank
0013+  0000~            
0014+  0000~                        LD  HL, BANKREG         ; HL = BANKREG              ' 10
0015+  0000~                        LD  (HL), A             ; #1 (bit 15)               ' 7
0016+  0000~                        RRA                     ;                           ' 4
0017+  0000~                        LD  (HL), A             ; #2 (bit 16)               ' 7
0018+  0000~                        RRA                     ;                           ' 4
0019+  0000~                        LD  (HL), A             ; #3 (bit 17)               ' 7
0020+  0000~                        RRA                     ;                           ' 4
0021+  0000~                        LD  (HL), A             ; #4 (bit 18)               ' 7
0022+  0000~                        RRA                     ;                           ' 4
0023+  0000~                        LD  (HL), A             ; #5 (bit 19)               ' 7
0024+  0000~                        RRA                     ;                           ' 4
0025+  0000~                        LD  (HL), A             ; #6 (bit 20)               ' 7
0026+  0000~                        RRA                     ;                           ' 4
0027+  0000~                        LD  (HL), A             ; #7 (bit 21)               ' 7
0028+  0000~                        RRA                     ;                           ' 4
0029+  0000~                        LD  (HL), A             ; #8 (bit 22)               ' 7
0030+  0000~                        LD  (HL), L             ; #9 (bit 23 = 0)           ' 7
0031+  0000~            
0032+  0000                         endm                    ;                           ' 101
0033+  0000             
0034+  0000             
0035+  0000             ; setBankFast
0036+  0000             ; -----------
0037+  0000             ; A    -> bit 21-15 of rom address to set in the bank register
0038+  0000             ; HL  <-  BANKREG
0039+  0000             ;
0040+  0000             ; set the bank register for ROM area
0041+  0000             ; = 97 cycles
0042+  0000             
0043+  0000                         macro   setBankFast
0044+  0000~            
0045+  0000~                        LD  HL, BANKREG         ; HL = BANKREG              ' 10
0046+  0000~                        LD  (HL), A             ; #1 (bit 15)               ' 7
0047+  0000~                        RRA                     ;                           ' 4
0048+  0000~                        LD  (HL), A             ; #2 (bit 16)               ' 7
0049+  0000~                        RRA                     ;                           ' 4
0050+  0000~                        LD  (HL), A             ; #3 (bit 17)               ' 7
0051+  0000~                        RRA                     ;                           ' 4
0052+  0000~                        LD  (HL), A             ; #4 (bit 18)               ' 7
0053+  0000~                        RRA                     ;                           ' 4
0054+  0000~                        LD  (HL), A             ; #5 (bit 19)               ' 7
0055+  0000~                        RRA                     ;                           ' 4
0056+  0000~                        LD  (HL), A             ; #6 (bit 20)               ' 7
0057+  0000~                        RRA                     ;                           ' 4
0058+  0000~                        LD  (HL), A             ; #7 (bit 21)               ' 7
0059+  0000~                        LD  (HL), L             ; #8 (bit 22 = 0)           ' 7
0060+  0000~                        LD  (HL), L             ; #9 (bit 23 = 0)           ' 7
0061+  0000~            
0062+  0000                         endm                    ;                           ' 97
0063+  0000             
0064+  0000             
0065+  0000             ; setBank_BC
0066+  0000             ; ----------
0067+  0000             ; A    -> bit 22-15 of rom address to set in the bank register
0068+  0000             ; BC  <-  BANKREG
0069+  0000             ; A   <-  0
0070+  0000             ;
0071+  0000             ; set the bank register for ROM area
0072+  0000             ; = 105 cycles
0073+  0000             
0074+  0000                         macro   setBank_BC
0075+  0000~            
0076+  0000~                        LD  BC, BANKREG         ; BC = BANKREG              ' 10
0077+  0000~                        LD  (BC), A             ; #1 (bit 15)               ' 7
0078+  0000~                        RRA                     ;                           ' 4
0079+  0000~                        LD  (BC), A             ; #2 (bit 16)               ' 7
0080+  0000~                        RRA                     ;                           ' 4
0081+  0000~                        LD  (BC), A             ; #3 (bit 17)               ' 7
0082+  0000~                        RRA                     ;                           ' 4
0083+  0000~                        LD  (BC), A             ; #4 (bit 18)               ' 7
0084+  0000~                        RRA                     ;                           ' 4
0085+  0000~                        LD  (BC), A             ; #5 (bit 19)               ' 7
0086+  0000~                        RRA                     ;                           ' 4
0087+  0000~                        LD  (BC), A             ; #6 (bit 20)               ' 7
0088+  0000~                        RRA                     ;                           ' 4
0089+  0000~                        LD  (BC), A             ; #7 (bit 21)               ' 7
0090+  0000~                        RRA                     ;                           ' 4
0091+  0000~                        LD  (BC), A             ; #8 (bit 22)               ' 7
0092+  0000~                        RRA                     ;                           ' 4
0093+  0000~                        LD  (BC), A             ; #9 (bit 23 = 0)           ' 7
0094+  0000~            
0095+  0000                         endm                    ;                           ' 105
0096+  0000             
0097+  0000             
0098+  0000             ; setBank_DE
0099+  0000             ; ----------
0100+  0000             ; A    -> bit 22-15 of rom address to set in the bank register
0101+  0000             ; DE  <-  BANKREG
0102+  0000             ; A   <-  0
0103+  0000             ;
0104+  0000             ; set the bank register for ROM area
0105+  0000             ; = 105 cycles
0106+  0000             
0107+  0000                         macro   setBank_DE
0108+  0000~            
0109+  0000~                        LD  DE, BANKREG         ; DE = BANKREG              ' 10
0110+  0000~                        LD  (DE), A             ; #1 (bit 15)               ' 7
0111+  0000~                        RRA                     ;                           ' 4
0112+  0000~                        LD  (DE), A             ; #2 (bit 16)               ' 7
0113+  0000~                        RRA                     ;                           ' 4
0114+  0000~                        LD  (DE), A             ; #3 (bit 17)               ' 7
0115+  0000~                        RRA                     ;                           ' 4
0116+  0000~                        LD  (DE), A             ; #4 (bit 18)               ' 7
0117+  0000~                        RRA                     ;                           ' 4
0118+  0000~                        LD  (DE), A             ; #5 (bit 19)               ' 7
0119+  0000~                        RRA                     ;                           ' 4
0120+  0000~                        LD  (DE), A             ; #6 (bit 20)               ' 7
0121+  0000~                        RRA                     ;                           ' 4
0122+  0000~                        LD  (DE), A             ; #7 (bit 21)               ' 7
0123+  0000~                        RRA                     ;                           ' 4
0124+  0000~                        LD  (DE), A             ; #8 (bit 22)               ' 7
0125+  0000~                        RRA                     ;                           ' 4
0126+  0000~                        LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
0127+  0000~            
0128+  0000                         endm                    ;                           ' 105
0129+  0000             
0130+  0000             
0131+  0000             ; writeYM
0132+  0000             ; -------
0133+  0000             ; HL   -> YM port where to write
0134+  0000             ; D    -> address
0135+  0000             ; E    -> value
0136+  0000             ;
0137+  0000             ; write to YM2612
0138+  0000             
0139+  0000                         macro   writeYM
0140+  0000~            
0141+  0000~            .wait0
0142+  0000~                        BIT     7, (HL)         ; test YM not busy
0143+  0000~                        JR      NZ, .wait0
0144+  0000~                        LD      (HL), D         ; write address
0145+  0000~            .wait1
0146+  0000~                        BIT     7, (HL)         ; test YM not busy
0147+  0000~                        JR      NZ, .wait1
0148+  0000~                        INC     L
0149+  0000~                        LD      (HL), E         ; write value
0150+  0000~            
0151+  0000                         endm
0152+  0000             
0153+  0000             
0154+  0000             ; getPlayCommand
0155+  0000             ; --------------
0156+  0000             ; HL  <-  point to COMMAND
0157+  0000             ; zf  <-  channel 'ch' play command
0158+  0000             ;
0159+  0000             ; Z flag reset if play command for channel 'ch'
0160+  0000             ; = 22 cycles
0161+  0000             
0162+  0000                         macro   getPlayCommand ch
0163+  0000~            
0164+  0000~                        LD      HL, COMMAND             ;                   ' 10
0165+  0000~                        BIT     COMPLAY_SFT+ch, (HL)    ; play command ?    ' 12
0166+  0000~            
0167+  0000                         endm                            ;                   ' 22
0168+  0000             
0169+  0000             
0170+  0000             ; getStopCommand
0171+  0000             ; --------------
0172+  0000             ; HL  <-  point to COMMAND
0173+  0000             ; zf  <-  channel 'ch' stop command
0174+  0000             ;
0175+  0000             ; Z flag reset if stop command for channel 'ch'
0176+  0000             ; = 22 cycles
0177+  0000             
0178+  0000                         macro   getStopCommand ch
0179+  0000~            
0180+  0000~                        LD      HL, COMMAND             ;                   ' 10
0181+  0000~                        BIT     COMSTOP_SFT+ch, (HL)    ; stop command ?    ' 12
0182+  0000~            
0183+  0000                         endm                            ;                   ' 22
0184+  0000             
0185+  0000             
0186+  0000             ; setPlayCommand
0187+  0000             ; ----------------
0188+  0000             ; HL  <-  point to COMMAND
0189+  0000             ;
0190+  0000             ; set the play command for channel 'ch'
0191+  0000             ; = 25 cycles
0192+  0000             
0193+  0000                         macro   setPlayCommand ch
0194+  0000~            
0195+  0000~                        LD      HL, COMMAND             ;                   ' 10
0196+  0000~                        SET     COMPLAY_SFT+ch, (HL)    ; set command       ' 15
0197+  0000~            
0198+  0000                         endm                            ;                   ' 25
0199+  0000             
0200+  0000             
0201+  0000             ; setStopCommand
0202+  0000             ; ----------------
0203+  0000             ; HL  <-  point to COMMAND
0204+  0000             ;
0205+  0000             ; set the stop command for channel 'ch'
0206+  0000             ; = 25 cycles
0207+  0000             
0208+  0000                         macro   setStopCommand ch
0209+  0000~            
0210+  0000~                        LD      HL, COMMAND             ;                   ' 10
0211+  0000~                        SET     COMSTOP_SFT+ch, (HL)    ; set command       ' 15
0212+  0000~            
0213+  0000                         endm                            ;                   ' 25
0214+  0000             
0215+  0000             
0216+  0000             ; clearPlayCommand
0217+  0000             ; ----------------
0218+  0000             ; HL  <-  point to COMMAND
0219+  0000             ;
0220+  0000             ; clear the play command for channel 'ch'
0221+  0000             ; = 25 cycles
0222+  0000             
0223+  0000                         macro   clearPlayCommand ch
0224+  0000~            
0225+  0000~                        LD      HL, COMMAND             ;                   ' 10
0226+  0000~                        RES     COMPLAY_SFT+ch, (HL)    ; clear command     ' 15
0227+  0000~            
0228+  0000                         endm                            ;                   ' 25
0229+  0000             
0230+  0000             
0231+  0000             ; clearStopCommand
0232+  0000             ; ----------------
0233+  0000             ; HL  <-  point to COMMAND
0234+  0000             ;
0235+  0000             ; clear the stop command for channel 'ch'
0236+  0000             ; = 25 cycles
0237+  0000             
0238+  0000                         macro   clearStopCommand ch
0239+  0000~            
0240+  0000~                        LD      HL, COMMAND             ;                   ' 10
0241+  0000~                        RES     COMSTOP_SFT+ch, (HL)    ; clear command     ' 15
0242+  0000~            
0243+  0000                         endm                            ;                   ' 25
0244+  0000             
0245+  0000             
0246+  0000             ; getPlayStatus
0247+  0000             ; -------------
0248+  0000             ; HL  <- point to STATUS
0249+  0000             ; zf  <-  channel 'ch' is playing
0250+  0000             ;
0251+  0000             ; Z flag reset if play status for channel 'ch'
0252+  0000             ; = 22 cycles
0253+  0000             
0254+  0000                         macro   getPlayStatus ch
0255+  0000~            
0256+  0000~                        LD      HL, STATUS              ;                   ' 10
0257+  0000~                        BIT     STATPLAY_SFT+ch, (HL)   ; get status        ' 12
0258+  0000~            
0259+  0000                         endm                            ;                   ' 22
0260+  0000             
0261+  0000             
0262+  0000             ; setPlayStatus
0263+  0000             ; -------------
0264+  0000             ; HL  <- point to STATUS
0265+  0000             ;
0266+  0000             ; set the play status for channel 'ch'
0267+  0000             ; = 25 cycles
0268+  0000             
0269+  0000                         macro   setPlayStatus ch
0270+  0000~            
0271+  0000~                        LD      HL, STATUS              ;                   ' 10
0272+  0000~                        SET     STATPLAY_SFT+ch, (HL)   ; set status        ' 15
0273+  0000~            
0274+  0000                         endm                            ;                   ' 25
0275+  0000             
0276+  0000             
0277+  0000             ; clearPlayStatus
0278+  0000             ; ---------------
0279+  0000             ; HL  <- point to STATUS
0280+  0000             ;
0281+  0000             ; clear play status for channel 'ch'
0282+  0000             ; = 25 cycles
0283+  0000             
0284+  0000                         macro   clearPlayStatus ch
0285+  0000~            
0286+  0000~                        LD      HL, STATUS              ;                   ' 10
0287+  0000~                        RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
0288+  0000~            
0289+  0000                         endm                            ;                   ' 25
0290+  0000             
0291+  0000             
0292+  0000             ; getLoopStatus
0293+  0000             ; -------------
0294+  0000             ; HL  <- point to STATUS+1
0295+  0000             ; zf  <-  channel 'ch' is playing
0296+  0000             ;
0297+  0000             ; Z flag reset if loop status for channel 'ch'
0298+  0000             ; = 22 cycles
0299+  0000             
0300+  0000                         macro   getLoopStatus ch
0301+  0000~            
0302+  0000~                        LD      HL, STATUS+1            ;                   ' 10
0303+  0000~                        BIT     STATPLAY_SFT+ch, (HL)   ; get status        ' 12
0304+  0000~            
0305+  0000                         endm                            ;                   ' 22
0306+  0000             
0307+  0000             
0308+  0000             ; setLoopStatus
0309+  0000             ; -------------
0310+  0000             ; HL  <- point to STATUS+1
0311+  0000             ;
0312+  0000             ; set the loop status for channel 'ch'
0313+  0000             ; = 25 cycles
0314+  0000             
0315+  0000                         macro   setLoopStatus ch
0316+  0000~            
0317+  0000~                        LD      HL, STATUS+1            ;                   ' 10
0318+  0000~                        SET     STATPLAY_SFT+ch, (HL)   ; set status        ' 15
0319+  0000~            
0320+  0000                         endm                            ;                   ' 25
0321+  0000             
0322+  0000             
0323+  0000             ; clearLoopStatus
0324+  0000             ; ---------------
0325+  0000             ; HL  <- point to STATUS+1
0326+  0000             ;
0327+  0000             ; clear loop status for channel 'ch'
0328+  0000             ; = 25 cycles
0329+  0000             
0330+  0000                         macro   clearLoopStatus ch
0331+  0000~            
0332+  0000~                        LD      HL, STATUS+1            ;                   ' 10
0333+  0000~                        RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
0334+  0000~            
0335+  0000                         endm                            ;                   ' 25
0336+  0000             
0337+  0000             
0338+  0000             ; clearAllStatus
0339+  0000             ; --------------
0340+  0000             ; HL  <- 0
0341+  0000             ;
0342+  0000             ; clear play and loop status for all channel
0343+  0000             ; = 26 cycles
0344+  0000             
0345+  0000                         macro   clearAllStatus
0346+  0000~            
0347+  0000~                        LD      HL, $00                 ;                   ' 10
0348+  0000~                        LD      (STATUS), HL            ; clear status      ' 16
0349+  0000~            
0350+  0000                         endm                            ;                   ' 26
0351+  0000             
0352+  0000             
0353+  0000             ; ############################  macro wait macro  ##############################
0354+  0000             
0355+  0000             
0356+  0000             ; wait2p16x
0357+  0000             ; ---------
0358+  0000             ; wait for ((w * 16) + 2) cycles
0359+  0000             ;
0360+  0000                         macro   wait2p16x w
0361+  0000~            
0362+  0000~                        LD      A, w            ; 7-2
0363+  0000~            .loop
0364+  0000~                        DEC     A               ; 4
0365+  0000~                        JR      NZ, .loop       ; 12
0366+  0000~            
0367+  0000                         endm
0368+  0000             
0369+  0000             
0370+  0000                         macro   wait4
0371+  0000~                        NOP
0372+  0000                         endm
0373+  0000             
0374+  0000                         macro   wait6
0375+  0000~                        INC     DE
0376+  0000                         endm
0377+  0000             
0378+  0000                         macro   wait7
0379+  0000~                        LD      A, (DE)
0380+  0000                         endm
0381+  0000             
0382+  0000                         macro   wait8
0383+  0000~                        wait4
0384+  0000~                        wait4
0385+  0000                         endm
0386+  0000             
0387+  0000                         macro   wait9
0388+  0000~                        LD      R, A
0389+  0000                         endm
0390+  0000             
0391+  0000                         macro   wait10
0392+  0000~                        JP      .loop
0393+  0000~            .loop
0394+  0000                         endm
0395+  0000             
0396+  0000                         macro   wait11
0397+  0000~                        wait7
0398+  0000~                        wait4
0399+  0000                         endm
0400+  0000             
0401+  0000                         macro   wait12
0402+  0000~                        JR      .loop
0403+  0000~            .loop
0404+  0000                         endm
0405+  0000             
0406+  0000                         macro   wait13
0407+  0000~                        wait9
0408+  0000~                        wait4
0409+  0000                         endm
0410+  0000             
0411+  0000                         macro   wait14
0412+  0000~                        wait7
0413+  0000~                        wait7
0414+  0000                         endm
0415+  0000             
0416+  0000                         macro   wait15
0417+  0000~                        wait8
0418+  0000~                        wait7
0419+  0000                         endm
0420+  0000             
0421+  0000                         macro   wait16
0422+  0000~                        wait12
0423+  0000~                        wait4
0424+  0000                         endm
0425+  0000             
0426+  0000                         macro   wait17
0427+  0000~                        wait10
0428+  0000~                        wait7
0429+  0000                         endm
0430+  0000             
0431+  0000                         macro   wait18
0432+  0000~                        wait9
0433+  0000~                        wait9
0434+  0000                         endm
0435+  0000             
0436+  0000                         macro   wait19
0437+  0000~                        wait12
0438+  0000~                        wait7
0439+  0000                         endm
0440+  0000             
0441+  0000                         macro   wait20
0442+  0000~                        wait11
0443+  0000~                        wait9
0444+  0000                         endm
0445+  0000             
0446+  0000                         macro   wait21
0447+  0000~                        wait12
0448+  0000~                        wait9
0449+  0000                         endm
0450+  0000             
0451+  0000                         macro   wait22
0452+  0000~                        wait18
0453+  0000~                        wait4
0454+  0000                         endm
0455+  0000             
0456+  0000                         macro   wait23
0457+  0000~                        wait14
0458+  0000~                        wait9
0459+  0000                         endm
0460+  0000             
0461+  0000                         macro   wait24
0462+  0000~                        wait12
0463+  0000~                        wait12
0464+  0000                         endm
0465+  0000             
0466+  0000                         macro   wait25
0467+  0000~                        wait18
0468+  0000~                        wait7
0469+  0000                         endm
0470+  0000             
0471+  0000                         macro   wait26
0472+  0000~                        wait18
0473+  0000~                        wait8
0474+  0000                         endm
0475+  0000             
0476+  0000                         macro   wait27
0477+  0000~                        wait18
0478+  0000~                        wait9
0479+  0000                         endm
0480+  0000             
0481+  0000                         macro   wait28
0482+  0000~                        wait21
0483+  0000~                        wait7
0484+  0000                         endm
0485+  0000             
0486+  0000                         macro   wait29
0487+  0000~                        wait21
0488+  0000~                        wait8
0489+  0000                         endm
0490+  0000             
0491+  0000                         macro   wait30
0492+  0000~                        wait21
0493+  0000~                        wait9
0494+  0000                         endm
0495+  0000             
0496+  0000                         macro   wait31
0497+  0000~                        wait21
0498+  0000~                        wait10
0499+  0000                         endm
0500+  0000             
0501+  0000                         macro   wait32
0502+  0000~                        wait20
0503+  0000~                        wait12
0504+  0000                         endm
0505+  0000             
0506+  0000                         macro   wait33
0507+  0000~                        wait21
0508+  0000~                        wait12
0509+  0000                         endm
0510+  0000             
0511+  0000                         macro   wait34
0512+  0000~                        wait2p16x 2
0513+  0000                         endm
0514+  0000             
0515+  0000                         macro   wait35
0516+  0000~                        wait28
0517+  0000~                        wait7
0518+  0000                         endm
0519+  0000             
0520+  0000                         macro   wait36
0521+  0000~                        wait27
0522+  0000~                        wait9
0523+  0000                         endm
0524+  0000             
0525+  0000                         macro   wait37
0526+  0000~                        wait28
0527+  0000~                        wait9
0528+  0000                         endm
0529+  0000             
0530+  0000                         macro   wait38
0531+  0000~                        wait27
0532+  0000~                        wait11
0533+  0000                         endm
0534+  0000             
0535+  0000                         macro   wait39
0536+  0000~                        wait27
0537+  0000~                        wait12
0538+  0000                         endm
0539+  0000             
0540+  0000                         macro   wait40
0541+  0000~                        wait27
0542+  0000~                        wait13
0543+  0000                         endm
0544+  0000             
0545+  0000                         macro   wait41
0546+  0000~                        wait34
0547+  0000~                        wait7
0548+  0000                         endm
0549+  0000             
0550+  0000                         macro   wait42
0551+  0000~                        wait34
0552+  0000~                        wait8
0553+  0000                         endm
0554+  0000             
0555+  0000                         macro   wait43
0556+  0000~                        wait36
0557+  0000~                        wait7
0558+  0000                         endm
0559+  0000             
0560+  0000                         macro   wait44
0561+  0000~                        wait34
0562+  0000~                        wait10
0563+  0000                         endm
0564+  0000             
0565+  0000                         macro   wait45
0566+  0000~                        wait36
0567+  0000~                        wait9
0568+  0000                         endm
0569+  0000             
0570+  0000                         macro   wait46
0571+  0000~                        wait34
0572+  0000~                        wait12
0573+  0000                         endm
0574+  0000             
0575+  0000                         macro   wait47
0576+  0000~                        wait34
0577+  0000~                        wait13
0578+  0000                         endm
0579+  0000             
0580+  0000                         macro   wait48
0581+  0000~                        wait36
0582+  0000~                        wait12
0583+  0000                         endm
0584+  0000             
0585+  0000                         macro   wait49
0586+  0000~                        wait36
0587+  0000~                        wait13
0588+  0000                         endm
0589+  0000             
0590+  0000                         macro   wait50
0591+  0000~                        wait2p16x 3
0592+  0000                         endm
0593+  0000             
0594+  0000                         macro   wait51
0595+  0000~                        wait34
0596+  0000~                        wait17
0597+  0000                         endm
0598+  0000             
0599+  0000                         macro   wait52
0600+  0000~                        wait34
0601+  0000~                        wait18
0602+  0000                         endm
0603+  0000             
0604+  0000                         macro   wait53
0605+  0000~                        wait36
0606+  0000~                        wait17
0607+  0000                         endm
0608+  0000             
0609+  0000                         macro   wait54
0610+  0000~                        wait50
0611+  0000~                        wait4
0612+  0000                         endm
0613+  0000             
0614+  0000                         macro   wait55
0615+  0000~                        wait34
0616+  0000~                        wait21
0617+  0000                         endm
0618+  0000             
0619+  0000                         macro   wait56
0620+  0000~                        wait34
0621+  0000~                        wait22
0622+  0000                         endm
0623+  0000             
0624+  0000                         macro   wait57
0625+  0000~                        wait50
0626+  0000~                        wait7
0627+  0000                         endm
0628+  0000             
0629+  0000                         macro   wait58
0630+  0000~                        wait50
0631+  0000~                        wait8
0632+  0000                         endm
0633+  0000             
0634+  0000                         macro   wait59
0635+  0000~                        wait50
0636+  0000~                        wait9
0637+  0000                         endm
0638+  0000             
0639+  0000                         macro   wait60
0640+  0000~                        wait50
0641+  0000~                        wait10
0642+  0000                         endm
0643+  0000             
0644+  0000                         macro   wait61
0645+  0000~                        wait50
0646+  0000~                        wait11
0647+  0000                         endm
0648+  0000             
0649+  0000                         macro   wait62
0650+  0000~                        wait50
0651+  0000~                        wait12
0652+  0000                         endm
0653+  0000             
0654+  0000                         macro   wait63
0655+  0000~                        wait50
0656+  0000~                        wait13
0657+  0000                         endm
0658+  0000             
0659+  0000                         macro   wait64
0660+  0000~                        wait50
0661+  0000~                        wait14
0662+  0000                         endm
0663+  0000             
0664+  0000                         macro   wait65
0665+  0000~                        wait50
0666+  0000~                        wait15
0667+  0000                         endm
0668+  0000             
0669+  0000                         macro   wait66
0670+  0000~                        wait2p16x 4
0671+  0000                         endm
0672+  0000             
0673+  0000                         macro   wait67
0674+  0000~                        wait50
0675+  0000~                        wait17
0676+  0000                         endm
0677+  0000             
0678+  0000                         macro   wait68
0679+  0000~                        wait50
0680+  0000~                        wait18
0681+  0000                         endm
0682+  0000             
0683+  0000                         macro   wait70
0684+  0000~                        wait66
0685+  0000~                        wait4
0686+  0000                         endm
0687+  0000             
0688+  0000                         macro   wait72
0689+  0000~                        wait50
0690+  0000~                        wait22
0691+  0000                         endm
0692+  0000             
0693+  0000                         macro   wait73
0694+  0000~                        wait66
0695+  0000~                        wait7
0696+  0000                         endm
0697+  0000             
0698+  0000                         macro   wait74
0699+  0000~                        wait66
0700+  0000~                        wait8
0701+  0000                         endm
0702+  0000             
0703+  0000                         macro   wait75
0704+  0000~                        wait66
0705+  0000~                        wait9
0706+  0000                         endm
0707+  0000             
0708+  0000                         macro   wait76
0709+  0000~                        wait66
0710+  0000~                        wait10
0711+  0000                         endm
0712+  0000             
0713+  0000                         macro   wait77
0714+  0000~                        wait66
0715+  0000~                        wait11
0716+  0000                         endm
0717+  0000             
0718+  0000                         macro   wait78
0719+  0000~                        wait66
0720+  0000~                        wait12
0721+  0000                         endm
0722+  0000             
0723+  0000                         macro   wait79
0724+  0000~                        wait66
0725+  0000~                        wait13
0726+  0000                         endm
0727+  0000             
0728+  0000                         macro   wait80
0729+  0000~                        wait66
0730+  0000~                        wait14
0731+  0000                         endm
0732+  0000             
0733+  0000                         macro   wait81
0734+  0000~                        wait66
0735+  0000~                        wait15
0736+  0000                         endm
0737+  0000             
0738+  0000                         macro   wait82
0739+  0000~                        wait2p16x 5
0740+  0000                         endm
0741+  0000             
0742+  0000                         macro   wait83
0743+  0000~                        wait66
0744+  0000~                        wait17
0745+  0000                         endm
0746+  0000             
0747+  0000                         macro   wait84
0748+  0000~                        wait66
0749+  0000~                        wait18
0750+  0000                         endm
0751+  0000             
0752+  0000                         macro   wait85
0753+  0000~                        wait66
0754+  0000~                        wait19
0755+  0000                         endm
0756+  0000             
0757+  0000                         macro   wait86
0758+  0000~                        wait82
0759+  0000~                        wait4
0760+  0000                         endm
0761+  0000             
0762+  0000                         macro   wait87
0763+  0000~                        wait66
0764+  0000~                        wait21
0765+  0000                         endm
0766+  0000             
0767+  0000                         macro   wait88
0768+  0000~                        wait66
0769+  0000~                        wait22
0770+  0000                         endm
0771+  0000             
0772+  0000                         macro   wait89
0773+  0000~                        wait82
0774+  0000~                        wait7
0775+  0000                         endm
0776+  0000             
0777+  0000                         macro   wait90
0778+  0000~                        wait82
0779+  0000~                        wait8
0780+  0000                         endm
0781+  0000             
0782+  0000                         macro   wait91
0783+  0000~                        wait82
0784+  0000~                        wait9
0785+  0000                         endm
0786+  0000             
0787+  0000                         macro   wait92
0788+  0000~                        wait82
0789+  0000~                        wait10
0790+  0000                         endm
0791+  0000             
0792+  0000                         macro   wait94
0793+  0000~                        wait82
0794+  0000~                        wait12
0795+  0000                         endm
0796+  0000             
0797+  0000                         macro   wait95
0798+  0000~                        wait82
0799+  0000~                        wait13
0800+  0000                         endm
0801+  0000             
0802+  0000                         macro   wait96
0803+  0000~                        wait82
0804+  0000~                        wait14
0805+  0000                         endm
0806+  0000             
0807+  0000                         macro   wait97
0808+  0000~                        wait82
0809+  0000~                        wait15
0810+  0000                         endm
0811+  0000             
0812+  0000                         macro   wait98
0813+  0000~                        wait2p16x 6
0814+  0000                         endm
0815+  0000             
0816+  0000                         macro   wait99
0817+  0000~                        wait82
0818+  0000~                        wait17
0819+  0000                         endm
0820+  0000             
0821+  0000                         macro   wait100
0822+  0000~                        wait82
0823+  0000~                        wait18
0824+  0000                         endm
0825+  0000             
0826+  0000                         macro   wait102
0827+  0000~                        wait98
0828+  0000~                        wait4
0829+  0000                         endm
0830+  0000             
0831+  0000                         macro   wait103
0832+  0000~                        wait82
0833+  0000~                        wait21
0834+  0000                         endm
0835+  0000             
0836+  0000                         macro   wait104
0837+  0000~                        wait82
0838+  0000~                        wait22
0839+  0000                         endm
0840+  0000             
0841+  0000                         macro   wait105
0842+  0000~                        wait98
0843+  0000~                        wait7
0844+  0000                         endm
0845+  0000             
0846+  0000                         macro   wait106
0847+  0000~                        wait98
0848+  0000~                        wait8
0849+  0000                         endm
0850+  0000             
0851+  0000                         macro   wait107
0852+  0000~                        wait98
0853+  0000~                        wait9
0854+  0000                         endm
0855+  0000             
0856+  0000                         macro   wait108
0857+  0000~                        wait98
0858+  0000~                        wait10
0859+  0000                         endm
0860+  0000             
0861+  0000                         macro   wait109
0862+  0000~                        wait98
0863+  0000~                        wait11
0864+  0000                         endm
0865+  0000             
0866+  0000                         macro   wait110
0867+  0000~                        wait98
0868+  0000~                        wait12
0869+  0000                         endm
0870+  0000             
0871+  0000                         macro   wait111
0872+  0000~                        wait98
0873+  0000~                        wait13
0874+  0000                         endm
0875+  0000             
0876+  0000                         macro   wait112
0877+  0000~                        wait98
0878+  0000~                        wait14
0879+  0000                         endm
0880+  0000             
0881+  0000                         macro   wait114
0882+  0000~                        wait2p16x 7
0883+  0000                         endm
0884+  0000             
0885+  0000                         macro   wait115
0886+  0000~                        wait98
0887+  0000~                        wait17
0888+  0000                         endm
0889+  0000             
0890+  0000                         macro   wait116
0891+  0000~                        wait98
0892+  0000~                        wait18
0893+  0000                         endm
0894+  0000             
0895+  0000                         macro   wait117
0896+  0000~                        wait98
0897+  0000~                        wait19
0898+  0000                         endm
0899+  0000             
0900+  0000                         macro   wait118
0901+  0000~                        wait114
0902+  0000~                        wait4
0903+  0000                         endm
0904+  0000             
0905+  0000                         macro   wait119
0906+  0000~                        wait98
0907+  0000~                        wait21
0908+  0000                         endm
0909+  0000             
0910+  0000                         macro   wait120
0911+  0000~                        wait98
0912+  0000~                        wait22
0913+  0000                         endm
0914+  0000             
0915+  0000                         macro   wait121
0916+  0000~                        wait114
0917+  0000~                        wait7
0918+  0000                         endm
0919+  0000             
0920+  0000                         macro   wait122
0921+  0000~                        wait114
0922+  0000~                        wait8
0923+  0000                         endm
0924+  0000             
0925+  0000                         macro   wait123
0926+  0000~                        wait114
0927+  0000~                        wait9
0928+  0000                         endm
0929+  0000             
0930+  0000                         macro   wait124
0931+  0000~                        wait114
0932+  0000~                        wait10
0933+  0000                         endm
0934+  0000             
0935+  0000                         macro   wait125
0936+  0000~                        wait114
0937+  0000~                        wait11
0938+  0000                         endm
0939+  0000             
0940+  0000                         macro   wait126
0941+  0000~                        wait114
0942+  0000~                        wait12
0943+  0000                         endm
0944+  0000             
0945+  0000                         macro   wait127
0946+  0000~                        wait114
0947+  0000~                        wait13
0948+  0000                         endm
0949+  0000             
0950+  0000                         macro   wait128
0951+  0000~                        wait114
0952+  0000~                        wait14
0953+  0000                         endm
0954+  0000             
0955+  0000                         macro   wait129
0956+  0000~                        wait114
0957+  0000~                        wait15
0958+  0000                         endm
0959+  0000             
0960+  0000                         macro   wait130
0961+  0000~                        wait2p16x 8
0962+  0000                         endm
0963+  0000             
0964+  0000                         macro   wait131
0965+  0000~                        wait114
0966+  0000~                        wait17
0967+  0000                         endm
0968+  0000             
0969+  0000                         macro   wait132
0970+  0000~                        wait114
0971+  0000~                        wait18
0972+  0000                         endm
0973+  0000             
0974+  0000                         macro   wait133
0975+  0000~                        wait114
0976+  0000~                        wait19
0977+  0000                         endm
0978+  0000             
0979+  0000                         macro   wait134
0980+  0000~                        wait130
0981+  0000~                        wait4
0982+  0000                         endm
0983+  0000             
0984+  0000                         macro   wait135
0985+  0000~                        wait114
0986+  0000~                        wait21
0987+  0000                         endm
0988+  0000             
0989+  0000                         macro   wait136
0990+  0000~                        wait114
0991+  0000~                        wait22
0992+  0000                         endm
0993+  0000             
0994+  0000                         macro   wait137
0995+  0000~                        wait130
0996+  0000~                        wait7
0997+  0000                         endm
0998+  0000             
0999+  0000                         macro   wait138
1000+  0000~                        wait130
1001+  0000~                        wait8
1002+  0000                         endm
1003+  0000             
1004+  0000                         macro   wait139
1005+  0000~                        wait130
1006+  0000~                        wait9
1007+  0000                         endm
1008+  0000             
1009+  0000                         macro   wait140
1010+  0000~                        wait130
1011+  0000~                        wait10
1012+  0000                         endm
1013+  0000             
1014+  0000                         macro   wait141
1015+  0000~                        wait130
1016+  0000~                        wait11
1017+  0000                         endm
1018+  0000             
1019+  0000                         macro   wait144
1020+  0000~                        wait130
1021+  0000~                        wait14
1022+  0000                         endm
1023+  0000             
1024+  0000                         macro   wait145
1025+  0000~                        wait130
1026+  0000~                        wait15
1027+  0000                         endm
1028+  0000             
1029+  0000                         macro   wait146
1030+  0000~                        wait2p16x 9
1031+  0000                         endm
1032+  0000             
1033+  0000                         macro   wait147
1034+  0000~                        wait130
1035+  0000~                        wait17
1036+  0000                         endm
1037+  0000             
1038+  0000                         macro   wait148
1039+  0000~                        wait130
1040+  0000~                        wait18
1041+  0000                         endm
1042+  0000             
1043+  0000                         macro   wait149
1044+  0000~                        wait130
1045+  0000~                        wait19
1046+  0000                         endm
1047+  0000             
1048+  0000                         macro   wait150
1049+  0000~                        wait146
1050+  0000~                        wait4
1051+  0000                         endm
1052+  0000             
1053+  0000                         macro   wait154
1054+  0000~                        wait146
1055+  0000~                        wait8
1056+  0000                         endm
1057+  0000             
1058+  0000                         macro   wait155
1059+  0000~                        wait146
1060+  0000~                        wait9
1061+  0000                         endm
1062+  0000             
1063+  0000                         macro   wait156
1064+  0000~                        wait146
1065+  0000~                        wait10
1066+  0000                         endm
1067+  0000             
1068+  0000                         macro   wait157
1069+  0000~                        wait146
1070+  0000~                        wait11
1071+  0000                         endm
1072+  0000             
1073+  0000                         macro   wait158
1074+  0000~                        wait146
1075+  0000~                        wait12
1076+  0000                         endm
1077+  0000             
1078+  0000                         macro   wait160
1079+  0000~                        wait146
1080+  0000~                        wait14
1081+  0000                         endm
1082+  0000             
1083+  0000                         macro   wait161
1084+  0000~                        wait146
1085+  0000~                        wait15
1086+  0000                         endm
1087+  0000             
1088+  0000                         macro   wait162
1089+  0000~                        wait2p16x 10
1090+  0000                         endm
1091+  0000             
1092+  0000                         macro   wait164
1093+  0000~                        wait146
1094+  0000~                        wait18
1095+  0000                         endm
1096+  0000             
1097+  0000                         macro   wait165
1098+  0000~                        wait146
1099+  0000~                        wait19
1100+  0000                         endm
1101+  0000             
1102+  0000                         macro   wait166
1103+  0000~                        wait162
1104+  0000~                        wait4
1105+  0000                         endm
1106+  0000             
1107+  0000                         macro   wait172
1108+  0000~                        wait162
1109+  0000~                        wait10
1110+  0000                         endm
1111+  0000             
1112+  0000                         macro   wait174
1113+  0000~                        wait162
1114+  0000~                        wait12
1115+  0000                         endm
1116+  0000             
1117+  0000                         macro   wait175
1118+  0000~                        wait162
1119+  0000~                        wait13
1120+  0000                         endm
1121+  0000             
1122+  0000                         macro   wait176
1123+  0000~                        wait162
1124+  0000~                        wait14
1125+  0000                         endm
1126+  0000             
1127+  0000                         macro   wait178
1128+  0000~                        wait2p16x 11
1129+  0000                         endm
1130+  0000             
1131+  0000                         macro   wait179
1132+  0000~                        wait162
1133+  0000~                        wait17
1134+  0000                         endm
1135+  0000             
1136+  0000                         macro   wait180
1137+  0000~                        wait162
1138+  0000~                        wait18
1139+  0000                         endm
1140+  0000             
1141+  0000                         macro   wait182
1142+  0000~                        wait178
1143+  0000~                        wait4
1144+  0000                         endm
1145+  0000             
1146+  0000                         macro   wait183
1147+  0000~                        wait162
1148+  0000~                        wait121
1149+  0000                         endm
1150+  0000             
1151+  0000                         macro   wait186
1152+  0000~                        wait178
1153+  0000~                        wait8
1154+  0000                         endm
1155+  0000             
1156+  0000                         macro   wait187
1157+  0000~                        wait178
1158+  0000~                        wait9
1159+  0000                         endm
1160+  0000             
1161+  0000                         macro   wait189
1162+  0000~                        wait178
1163+  0000~                        wait11
1164+  0000                         endm
1165+  0000             
1166+  0000                         macro   wait191
1167+  0000~                        wait178
1168+  0000~                        wait13
1169+  0000                         endm
1170+  0000             
1171+  0000                         macro   wait192
1172+  0000~                        wait178
1173+  0000~                        wait14
1174+  0000                         endm
1175+  0000             
1176+  0000                         macro   wait193
1177+  0000~                        wait178
1178+  0000~                        wait15
1179+  0000                         endm
1180+  0000             
1181+  0000                         macro   wait194
1182+  0000~                        wait2p16x 12
1183+  0000                         endm
1184+  0000             
1185+  0000                         macro   wait197
1186+  0000~                        wait178
1187+  0000~                        wait19
1188+  0000                         endm
1189+  0000             
1190+  0000                         macro   wait203
1191+  0000~                        wait194
1192+  0000~                        wait9
1193+  0000                         endm
1194+  0000             
1195+  0000                         macro   wait210
1196+  0000~                        wait2p16x 13
1197+  0000                         endm
1198+  0000             
1199+  0000                         macro   wait226
1200+  0000~                        wait2p16x 14
1201+  0000                         endm
1202+  0000             
1203+  0000                         macro   wait234
1204+  0000~                        wait226
1205+  0000~                        wait8
1206+  0000                         endm
1207+  0000             
1208+  0000                         macro   wait242
1209+  0000~                        wait2p16x 15
1210+  0000                         endm
1211+  0000             
1212+  0000                         macro   wait244
1213+  0000~                        wait226
1214+  0000~                        wait18
1215+  0000                         endm
1216+  0000             
1217+  0000                         macro   wait246
1218+  0000~                        wait242
1219+  0000~                        wait4
1220+  0000                         endm
1221+  0000             
1222+  0000                         macro   wait254
1223+  0000~                        wait242
1224+  0000~                        wait12
1225+  0000                         endm
1226+  0000             
1227+  0000                         macro   wait258
1228+  0000~                        wait2p16x 16
1229+  0000                         endm
1230+  0000             
1231+  0000                         macro   wait260
1232+  0000~                        wait242
1233+  0000~                        wait18
1234+  0000                         endm
1235+  0000             
1236+  0000                         macro   wait262
1237+  0000~                        wait258
1238+  0000~                        wait4
1239+  0000                         endm
1240+  0000             
1241+  0000                         macro   wait264
1242+  0000~                        wait242
1243+  0000~                        wait22
1244+  0000                         endm
1245+  0000             
1246+  0000                         macro   wait268
1247+  0000~                        wait258
1248+  0000~                        wait10
1249+  0000                         endm
1250+  0000             
1251+  0000                         macro   wait274
1252+  0000~                        wait2p16x 17
1253+  0000                         endm
1254+  0000             
1255+  0000                         macro   wait276
1256+  0000~                        wait258
1257+  0000~                        wait18
1258+  0000                         endm
1259+  0000             
1260+  0000                         macro   wait278
1261+  0000~                        wait274
1262+  0000~                        wait4
1263+  0000                         endm
1264+  0000             
1265+  0000                         macro   wait282
1266+  0000~                        wait274
1267+  0000~                        wait8
1268+  0000                         endm
1269+  0000             
1270+  0000                         macro   wait283
1271+  0000~                        wait274
1272+  0000~                        wait9
1273+  0000                         endm
1274+  0000             
1275+  0000                         macro   wait285
1276+  0000~                        wait274
1277+  0000~                        wait11
1278+  0000                         endm
1279+  0000             
1280+  0000                         macro   wait287
1281+  0000~                        wait274
1282+  0000~                        wait13
1283+  0000                         endm
1284+  0000             
1285+  0000                         macro   wait290
1286+  0000~                        wait2p16x 18
1287+  0000                         endm
1288+  0000             
1289+  0000                         macro   wait294
1290+  0000~                        wait290
1291+  0000~                        wait4
1292+  0000                         endm
1293+  0000             
1294+  0000                         macro   wait295
1295+  0000~                        wait274
1296+  0000~                        wait21
1297+  0000                         endm
1298+  0000             
1299+  0000                         macro   wait298
1300+  0000~                        wait290
1301+  0000~                        wait8
1302+  0000                         endm
1303+  0000             
1304+  0000                         macro   wait305
1305+  0000~                        wait290
1306+  0000~                        wait15
1307+  0000                         endm
1308+  0000             
1309+  0000                         macro   wait306
1310+  0000~                        wait2p16x 19
1311+  0000                         endm
1312+  0000             
1313+  0000                         macro   wait308
1314+  0000~                        wait290
1315+  0000~                        wait18
1316+  0000                         endm
1317+  0000             
1318+  0000                         macro   wait320
1319+  0000~                        wait306
1320+  0000~                        wait14
1321+  0000                         endm
1322+  0000             
1323+  0000                         macro   wait322
1324+  0000~                        wait2p16x 20
1325+  0000                         endm
1326+  0000             
1327+  0000                         macro   wait324
1328+  0000~                        wait306
1329+  0000~                        wait18
1330+  0000                         endm
1331+  0000             
1332+  0000                         macro   wait329
1333+  0000~                        wait322
1334+  0000~                        wait7
1335+  0000                         endm
1336+  0000             
1337+  0000                         macro   wait337
1338+  0000~                        wait322
1339+  0000~                        wait15
1340+  0000                         endm
1341+  0000             
1342+  0000                         macro   wait338
1343+  0000~                        wait2p16x 21
1344+  0000                         endm
1345+  0000             
1346+  0000                         macro   wait345
1347+  0000~                        wait338
1348+  0000~                        wait7
1349+  0000                         endm
1350+  0000             
1351+  0000                         macro   wait434
1352+  0000~                        wait2p16x 27
1353+  0000                         endm
1354+  0000             
1355+  0000                         macro   wait450
1356+  0000~                        wait2p16x 28
1357+  0000                         endm
1358+  0000             
1359+  0000                         macro   wait454
1360+  0000~                        wait450
1361+  0000~                        wait4
1362+  0000                         endm
1363+  0000             
1364+  0000                         macro   wait455
1365+  0000~                        wait434
1366+  0000~                        wait21
1367+  0000                         endm
1368+  0000             
1369+  0000                         macro   wait546
1370+  0000~                        wait2p16x 34
1371+  0000                         endm
1372+  0000             
1373+  0000                         macro   wait562
1374+  0000~                        wait2p16x 35
1375+  0000                         endm
1376+  0000             
1377+  0000                         macro   wait567
1378+  0000~                        wait546
1379+  0000~                        wait21
1380+  0000                         endm
1381+  0000             
1382+  0000                         macro   wait578
1383+  0000~                        wait2p16x 36
1384+  0000                         endm
1385+  0000             
1386+  0000                         macro   wait586
1387+  0000~                        wait578
1388+  0000~                        wait8
1389+  0000                         endm
1390+  0000             
1391+  0000                         macro   wait590
1392+  0000~                        wait578
1393+  0000~                        wait12
1394+  0000                         endm
1395+  0000             
1396+  0000                         macro   wait594
1397+  0000~                        wait2p16x 37
1398+  0000                         endm
1399+  0000             
1400+  0000                         macro   wait595
1401+  0000~                        wait578
1402+  0000~                        wait17
1403+  0000                         endm
1404+  0000             
1405+  0000                         macro   wait598
1406+  0000~                        wait594
1407+  0000~                        wait4
1408+  0000                         endm
1409+  0000             
1410+  0000                         macro   wait599
1411+  0000~                        wait578
1412+  0000~                        wait21
1413+  0000                         endm
1414+  0000             
1415+  0000                         macro   wait602
1416+  0000~                        wait594
1417+  0000~                        wait8
1418+  0000                         endm
1419+  0000             
1420+  0000                         macro   wait609
1421+  0000~                        wait594
1422+  0000~                        wait15
1423+  0000                         endm
1424+  0000             
1425+  0000                         macro   wait610
1426+  0000~                        wait2p16x 38
1427+  0000                         endm
1428+  0000             
1429+  0000                         macro   wait614
1430+  0000~                        wait610
1431+  0000~                        wait4
1432+  0000                         endm
1433+  0000             
1434+  0000                         macro   wait618
1435+  0000~                        wait610
1436+  0000~                        wait8
1437+  0000                         endm
1438+  0000             
1439+  0000                         macro   wait619
1440+  0000~                        wait610
1441+  0000~                        wait9
1442+  0000                         endm
1443+  0000             
1444+  0000                         macro   wait622
1445+  0000~                        wait610
1446+  0000~                        wait12
1447+  0000                         endm
1448+  0000             
1449+  0000                         macro   wait623
1450+  0000~                        wait610
1451+  0000~                        wait13
1452+  0000                         endm
1453+  0000             
1454+  0000                         macro   wait626
1455+  0000~                        wait2p16x 39
1456+  0000                         endm
1457+  0000             
1458+  0000                         macro   wait634
1459+  0000~                        wait626
1460+  0000~                        wait8
1461+  0000                         endm
1462+  0000             
1463+  0000                         macro   wait638
1464+  0000~                        wait626
1465+  0000~                        wait12
1466+  0000                         endm
0114   0000             
0115   0000             
0116   0000             ; handlePCMCommand
0117   0000             ; ----------------
0118   0000             ; ? ->  HL  -> ?
0119   0000             ; ? ->  BC  -> ?
0120   0000             ; ? ->  DE  -> ?
0121   0000             ;
0122   0000             ; handle PCM command for channel 'ch' (PCM id < 0x100)
0123   0000             ; = 173 cycles
0124   0000             
0125   0000                         macro handlePCMCommand ch
0126   0000~            
0127   0000~                        LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
0128   0000~                        LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
0129   0000~            
0130   0000~                        LD      A, C                    ; A = new prio              ' 4     |
0131   0000~                        CP      (HL)                    ; compare to old prio       ' 7     |
0132   0000~                        LD      A, B                    ; A = SFX id                ' 4     | 25 (55)
0133   0000~                        JP      NC, .play_new_wait      ; >= old prio --> play      ' 10    |
0134   0000~            
0135   0000~                        OR      A                       ; silent PCM ?              ' 4     |
0136   0000~                        JP      Z, .play_new            ; always play               ' 10    | 14 (69)
0137   0000~            
0138   0000~                        wait94                          ; sync                      ' 94    |
0139   0000~                        JP      .end                    ;                           ' 10    | 88 (173)
0140   0000~            
0141   0000~            .play_new_wait
0142   0000~                        NOP                             ;                           ' 4     |
0143   0000~                        JP      .play_new               ; sync                      ' 10    | 14 (69)
0144   0000~            
0145   0000~            .play_new
0146   0000~                        LD      (HL), C                 ; set new prio              ' 7     | (76)
0147   0000~            
0148   0000~                        LD      H, (ID_TABLE>>10)       ;                           ' 7     |
0149   0000~                        LD      L, A                    ;                           ' 4     |
0150   0000~                        ADD     HL, HL                  ;                           ' 6     | 33 (109)
0151   0000~                        ADD     HL, HL                  ; HL point on new PCM addr  ' 6     |
0152   0000~                        LD      DE, PCM_ADDR+(ch*8)     ; DE point on PCM info      ' 10    |
0153   0000~            
0154   0000~                        LDI                             ; copy params               ' 16    |
0155   0000~                        LDI                             ;                           ' 16    | 64 (173)
0156   0000~                        LDI                             ;                           ' 16    |
0157   0000~                        LDI                             ;                           ' 16    |
0158   0000~            
0159   0000~            .end
0160   0000                         endm
0161   0000             
0162   0000             
0163   0000             ; handlePCMCommandXGM
0164   0000             ; -------------------
0165   0000             ; XGM buffer ->  DE
0166   0000             ; PCM prio   ->  C   -> ?
0167   0000             ; PCM id     ->  B   -> ?
0168   0000             ; ?          ->  HL  -> ?
0169   0000             ;
0170   0000             ; handle PCM command for channel 'ch' for XGM music (PCM id < 0x40)
0171   0000             ; = 170 cycles
0172   0000             
0173   0000                         macro handlePCMCommandXGM ch
0174   0000~            
0175   0000~                        LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (10)
0176   0000~            
0177   0000~                        LD      A, C                    ; A = new prio              ' 4     |
0178   0000~                        CP      (HL)                    ; compare new and old prio  ' 7     | 25 (35)
0179   0000~                        LD      A, B                    ; A = SFX id (max = $3F)    ' 4     |
0180   0000~                        JP      NC, .play_new_wait      ; >= old prio --> play      ' 10    |
0181   0000~            
0182   0000~                        OR      A                       ; silent PCM ?              ' 4     |
0183   0000~                        JP      Z, .play_new            ; always play               ' 10    | 14 (49)
0184   0000~            
0185   0000~                        wait111                         ; sync                      ' 111   |
0186   0000~                        JP      .end                    ;                           ' 10    | 121 (170)
0187   0000~            
0188   0000~            .play_new_wait
0189   0000~                        OR      0                       ;                           ' 7     |
0190   0000~                        OR      0                       ; sync without changing A   ' 7     | 14 (49)
0191   0000~            
0192   0000~            .play_new
0193   0000~                        LD      (HL), C                 ; set new prio              ' 7     | (56)
0194   0000~            
0195   0000~                        LD      H, (ID_TABLE>>8)        ;                           ' 7     |
0196   0000~                        ADD     A                       ;                           ' 4     |
0197   0000~                        ADD     A                       ;                           ' 4     | 19 (75)
0198   0000~                        LD      L, A                    ; HL point on new PCM addr  ' 4     |
0199   0000~            
0200   0000~                        PUSH    DE                      ; save DE                   ' 11    |
0201   0000~                        LD      DE, PCM_ADDR+(ch*8)     ; DE point on PCM info      ' 10    | 21 (96)
0202   0000~            
0203   0000~                        LDI                             ; copy params               ' 16    |
0204   0000~                        LDI                             ;                           ' 16    | 64 (160)
0205   0000~                        LDI                             ;                           ' 16    |
0206   0000~                        LDI                             ;                           ' 16    |
0207   0000~            
0208   0000~                        POP     DE                      ; restore DE                ' 10    | (170)
0209   0000~            
0210   0000~            .end
0211   0000                         endm
0212   0000             
0213   0000             
0214   0000             ; prepareChannel
0215   0000             ; --------------
0216   0000             ; ? ->  HL  ->  point to the sample source (ROM)
0217   0000             ; ? ->  DE  ->  point to write buffer
0218   0000             ;
0219   0000             ; set bank and prepare registers to play PCM channel 'ch'
0220   0000             ; = 176 cycles
0221   0000             
0222   0000                         macro prepareChannel ch
0223   0000~            
0224   0000~                        LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
0225   0000~            
0226   0000~                        LD      A, L                    ; A = bit 8-15          ' 4     |
0227   0000~                        RLA                             ; C flag = bit 15       ' 4     |
0228   0000~                        LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
0229   0000~                        RLA                             ; A = bit 15-22         ' 4     |
0230   0000~            
0231   0000~                        setBank_DE                      ; set bank              ' 105   | (137)
0232   0000~            
0233   0000~                        LD      H, L                    ;                       ' 4     |
0234   0000~                        SET     7, H                    ; HL |= 0x8000          ' 8     | 19 (156)
0235   0000~                        LD      L, 0                    ; HL = sample addr bank ' 7     |
0236   0000~            
0237   0000~                        LD      DE, (WRITEBUF)          ; DE = write buffer     ' 20    | (176)
0238   0000~            
0239   0000                         endm
0240   0000             
0241   0000             
0242   0000             ; stopChannel
0243   0000             ; -----------
0244   0000             ; ? ->  HL  -> STATUS
0245   0000             ;
0246   0000             ; set null sample play for channel 'ch'
0247   0000             ; = 100 cycles
0248   0000             
0249   0000                         macro stopChannel ch
0250   0000~            
0251   0000~                        LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0252   0000~                        LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0253   0000~                        LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0254   0000~                        LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0255   0000~            
0256   0000~                        XOR     A                       ;                           ' 4     |
0257   0000~                        LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0258   0000~            
0259   0000~                        LD      HL, STATUS              ; HL = STATUS               ' 10    |
0260   0000~                        RES     ch, (HL)                ; clear play status         ' 15    | 25 (100)
0261   0000~            
0262   0000                         endm
0263   0000             
0264   0000             
0265   0000             ; updateChannelData
0266   0000             ; -----------------
0267   0000             ; ? ->  HL  -> ?
0268   0000             ;
0269   0000             ; update sample address and sample lenght
0270   0000             ; check is sample is done and stop it if needed
0271   0000             ; = 178 cycles
0272   0000             
0273   0000                         macro updateChannelData ch
0274   0000~            
0275   0000~                        LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
0276   0000~                        INC     HL                      ;                       ' 6     | (38)
0277   0000~                        LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
0278   0000~            
0279   0000~                        LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
0280   0000~                        DEC     HL                      ;                       ' 6     | 22 (60)
0281   0000~            
0282   0000~                        LD      A, H                    ;                       ' 4     |
0283   0000~                        OR      L                       ;                       ' 4     | 18 (78)
0284   0000~                        JP      Z, .done                ; sample done ?         ' 10    |
0285   0000~            
0286   0000~                        wait74                          ;                       ' 74    |
0287   0000~                        JP      .end                    ;                       ' 10    | 84 (162)
0288   0000~            
0289   0000~            .done
0290   0000~                        LD      HL, STATUS              ; HL = STATUS           ' 10    |
0291   0000~                        RES     ch, (HL)                ; clear play status     ' 15    | 25 (103)
0292   0000~            
0293   0000~                        XOR     A                       ;                       ' 4     |
0294   0000~                        LD      (PCM_PRIO+(ch*8)), A    ; clear prio            ' 13    | 17 (120)
0295   0000~            
0296   0000~                        LD      HL, (ID_TABLE+0)        ; HL = null PCM addr    ' 16    |
0297   0000~                        LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr      ' 16    | 42 (162)
0298   0000~                        LD      HL, $0001               ; HL = null PCM len     ' 10    |
0299   0000~            
0300   0000~            .end
0301   0000~                        LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    | (178)
0302   0000~            
0303   0000                         endm
0304   0000             
0305   0000             
0306   0000             ; compareReadWrite
0307   0000             ; ----------------
0308   0000             ; read buffer  -> BC'
0309   0000             ; write buffer -> DE
0310   0000             ;                 ZF ->  Write == Read buffer
0311   0000             ;
0312   0000             ; compare read and write buffer
0313   0000             ; = 16 cycles
0314   0000             
0315   0000                         macro compareReadWrite
0316   0000~            
0317   0000~                        EXX                     ;                           ' 4     |
0318   0000~                        LD      A, B            ; A = read buffer high      ' 4     |
0319   0000~                        EXX                     ;                           ' 4     | 16
0320   0000~                        CP      D               ; compare write buffer high ' 4     |
0321   0000~            
0322   0000                         endm
0323   0000             
0324   0000             
0325   0000             ; readAndClear2
0326   0000             ; -------------
0327   0000             ; ? ->  HL  ->  point to the sample source (ROM)
0328   0000             ; ? ->  DE  ->  point to write buffer
0329   0000             ; ? ->  PF  ->  0=done 1=not done
0330   0000             ;
0331   0000             ; read 2 samples from rom and write them in output buffer
0332   0000             ; = 34 cycles
0333   0000             
0334   0000                         macro readAndClear2
0335   0000~            
0336   0000~                        LDI                     ;                           ' 16+1  |
0337   0000~                        LDI                     ;                           ' 16+1  | 34
0338   0000~            
0339   0000                         endm
0340   0000             
0341   0000             
0342   0000             ; readAndMix
0343   0000             ; ----------
0344   0000             ; ?   ->  HL  ->  point to the sample source (ROM)
0345   0000             ; ?   ->  DE  ->  point to write buffer
0346   0000             ; $80 ->  B
0347   0000             ;
0348   0000             ; read 1 sample and mix it in output buffer
0349   0000             ; = 40 (+11 when overflow)
0350   0000             
0351   0000                         macro readAndMix
0352   0000~            
0353   0000~                        LD      A, (DE)         ; read value in write buf   ' 7     |
0354   0000~                        ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0355   0000~                        JP      PO, .ok         ; check overflow            ' 10    |
0356   0000~            
0357   0000~                        LD      A, B            ; fix overflow              ' 4     |
0358   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0359   0000~            
0360   0000~            .ok
0361   0000~                        LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0362   0000~                        INC     E               ;                           ' 4     |
0363   0000~                        INC     L               ; next                      ' 4     |
0364   0000~            
0365   0000                         endm                    ;                           ' 40 (+11)
0366   0000             
0367   0000             
0368   0000             ; readMixAndUnsign
0369   0000             ; ----------------
0370   0000             ; ?   ->  HL  ->  point to the sample source (ROM)
0371   0000             ; ?   ->  DE  ->  point to write buffer
0372   0000             ; $80 ->  B
0373   0000             ;
0374   0000             ; read 1 sample and mix it with output buffer, then unsign it
0375   0000             ; = 40 (+11 when overflow)
0376   0000             
0377   0000                         macro readMixAndUnsign
0378   0000~            
0379   0000~                        LD      A, (DE)         ; read value in write buf   ' 7     |
0380   0000~                        ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0381   0000~                        JP      PO, .ok         ; check overflow            ' 10    |
0382   0000~            
0383   0000~                        LD      A, B            ; fix overflow              ' 4     |
0384   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0385   0000~            
0386   0000~            .ok
0387   0000~                        ADD     B               ; unsign                    ' 4     |
0388   0000~                        LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0389   0000~                        INC     E               ;                           ' 4     |
0390   0000~                        INC     L               ; next                      ' 4     |
0391   0000~            
0392   0000                         endm                    ;                           ' 44 (+11)
0393   0000             
0394   0000             
0395   0000             ; sampleOutput
0396   0000             ; ------------
0397   0000             ; YMPORT0     -> HL'
0398   0000             ; YMPORT1     -> DE'
0399   0000             ; read buffer -> BC' ->  read buffer
0400   0000             ;
0401   0000             ; output a sample to the DAC
0402   0000             ; = 36 cycles
0403   0000             
0404   0000                         macro sampleOutput
0405   0000~            
0406   0000~                        EXX                     ;                           ' 4     | 4
0407   0000~            
0408   0000~                        LD      A, (BC)         ; read sample from buffer   ' 7     |
0409   0000~                        INC     BC              ; increment read address    ' 6     |
0410   0000~                        RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0411   0000~                        LD      (DE), A         ; play sample               ' 7     |
0412   0000~            
0413   0000~                        EXX                     ;                           ' 4     | (36)
0414   0000~            
0415   0000                         endm
0416   0000             
0417   0000             
0418   0000             ; sampleOutputSafe
0419   0000             ; ----------------
0420   0000             ; YMPORT0     -> HL'
0421   0000             ; YMPORT1     -> DE'
0422   0000             ; read buffer -> BC' ->  read buffer
0423   0000             ;
0424   0000             ; output a sample to the DAC
0425   0000             ; = 46 cycles
0426   0000             
0427   0000                         macro sampleOutputSafe
0428   0000~            
0429   0000~                        EXX                     ;                           ' 4     | 4
0430   0000~            
0431   0000~                        LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
0432   0000~                        LD      A, (BC)         ; read sample from buffer   ' 7     |
0433   0000~                        INC     BC              ; increment read address    ' 6     | 38 (42)
0434   0000~                        RES     2, B            ; read_address &= 0x03FF    ' 8     |
0435   0000~                        LD      (DE), A         ; play sample               ' 7     |
0436   0000~            
0437   0000~                        EXX                     ;                           ' 4     | (46)
0438   0000~            
0439   0000                         endm
0440   0000             
0441   0000             
0442   0000             ; waitYMReady
0443   0000             ; -----------
0444   0000             ; YMPORT     -> HL
0445   0000             ;
0446   0000             ; wait until YM ready
0447   0000             ; = 22 cycles minimum (22 * X)
0448   0000             
0449   0000                         macro waitYMReady
0450   0000~            
0451   0000~            .wait
0452   0000~                        BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
0453   0000~                        JP      NZ, .wait       ; wait while busy           ' 10    |
0454   0000~            
0455   0000                         endm
0456   0000             
0457   0000             
0458   0000             ; ###########################       init       ##############################
0459   0000             
0460   0000                         ORG     $0000
0461   0000             
0462   0000             init
0463   0000 F3                      DI                      ; disable ints
0464   0001 31 00 16                LD      SP, STACK       ; setup stack
0465   0004 ED 56                   IM      $01             ; set int mode 1
0466   0006 AF                      XOR     A
0467   0007 32 02 01                LD      (STATUS), A     ; driver not ready
0468   000A 32 00 01                LD      (COMMAND), A    ; command cleared
0469   000D C3 00 02                JP      start           ; jump to start
0470   0010             
0471   0010             
0472   0010             ; ###########################     interrupt    ##############################
0473   0010             
0474   0010 00                      BLOCK   $0038-$
0475   0038             
0476   0038             interrupt
0477   0038 F5                      PUSH    AF              ;                       ' 11    |
0478   0039 FD 2C                   INC     IYL             ; inc vint counter      ' 8     |
0479   003B             
0480   003B                         ; we should wait at least 180 cycles so the IRQ line goes down
0481   003B                         ; else we will take the interrupt several time
0482   003B             
0483   003B                         wait120                 ;
0483   003B 3E 06       >            LD      A, w            ; 7-2
0483   003D 3D          >            DEC     A               ; 4
0483   003E 20 FD       >            JR      NZ, .loop       ; 12
0483   0040 ED 4F       >            LD      R, A
0483   0042 ED 4F       >            LD      R, A
0483   0044 00          >            NOP
0484   0045             
0485   0045 F1                      POP     AF              ;                       ' 10    |
0486   0046 FB                      EI                      ;                       ' 4     |
0487   0047 C9                      RET                     ;                       ' 10    | +180
0488   0048             
0489   0048             
0490   0048             ; ###########################       main       ##############################
0491   0048             
0492   0048 00                      BLOCK   $0200-$
0493   0200             
0494   0200             start
0495   0200             
0496   0200 21 04 01                LD      HL, PARAMS
0497   0203 3E 00                   LD      A, $00
0498   0205 06 40                   LD      B, $40
0499   0207             
0500   0207             cp_loop
0501   0207 77                      LD      (HL), A         ; clear parameters
0502   0208 23                      INC     HL
0503   0209 10 FC                   DJNZ    cp_loop
0504   020B             
0505   020B 21 64 01                LD      HL, YM_RR_OFF
0506   020E 3E FF                   LD      A, $FF
0507   0210 06 18                   LD      B, (6 * 4)
0508   0212             
0509   0212             off_loop
0510   0212 77                      LD      (HL), A         ; clear off settings
0511   0213 23                      INC     HL
0512   0214 10 FC                   DJNZ    off_loop
0513   0216             
0514   0216 21 7C 01                LD      HL, PSG_ENV_OFF
0515   0219             
0516   0219 36 9F                   LD      (HL), $9F       ; PSG channel 0 off
0517   021B 23                      INC     HL
0518   021C 36 BF                   LD      (HL), $BF       ; PSG channel 1 off
0519   021E 23                      INC     HL
0520   021F 36 DF                   LD      (HL), $DF       ; PSG channel 2 off
0521   0221 23                      INC     HL
0522   0222 36 FF                   LD      (HL), $FF       ; PSG channel 3 off
0523   0224             
0524   0224 21 64 01                LD      HL, YM_RR_OFF
0525   0227 11 44 01                LD      DE, YM_RR_SAV
0526   022A 01 1C 00                LD      BC, (6 * 4) + 4
0527   022D ED B0                   LDIR                    ; copy off settings to sav settings
0528   022F             
0529   022F 21 00 18                LD      HL, PCM_BUFFER
0530   0232 3E 80                   LD      A, $80
0531   0234 06 00                   LD      B, $00          ; for 256 * 4 bytes to clear
0532   0236             
0533   0236             cb_loop
0534   0236 77                      LD      (HL), A         ; initialise buffers to silent
0535   0237 23                      INC     HL
0536   0238 77                      LD      (HL), A
0537   0239 23                      INC     HL
0538   023A 77                      LD      (HL), A
0539   023B 23                      INC     HL
0540   023C 77                      LD      (HL), A
0541   023D 23                      INC     HL
0542   023E 10 F6                   DJNZ    cb_loop
0543   0240             
0544   0240 3E 00                   LD      A, $00
0545   0242             
0546   0242 21 60 01                LD      HL, YM_2B_SAV
0547   0245 77                      LD      (HL), A         ; DAC disabled by default
0548   0246 21 61 01                LD      HL, YM_2B_CNT
0549   0249 77                      LD      (HL), A         ; DAC disabled by default
0550   024A             
0551   024A CD E5 13                CALL    initDAC         ; prepare DAC for output
0552   024D             
0553   024D 21 00 18                LD      HL, PCM_BUFFER0 ; initialise write and read buffer
0554   0250 22 38 01                LD      (WRITEBUF), HL
0555   0253 21 00 19                LD      HL, PCM_BUFFER1
0556   0256 22 3A 01                LD      (READBUF), HL
0557   0259 FD 2E 00                LD      IYL, $0         ; clear vint counter
0558   025C             
0559   025C 44 4D                   LD      BC, HL          ; BC' point to read buffer
0560   025E 21 00 40                LD      HL, YMPORT0     ; HL' point to YMPORT0
0561   0261 11 01 40                LD      DE, YMPORT1     ; DE' point to YMPORT1
0562   0264 D9                      EXX
0563   0265             
0564   0265                         stopChannel 0           ; stop all channels
0564   0265 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0564   0268 22 16 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0564   026B 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0564   026E 22 18 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0564   0271 AF          >            XOR     A                       ;                           ' 4     |
0564   0272 32 14 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0564   0275 21 02 01    >            LD      HL, STATUS              ; HL = STATUS               ' 10    |
0564   0278 CB 86       >            RES     ch, (HL)                ; clear play status         ' 15    | 25 (100)
0565   027A                         stopChannel 1
0565   027A 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0565   027D 22 1E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0565   0280 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0565   0283 22 20 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0565   0286 AF          >            XOR     A                       ;                           ' 4     |
0565   0287 32 1C 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0565   028A 21 02 01    >            LD      HL, STATUS              ; HL = STATUS               ' 10    |
0565   028D CB 8E       >            RES     ch, (HL)                ; clear play status         ' 15    | 25 (100)
0566   028F                         stopChannel 2
0566   028F 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0566   0292 22 26 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0566   0295 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0566   0298 22 28 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0566   029B AF          >            XOR     A                       ;                           ' 4     |
0566   029C 32 24 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0566   029F 21 02 01    >            LD      HL, STATUS              ; HL = STATUS               ' 10    |
0566   02A2 CB 96       >            RES     ch, (HL)                ; clear play status         ' 15    | 25 (100)
0567   02A4                         stopChannel 3
0567   02A4 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0567   02A7 22 2E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0567   02AA 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0567   02AD 22 30 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0567   02B0 AF          >            XOR     A                       ;                           ' 4     |
0567   02B1 32 2C 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0567   02B4 21 02 01    >            LD      HL, STATUS              ; HL = STATUS               ' 10    |
0567   02B7 CB 9E       >            RES     ch, (HL)                ; clear play status         ' 15    | 25 (100)
0568   02B9             
0569   02B9 3E 80                   LD      A, STATREADY
0570   02BB 32 02 01                LD      (STATUS), A     ; driver ready
0571   02BE FB                      EI                      ; enable interrupt
0572   02BF             
0573   02BF             main_loop
0574   02BF             
0575   02BF             ; PCM channel 0
0576   02BF             ; -------------
0577   02BF             
0578   02BF             ; $00
0579   02BF                         sampleOutput                ;                       ' 36    |
0579   02BF D9          >            EXX                     ;                           ' 4     | 4
0579   02C0 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0579   02C1 03          >            INC     BC              ; increment read address    ' 6     |
0579   02C2 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0579   02C4 12          >            LD      (DE), A         ; play sample               ' 7     |
0579   02C5 D9          >            EXX                     ;                           ' 4     | (36)
0580   02C6                         prepareChannel 0            ;                       ' 176   |
0580   02C6 2A 16 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
0580   02C9 7D          >            LD      A, L                    ; A = bit 8-15          ' 4     |
0580   02CA 17          >            RLA                             ; C flag = bit 15       ' 4     |
0580   02CB 7C          >            LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
0580   02CC 17          >            RLA                             ; A = bit 15-22         ' 4     |
0580   02CD 11 00 60    >            LD  DE, BANKREG         ; DE = BANKREG              ' 10
0580   02D0 12          >            LD  (DE), A             ; #1 (bit 15)               ' 7
0580   02D1 1F          >            RRA                     ;                           ' 4
0580   02D2 12          >            LD  (DE), A             ; #2 (bit 16)               ' 7
0580   02D3 1F          >            RRA                     ;                           ' 4
0580   02D4 12          >            LD  (DE), A             ; #3 (bit 17)               ' 7
0580   02D5 1F          >            RRA                     ;                           ' 4
0580   02D6 12          >            LD  (DE), A             ; #4 (bit 18)               ' 7
0580   02D7 1F          >            RRA                     ;                           ' 4
0580   02D8 12          >            LD  (DE), A             ; #5 (bit 19)               ' 7
0580   02D9 1F          >            RRA                     ;                           ' 4
0580   02DA 12          >            LD  (DE), A             ; #6 (bit 20)               ' 7
0580   02DB 1F          >            RRA                     ;                           ' 4
0580   02DC 12          >            LD  (DE), A             ; #7 (bit 21)               ' 7
0580   02DD 1F          >            RRA                     ;                           ' 4
0580   02DE 12          >            LD  (DE), A             ; #8 (bit 22)               ' 7
0580   02DF 1F          >            RRA                     ;                           ' 4
0580   02E0 12          >            LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
0580   02E1 65          >            LD      H, L                    ;                       ' 4     |
0580   02E2 CB FC       >            SET     7, H                    ; HL |= 0x8000          ' 8     | 19 (156)
0580   02E4 2E 00       >            LD      L, 0                    ; HL = sample addr bank ' 7     |
0580   02E6 ED 5B 38 01 >            LD      DE, (WRITEBUF)          ; DE = write buffer     ' 20    | (176)
0581   02EA 01 FC 00                LD      BC, 252             ; prepare loop counter  ' 10    | 254
0582   02ED                         wait32                      ; sync                  ' 32    |
0582   02ED 1A          >            LD      A, (DE)
0582   02EE 00          >            NOP
0582   02EF ED 4F       >            LD      R, A
0582   02F1 18 00       >            JR      .loop
0583   02F3             
0584   02F3             ; $01-$15
0585   02F3             .loop_ch0
0586   02F3                         sampleOutput                ;                       ' 36    |
0586   02F3 D9          >            EXX                     ;                           ' 4     | 4
0586   02F4 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0586   02F5 03          >            INC     BC              ; increment read address    ' 6     |
0586   02F6 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0586   02F8 12          >            LD      (DE), A         ; play sample               ' 7     |
0586   02F9 D9          >            EXX                     ;                           ' 4     | (36)
0587   02FA                         readAndClear2               ; process 12 samples    ' 34    |
0587   02FA ED A0       >            LDI                     ;                           ' 16+1  |
0587   02FC ED A0       >            LDI                     ;                           ' 16+1  | 34
0588   02FE                         readAndClear2               ;                       ' 34    |
0588   02FE ED A0       >            LDI                     ;                           ' 16+1  |
0588   0300 ED A0       >            LDI                     ;                           ' 16+1  | 34
0589   0302                         readAndClear2               ;                       ' 34    |
0589   0302 ED A0       >            LDI                     ;                           ' 16+1  |
0589   0304 ED A0       >            LDI                     ;                           ' 16+1  | 34
0590   0306                         readAndClear2               ;                       ' 34    | 254
0590   0306 ED A0       >            LDI                     ;                           ' 16+1  |
0590   0308 ED A0       >            LDI                     ;                           ' 16+1  | 34
0591   030A                         readAndClear2               ;                       ' 34    |
0591   030A ED A0       >            LDI                     ;                           ' 16+1  |
0591   030C ED A0       >            LDI                     ;                           ' 16+1  | 34
0592   030E                         readAndClear2               ;                       ' 34    |
0592   030E ED A0       >            LDI                     ;                           ' 16+1  |
0592   0310 ED A0       >            LDI                     ;                           ' 16+1  | 34
0593   0312                         wait4                       ; sync                  ' 4     |
0593   0312 00          >            NOP
0594   0313 EA F3 02                JP      PE, .loop_ch0       ;                       ' 10    |
0595   0316             
0596   0316             ; $16
0597   0316                         sampleOutput                ;                       ' 36    |
0597   0316 D9          >            EXX                     ;                           ' 4     | 4
0597   0317 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0597   0318 03          >            INC     BC              ; increment read address    ' 6     |
0597   0319 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0597   031B 12          >            LD      (DE), A         ; play sample               ' 7     |
0597   031C D9          >            EXX                     ;                           ' 4     | (36)
0598   031D                         readAndClear2               ; process 4 samples     ' 34    | 254
0598   031D ED A0       >            LDI                     ;                           ' 16+1  |
0598   031F ED A0       >            LDI                     ;                           ' 16+1  | 34
0599   0321                         readAndClear2               ;                       ' 34    |
0599   0321 ED A0       >            LDI                     ;                           ' 16+1  |
0599   0323 ED A0       >            LDI                     ;                           ' 16+1  | 34
0600   0325                         wait150                     ; sync                  ' 150   |
0600   0325 3E 09       >            LD      A, w            ; 7-2
0600   0327 3D          >            DEC     A               ; 4
0600   0328 20 FD       >            JR      NZ, .loop       ; 12
0600   032A 00          >            NOP
0601   032B             
0602   032B             ; $17
0603   032B                         sampleOutput                ;                       ' 36    |
0603   032B D9          >            EXX                     ;                           ' 4     | 4
0603   032C 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0603   032D 03          >            INC     BC              ; increment read address    ' 6     |
0603   032E CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0603   0330 12          >            LD      (DE), A         ; play sample               ' 7     |
0603   0331 D9          >            EXX                     ;                           ' 4     | (36)
0604   0332                         updateChannelData 0         ; update channel data   ' 178   | 254
0604   0332 2A 16 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
0604   0335 23          >            INC     HL                      ;                       ' 6     | (38)
0604   0336 22 16 01    >            LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
0604   0339 2A 18 01    >            LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
0604   033C 2B          >            DEC     HL                      ;                       ' 6     | 22 (60)
0604   033D 7C          >            LD      A, H                    ;                       ' 4     |
0604   033E B5          >            OR      L                       ;                       ' 4     | 18 (78)
0604   033F CA 4C 03    >            JP      Z, .done                ; sample done ?         ' 10    |
0604   0342 3E 04       >            LD      A, w            ; 7-2
0604   0344 3D          >            DEC     A               ; 4
0604   0345 20 FD       >            JR      NZ, .loop       ; 12
0604   0347 00          >            NOP
0604   0348 00          >            NOP
0604   0349 C3 5E 03    >            JP      .end                    ;                       ' 10    | 84 (162)
0604   034C 21 02 01    >            LD      HL, STATUS              ; HL = STATUS           ' 10    |
0604   034F CB 86       >            RES     ch, (HL)                ; clear play status     ' 15    | 25 (103)
0604   0351 AF          >            XOR     A                       ;                       ' 4     |
0604   0352 32 14 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio            ' 13    | 17 (120)
0604   0355 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr    ' 16    |
0604   0358 22 16 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr      ' 16    | 42 (162)
0604   035B 21 01 00    >            LD      HL, $0001               ; HL = null PCM len     ' 10    |
0604   035E 22 18 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    | (178)
0605   0361                         wait40                      ; sync                  ' 40    |
0605   0361 ED 4F       >            LD      R, A
0605   0363 ED 4F       >            LD      R, A
0605   0365 ED 4F       >            LD      R, A
0605   0367 ED 4F       >            LD      R, A
0605   0369 00          >            NOP
0606   036A             
0607   036A             ; PCM channel 1
0608   036A             ; -------------
0609   036A             
0610   036A             ; $18
0611   036A                         sampleOutput                ;                       ' 36    |
0611   036A D9          >            EXX                     ;                           ' 4     | 4
0611   036B 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0611   036C 03          >            INC     BC              ; increment read address    ' 6     |
0611   036D CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0611   036F 12          >            LD      (DE), A         ; play sample               ' 7     |
0611   0370 D9          >            EXX                     ;                           ' 4     | (36)
0612   0371                         prepareChannel 1            ;                       ' 176   | 254
0612   0371 2A 1E 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
0612   0374 7D          >            LD      A, L                    ; A = bit 8-15          ' 4     |
0612   0375 17          >            RLA                             ; C flag = bit 15       ' 4     |
0612   0376 7C          >            LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
0612   0377 17          >            RLA                             ; A = bit 15-22         ' 4     |
0612   0378 11 00 60    >            LD  DE, BANKREG         ; DE = BANKREG              ' 10
0612   037B 12          >            LD  (DE), A             ; #1 (bit 15)               ' 7
0612   037C 1F          >            RRA                     ;                           ' 4
0612   037D 12          >            LD  (DE), A             ; #2 (bit 16)               ' 7
0612   037E 1F          >            RRA                     ;                           ' 4
0612   037F 12          >            LD  (DE), A             ; #3 (bit 17)               ' 7
0612   0380 1F          >            RRA                     ;                           ' 4
0612   0381 12          >            LD  (DE), A             ; #4 (bit 18)               ' 7
0612   0382 1F          >            RRA                     ;                           ' 4
0612   0383 12          >            LD  (DE), A             ; #5 (bit 19)               ' 7
0612   0384 1F          >            RRA                     ;                           ' 4
0612   0385 12          >            LD  (DE), A             ; #6 (bit 20)               ' 7
0612   0386 1F          >            RRA                     ;                           ' 4
0612   0387 12          >            LD  (DE), A             ; #7 (bit 21)               ' 7
0612   0388 1F          >            RRA                     ;                           ' 4
0612   0389 12          >            LD  (DE), A             ; #8 (bit 22)               ' 7
0612   038A 1F          >            RRA                     ;                           ' 4
0612   038B 12          >            LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
0612   038C 65          >            LD      H, L                    ;                       ' 4     |
0612   038D CB FC       >            SET     7, H                    ; HL |= 0x8000          ' 8     | 19 (156)
0612   038F 2E 00       >            LD      L, 0                    ; HL = sample addr bank ' 7     |
0612   0391 ED 5B 38 01 >            LD      DE, (WRITEBUF)          ; DE = write buffer     ' 20    | (176)
0613   0395 01 10 80                LD      BC, $8010           ; prepare loop counter  ' 10    |
0614   0398                         wait32                      ; sync                  ' 32    |
0614   0398 1A          >            LD      A, (DE)
0614   0399 00          >            NOP
0614   039A ED 4F       >            LD      R, A
0614   039C 18 00       >            JR      .loop
0615   039E             
0616   039E             ; $19-48
0617   039E             .loop_ch1
0618   039E                         sampleOutput                ;                       ' 36    |
0618   039E D9          >            EXX                     ;                           ' 4     | 4
0618   039F 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0618   03A0 03          >            INC     BC              ; increment read address    ' 6     |
0618   03A1 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0618   03A3 12          >            LD      (DE), A         ; play sample               ' 7     |
0618   03A4 D9          >            EXX                     ;                           ' 4     | (36)
0619   03A5                         readAndMix                  ; mix 16 samples        ' 40    |
0619   03A5 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0619   03A6 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0619   03A7 E2 AD 03    >            JP      PO, .ok         ; check overflow            ' 10    |
0619   03AA 78          >            LD      A, B            ; fix overflow              ' 4     |
0619   03AB CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0619   03AD 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0619   03AE 1C          >            INC     E               ;                           ' 4     |
0619   03AF 2C          >            INC     L               ; next                      ' 4     |
0620   03B0                         readAndMix                  ;                       ' 40    |
0620   03B0 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0620   03B1 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0620   03B2 E2 B8 03    >            JP      PO, .ok         ; check overflow            ' 10    |
0620   03B5 78          >            LD      A, B            ; fix overflow              ' 4     |
0620   03B6 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0620   03B8 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0620   03B9 1C          >            INC     E               ;                           ' 4     |
0620   03BA 2C          >            INC     L               ; next                      ' 4     |
0621   03BB                         readAndMix                  ;                       ' 40    | 254-18
0621   03BB 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0621   03BC 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0621   03BD E2 C3 03    >            JP      PO, .ok         ; check overflow            ' 10    |
0621   03C0 78          >            LD      A, B            ; fix overflow              ' 4     |
0621   03C1 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0621   03C3 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0621   03C4 1C          >            INC     E               ;                           ' 4     |
0621   03C5 2C          >            INC     L               ; next                      ' 4     |
0622   03C6                         readAndMix                  ;                       ' 40    |
0622   03C6 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0622   03C7 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0622   03C8 E2 CE 03    >            JP      PO, .ok         ; check overflow            ' 10    |
0622   03CB 78          >            LD      A, B            ; fix overflow              ' 4     |
0622   03CC CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0622   03CE 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0622   03CF 1C          >            INC     E               ;                           ' 4     |
0622   03D0 2C          >            INC     L               ; next                      ' 4     |
0623   03D1                         readAndMix                  ;                       ' 40    |
0623   03D1 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0623   03D2 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0623   03D3 E2 D9 03    >            JP      PO, .ok         ; check overflow            ' 10    |
0623   03D6 78          >            LD      A, B            ; fix overflow              ' 4     |
0623   03D7 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0623   03D9 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0623   03DA 1C          >            INC     E               ;                           ' 4     |
0623   03DB 2C          >            INC     L               ; next                      ' 4     |
0624   03DC             
0625   03DC                         sampleOutput                ; -18 --> too soon      ' 36    |
0625   03DC D9          >            EXX                     ;                           ' 4     | 4
0625   03DD 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0625   03DE 03          >            INC     BC              ; increment read address    ' 6     |
0625   03DF CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0625   03E1 12          >            LD      (DE), A         ; play sample               ' 7     |
0625   03E2 D9          >            EXX                     ;                           ' 4     | (36)
0626   03E3                         readAndMix                  ;                       ' 40    |
0626   03E3 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0626   03E4 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0626   03E5 E2 EB 03    >            JP      PO, .ok         ; check overflow            ' 10    |
0626   03E8 78          >            LD      A, B            ; fix overflow              ' 4     |
0626   03E9 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0626   03EB 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0626   03EC 1C          >            INC     E               ;                           ' 4     |
0626   03ED 2C          >            INC     L               ; next                      ' 4     |
0627   03EE                         readAndMix                  ;                       ' 40    |
0627   03EE 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0627   03EF 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0627   03F0 E2 F6 03    >            JP      PO, .ok         ; check overflow            ' 10    |
0627   03F3 78          >            LD      A, B            ; fix overflow              ' 4     |
0627   03F4 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0627   03F6 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0627   03F7 1C          >            INC     E               ;                           ' 4     |
0627   03F8 2C          >            INC     L               ; next                      ' 4     |
0628   03F9                         readAndMix                  ;                       ' 40    |
0628   03F9 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0628   03FA 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0628   03FB E2 01 04    >            JP      PO, .ok         ; check overflow            ' 10    |
0628   03FE 78          >            LD      A, B            ; fix overflow              ' 4     |
0628   03FF CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0628   0401 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0628   0402 1C          >            INC     E               ;                           ' 4     |
0628   0403 2C          >            INC     L               ; next                      ' 4     |
0629   0404                         readAndMix                  ;                       ' 40    |
0629   0404 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0629   0405 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0629   0406 E2 0C 04    >            JP      PO, .ok         ; check overflow            ' 10    |
0629   0409 78          >            LD      A, B            ; fix overflow              ' 4     |
0629   040A CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0629   040C 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0629   040D 1C          >            INC     E               ;                           ' 4     |
0629   040E 2C          >            INC     L               ; next                      ' 4     |
0630   040F                         readAndMix                  ;                       ' 40    | 254+4
0630   040F 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0630   0410 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0630   0411 E2 17 04    >            JP      PO, .ok         ; check overflow            ' 10    |
0630   0414 78          >            LD      A, B            ; fix overflow              ' 4     |
0630   0415 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0630   0417 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0630   0418 1C          >            INC     E               ;                           ' 4     |
0630   0419 2C          >            INC     L               ; next                      ' 4     |
0631   041A                         readAndMix                  ;                       ' 40    |
0631   041A 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0631   041B 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0631   041C E2 22 04    >            JP      PO, .ok         ; check overflow            ' 10    |
0631   041F 78          >            LD      A, B            ; fix overflow              ' 4     |
0631   0420 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0631   0422 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0631   0423 1C          >            INC     E               ;                           ' 4     |
0631   0424 2C          >            INC     L               ; next                      ' 4     |
0632   0425             
0633   0425                         sampleOutput                ; +4 --> late           ' 36    |
0633   0425 D9          >            EXX                     ;                           ' 4     | 4
0633   0426 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0633   0427 03          >            INC     BC              ; increment read address    ' 6     |
0633   0428 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0633   042A 12          >            LD      (DE), A         ; play sample               ' 7     |
0633   042B D9          >            EXX                     ;                           ' 4     | (36)
0634   042C                         readAndMix                  ;                       ' 40    |
0634   042C 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0634   042D 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0634   042E E2 34 04    >            JP      PO, .ok         ; check overflow            ' 10    |
0634   0431 78          >            LD      A, B            ; fix overflow              ' 4     |
0634   0432 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0634   0434 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0634   0435 1C          >            INC     E               ;                           ' 4     |
0634   0436 2C          >            INC     L               ; next                      ' 4     |
0635   0437                         readAndMix                  ;                       ' 40    |
0635   0437 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0635   0438 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0635   0439 E2 3F 04    >            JP      PO, .ok         ; check overflow            ' 10    |
0635   043C 78          >            LD      A, B            ; fix overflow              ' 4     |
0635   043D CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0635   043F 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0635   0440 1C          >            INC     E               ;                           ' 4     |
0635   0441 2C          >            INC     L               ; next                      ' 4     |
0636   0442                         readAndMix                  ;                       ' 40    |
0636   0442 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0636   0443 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0636   0444 E2 4A 04    >            JP      PO, .ok         ; check overflow            ' 10    |
0636   0447 78          >            LD      A, B            ; fix overflow              ' 4     |
0636   0448 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0636   044A 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0636   044B 1C          >            INC     E               ;                           ' 4     |
0636   044C 2C          >            INC     L               ; next                      ' 4     |
0637   044D                         readAndMix                  ;                       ' 40    | 254
0637   044D 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0637   044E 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0637   044F E2 55 04    >            JP      PO, .ok         ; check overflow            ' 10    |
0637   0452 78          >            LD      A, B            ; fix overflow              ' 4     |
0637   0453 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0637   0455 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0637   0456 1C          >            INC     E               ;                           ' 4     |
0637   0457 2C          >            INC     L               ; next                      ' 4     |
0638   0458                         readAndMix                  ;                       ' 40    |
0638   0458 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0638   0459 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0638   045A E2 60 04    >            JP      PO, .ok         ; check overflow            ' 10    |
0638   045D 78          >            LD      A, B            ; fix overflow              ' 4     |
0638   045E CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0638   0460 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0638   0461 1C          >            INC     E               ;                           ' 4     |
0638   0462 2C          >            INC     L               ; next                      ' 4     |
0639   0463 0D                      DEC     C                   ;                       ' 4     |
0640   0464 C2 9E 03                JP      NZ, .loop_ch1       ;                       ' 10    |
0641   0467             
0642   0467             ; $49
0643   0467                         sampleOutput                ;                       ' 36    |
0643   0467 D9          >            EXX                     ;                           ' 4     | 4
0643   0468 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0643   0469 03          >            INC     BC              ; increment read address    ' 6     |
0643   046A CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0643   046C 12          >            LD      (DE), A         ; play sample               ' 7     |
0643   046D D9          >            EXX                     ;                           ' 4     | (36)
0644   046E                         updateChannelData 1         ; update channel data   ' 178   | 254
0644   046E 2A 1E 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
0644   0471 23          >            INC     HL                      ;                       ' 6     | (38)
0644   0472 22 1E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
0644   0475 2A 20 01    >            LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
0644   0478 2B          >            DEC     HL                      ;                       ' 6     | 22 (60)
0644   0479 7C          >            LD      A, H                    ;                       ' 4     |
0644   047A B5          >            OR      L                       ;                       ' 4     | 18 (78)
0644   047B CA 88 04    >            JP      Z, .done                ; sample done ?         ' 10    |
0644   047E 3E 04       >            LD      A, w            ; 7-2
0644   0480 3D          >            DEC     A               ; 4
0644   0481 20 FD       >            JR      NZ, .loop       ; 12
0644   0483 00          >            NOP
0644   0484 00          >            NOP
0644   0485 C3 9A 04    >            JP      .end                    ;                       ' 10    | 84 (162)
0644   0488 21 02 01    >            LD      HL, STATUS              ; HL = STATUS           ' 10    |
0644   048B CB 8E       >            RES     ch, (HL)                ; clear play status     ' 15    | 25 (103)
0644   048D AF          >            XOR     A                       ;                       ' 4     |
0644   048E 32 1C 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio            ' 13    | 17 (120)
0644   0491 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr    ' 16    |
0644   0494 22 1E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr      ' 16    | 42 (162)
0644   0497 21 01 00    >            LD      HL, $0001               ; HL = null PCM len     ' 10    |
0644   049A 22 20 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    | (178)
0645   049D                         wait40                      ; sync                  ' 40    |
0645   049D ED 4F       >            LD      R, A
0645   049F ED 4F       >            LD      R, A
0645   04A1 ED 4F       >            LD      R, A
0645   04A3 ED 4F       >            LD      R, A
0645   04A5 00          >            NOP
0646   04A6             
0647   04A6             ; PCM channel 2
0648   04A6             ; -------------
0649   04A6             
0650   04A6             ; $4A
0651   04A6                         sampleOutput                ;                       ' 36    |
0651   04A6 D9          >            EXX                     ;                           ' 4     | 4
0651   04A7 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0651   04A8 03          >            INC     BC              ; increment read address    ' 6     |
0651   04A9 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0651   04AB 12          >            LD      (DE), A         ; play sample               ' 7     |
0651   04AC D9          >            EXX                     ;                           ' 4     | (36)
0652   04AD                         prepareChannel 2            ;                       ' 176   | 254
0652   04AD 2A 26 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
0652   04B0 7D          >            LD      A, L                    ; A = bit 8-15          ' 4     |
0652   04B1 17          >            RLA                             ; C flag = bit 15       ' 4     |
0652   04B2 7C          >            LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
0652   04B3 17          >            RLA                             ; A = bit 15-22         ' 4     |
0652   04B4 11 00 60    >            LD  DE, BANKREG         ; DE = BANKREG              ' 10
0652   04B7 12          >            LD  (DE), A             ; #1 (bit 15)               ' 7
0652   04B8 1F          >            RRA                     ;                           ' 4
0652   04B9 12          >            LD  (DE), A             ; #2 (bit 16)               ' 7
0652   04BA 1F          >            RRA                     ;                           ' 4
0652   04BB 12          >            LD  (DE), A             ; #3 (bit 17)               ' 7
0652   04BC 1F          >            RRA                     ;                           ' 4
0652   04BD 12          >            LD  (DE), A             ; #4 (bit 18)               ' 7
0652   04BE 1F          >            RRA                     ;                           ' 4
0652   04BF 12          >            LD  (DE), A             ; #5 (bit 19)               ' 7
0652   04C0 1F          >            RRA                     ;                           ' 4
0652   04C1 12          >            LD  (DE), A             ; #6 (bit 20)               ' 7
0652   04C2 1F          >            RRA                     ;                           ' 4
0652   04C3 12          >            LD  (DE), A             ; #7 (bit 21)               ' 7
0652   04C4 1F          >            RRA                     ;                           ' 4
0652   04C5 12          >            LD  (DE), A             ; #8 (bit 22)               ' 7
0652   04C6 1F          >            RRA                     ;                           ' 4
0652   04C7 12          >            LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
0652   04C8 65          >            LD      H, L                    ;                       ' 4     |
0652   04C9 CB FC       >            SET     7, H                    ; HL |= 0x8000          ' 8     | 19 (156)
0652   04CB 2E 00       >            LD      L, 0                    ; HL = sample addr bank ' 7     |
0652   04CD ED 5B 38 01 >            LD      DE, (WRITEBUF)          ; DE = write buffer     ' 20    | (176)
0653   04D1 01 10 80                LD      BC, $8010           ; prepare loop counter  ' 10    |
0654   04D4                         wait32                      ; sync                  ' 32    |
0654   04D4 1A          >            LD      A, (DE)
0654   04D5 00          >            NOP
0654   04D6 ED 4F       >            LD      R, A
0654   04D8 18 00       >            JR      .loop
0655   04DA             
0656   04DA             ; $4B-$7A
0657   04DA             .loop_ch2
0658   04DA                         sampleOutput                ;                       ' 36    |
0658   04DA D9          >            EXX                     ;                           ' 4     | 4
0658   04DB 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0658   04DC 03          >            INC     BC              ; increment read address    ' 6     |
0658   04DD CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0658   04DF 12          >            LD      (DE), A         ; play sample               ' 7     |
0658   04E0 D9          >            EXX                     ;                           ' 4     | (36)
0659   04E1                         readAndMix                  ; mix 16 samples        ' 40    |
0659   04E1 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0659   04E2 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0659   04E3 E2 E9 04    >            JP      PO, .ok         ; check overflow            ' 10    |
0659   04E6 78          >            LD      A, B            ; fix overflow              ' 4     |
0659   04E7 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0659   04E9 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0659   04EA 1C          >            INC     E               ;                           ' 4     |
0659   04EB 2C          >            INC     L               ; next                      ' 4     |
0660   04EC                         readAndMix                  ;                       ' 40    |
0660   04EC 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0660   04ED 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0660   04EE E2 F4 04    >            JP      PO, .ok         ; check overflow            ' 10    |
0660   04F1 78          >            LD      A, B            ; fix overflow              ' 4     |
0660   04F2 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0660   04F4 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0660   04F5 1C          >            INC     E               ;                           ' 4     |
0660   04F6 2C          >            INC     L               ; next                      ' 4     |
0661   04F7                         readAndMix                  ;                       ' 40    | 254-18
0661   04F7 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0661   04F8 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0661   04F9 E2 FF 04    >            JP      PO, .ok         ; check overflow            ' 10    |
0661   04FC 78          >            LD      A, B            ; fix overflow              ' 4     |
0661   04FD CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0661   04FF 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0661   0500 1C          >            INC     E               ;                           ' 4     |
0661   0501 2C          >            INC     L               ; next                      ' 4     |
0662   0502                         readAndMix                  ;                       ' 40    |
0662   0502 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0662   0503 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0662   0504 E2 0A 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0662   0507 78          >            LD      A, B            ; fix overflow              ' 4     |
0662   0508 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0662   050A 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0662   050B 1C          >            INC     E               ;                           ' 4     |
0662   050C 2C          >            INC     L               ; next                      ' 4     |
0663   050D                         readAndMix                  ;                       ' 40    |
0663   050D 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0663   050E 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0663   050F E2 15 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0663   0512 78          >            LD      A, B            ; fix overflow              ' 4     |
0663   0513 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0663   0515 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0663   0516 1C          >            INC     E               ;                           ' 4     |
0663   0517 2C          >            INC     L               ; next                      ' 4     |
0664   0518             
0665   0518                         sampleOutput                ; -18 --> too soon      ' 36    |
0665   0518 D9          >            EXX                     ;                           ' 4     | 4
0665   0519 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0665   051A 03          >            INC     BC              ; increment read address    ' 6     |
0665   051B CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0665   051D 12          >            LD      (DE), A         ; play sample               ' 7     |
0665   051E D9          >            EXX                     ;                           ' 4     | (36)
0666   051F                         readAndMix                  ;                       ' 40    |
0666   051F 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0666   0520 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0666   0521 E2 27 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0666   0524 78          >            LD      A, B            ; fix overflow              ' 4     |
0666   0525 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0666   0527 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0666   0528 1C          >            INC     E               ;                           ' 4     |
0666   0529 2C          >            INC     L               ; next                      ' 4     |
0667   052A                         readAndMix                  ;                       ' 40    |
0667   052A 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0667   052B 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0667   052C E2 32 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0667   052F 78          >            LD      A, B            ; fix overflow              ' 4     |
0667   0530 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0667   0532 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0667   0533 1C          >            INC     E               ;                           ' 4     |
0667   0534 2C          >            INC     L               ; next                      ' 4     |
0668   0535                         readAndMix                  ;                       ' 40    |
0668   0535 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0668   0536 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0668   0537 E2 3D 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0668   053A 78          >            LD      A, B            ; fix overflow              ' 4     |
0668   053B CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0668   053D 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0668   053E 1C          >            INC     E               ;                           ' 4     |
0668   053F 2C          >            INC     L               ; next                      ' 4     |
0669   0540                         readAndMix                  ;                       ' 40    |
0669   0540 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0669   0541 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0669   0542 E2 48 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0669   0545 78          >            LD      A, B            ; fix overflow              ' 4     |
0669   0546 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0669   0548 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0669   0549 1C          >            INC     E               ;                           ' 4     |
0669   054A 2C          >            INC     L               ; next                      ' 4     |
0670   054B                         readAndMix                  ;                       ' 40    | 254+4
0670   054B 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0670   054C 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0670   054D E2 53 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0670   0550 78          >            LD      A, B            ; fix overflow              ' 4     |
0670   0551 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0670   0553 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0670   0554 1C          >            INC     E               ;                           ' 4     |
0670   0555 2C          >            INC     L               ; next                      ' 4     |
0671   0556                         readAndMix                  ;                       ' 40    |
0671   0556 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0671   0557 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0671   0558 E2 5E 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0671   055B 78          >            LD      A, B            ; fix overflow              ' 4     |
0671   055C CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0671   055E 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0671   055F 1C          >            INC     E               ;                           ' 4     |
0671   0560 2C          >            INC     L               ; next                      ' 4     |
0672   0561             
0673   0561                         sampleOutput                ; +4 --> late           ' 36    |
0673   0561 D9          >            EXX                     ;                           ' 4     | 4
0673   0562 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0673   0563 03          >            INC     BC              ; increment read address    ' 6     |
0673   0564 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0673   0566 12          >            LD      (DE), A         ; play sample               ' 7     |
0673   0567 D9          >            EXX                     ;                           ' 4     | (36)
0674   0568                         readAndMix                  ;                       ' 40    |
0674   0568 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0674   0569 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0674   056A E2 70 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0674   056D 78          >            LD      A, B            ; fix overflow              ' 4     |
0674   056E CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0674   0570 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0674   0571 1C          >            INC     E               ;                           ' 4     |
0674   0572 2C          >            INC     L               ; next                      ' 4     |
0675   0573                         readAndMix                  ;                       ' 40    |
0675   0573 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0675   0574 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0675   0575 E2 7B 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0675   0578 78          >            LD      A, B            ; fix overflow              ' 4     |
0675   0579 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0675   057B 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0675   057C 1C          >            INC     E               ;                           ' 4     |
0675   057D 2C          >            INC     L               ; next                      ' 4     |
0676   057E                         readAndMix                  ;                       ' 40    |
0676   057E 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0676   057F 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0676   0580 E2 86 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0676   0583 78          >            LD      A, B            ; fix overflow              ' 4     |
0676   0584 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0676   0586 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0676   0587 1C          >            INC     E               ;                           ' 4     |
0676   0588 2C          >            INC     L               ; next                      ' 4     |
0677   0589                         readAndMix                  ;                       ' 40    | 254
0677   0589 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0677   058A 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0677   058B E2 91 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0677   058E 78          >            LD      A, B            ; fix overflow              ' 4     |
0677   058F CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0677   0591 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0677   0592 1C          >            INC     E               ;                           ' 4     |
0677   0593 2C          >            INC     L               ; next                      ' 4     |
0678   0594                         readAndMix                  ;                       ' 40    |
0678   0594 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0678   0595 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0678   0596 E2 9C 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0678   0599 78          >            LD      A, B            ; fix overflow              ' 4     |
0678   059A CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0678   059C 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0678   059D 1C          >            INC     E               ;                           ' 4     |
0678   059E 2C          >            INC     L               ; next                      ' 4     |
0679   059F 0D                      DEC     C                   ;                       ' 4     |
0680   05A0 C2 DA 04                JP      NZ, .loop_ch2       ;                       ' 10    |
0681   05A3             
0682   05A3             ; $7B
0683   05A3                         sampleOutput                ;                       ' 36    |
0683   05A3 D9          >            EXX                     ;                           ' 4     | 4
0683   05A4 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0683   05A5 03          >            INC     BC              ; increment read address    ' 6     |
0683   05A6 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0683   05A8 12          >            LD      (DE), A         ; play sample               ' 7     |
0683   05A9 D9          >            EXX                     ;                           ' 4     | (36)
0684   05AA                         updateChannelData 2         ; update channel data   ' 178   | 254
0684   05AA 2A 26 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
0684   05AD 23          >            INC     HL                      ;                       ' 6     | (38)
0684   05AE 22 26 01    >            LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
0684   05B1 2A 28 01    >            LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
0684   05B4 2B          >            DEC     HL                      ;                       ' 6     | 22 (60)
0684   05B5 7C          >            LD      A, H                    ;                       ' 4     |
0684   05B6 B5          >            OR      L                       ;                       ' 4     | 18 (78)
0684   05B7 CA C4 05    >            JP      Z, .done                ; sample done ?         ' 10    |
0684   05BA 3E 04       >            LD      A, w            ; 7-2
0684   05BC 3D          >            DEC     A               ; 4
0684   05BD 20 FD       >            JR      NZ, .loop       ; 12
0684   05BF 00          >            NOP
0684   05C0 00          >            NOP
0684   05C1 C3 D6 05    >            JP      .end                    ;                       ' 10    | 84 (162)
0684   05C4 21 02 01    >            LD      HL, STATUS              ; HL = STATUS           ' 10    |
0684   05C7 CB 96       >            RES     ch, (HL)                ; clear play status     ' 15    | 25 (103)
0684   05C9 AF          >            XOR     A                       ;                       ' 4     |
0684   05CA 32 24 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio            ' 13    | 17 (120)
0684   05CD 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr    ' 16    |
0684   05D0 22 26 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr      ' 16    | 42 (162)
0684   05D3 21 01 00    >            LD      HL, $0001               ; HL = null PCM len     ' 10    |
0684   05D6 22 28 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    | (178)
0685   05D9                         wait40                      ; sync                  ' 40    |
0685   05D9 ED 4F       >            LD      R, A
0685   05DB ED 4F       >            LD      R, A
0685   05DD ED 4F       >            LD      R, A
0685   05DF ED 4F       >            LD      R, A
0685   05E1 00          >            NOP
0686   05E2             
0687   05E2             ; PCM channel 3
0688   05E2             ; -------------
0689   05E2             
0690   05E2             ; $7C
0691   05E2                         sampleOutput                ;                       ' 36    |
0691   05E2 D9          >            EXX                     ;                           ' 4     | 4
0691   05E3 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0691   05E4 03          >            INC     BC              ; increment read address    ' 6     |
0691   05E5 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0691   05E7 12          >            LD      (DE), A         ; play sample               ' 7     |
0691   05E8 D9          >            EXX                     ;                           ' 4     | (36)
0692   05E9                         prepareChannel 3            ;                       ' 176   | 254
0692   05E9 2A 2E 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
0692   05EC 7D          >            LD      A, L                    ; A = bit 8-15          ' 4     |
0692   05ED 17          >            RLA                             ; C flag = bit 15       ' 4     |
0692   05EE 7C          >            LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
0692   05EF 17          >            RLA                             ; A = bit 15-22         ' 4     |
0692   05F0 11 00 60    >            LD  DE, BANKREG         ; DE = BANKREG              ' 10
0692   05F3 12          >            LD  (DE), A             ; #1 (bit 15)               ' 7
0692   05F4 1F          >            RRA                     ;                           ' 4
0692   05F5 12          >            LD  (DE), A             ; #2 (bit 16)               ' 7
0692   05F6 1F          >            RRA                     ;                           ' 4
0692   05F7 12          >            LD  (DE), A             ; #3 (bit 17)               ' 7
0692   05F8 1F          >            RRA                     ;                           ' 4
0692   05F9 12          >            LD  (DE), A             ; #4 (bit 18)               ' 7
0692   05FA 1F          >            RRA                     ;                           ' 4
0692   05FB 12          >            LD  (DE), A             ; #5 (bit 19)               ' 7
0692   05FC 1F          >            RRA                     ;                           ' 4
0692   05FD 12          >            LD  (DE), A             ; #6 (bit 20)               ' 7
0692   05FE 1F          >            RRA                     ;                           ' 4
0692   05FF 12          >            LD  (DE), A             ; #7 (bit 21)               ' 7
0692   0600 1F          >            RRA                     ;                           ' 4
0692   0601 12          >            LD  (DE), A             ; #8 (bit 22)               ' 7
0692   0602 1F          >            RRA                     ;                           ' 4
0692   0603 12          >            LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
0692   0604 65          >            LD      H, L                    ;                       ' 4     |
0692   0605 CB FC       >            SET     7, H                    ; HL |= 0x8000          ' 8     | 19 (156)
0692   0607 2E 00       >            LD      L, 0                    ; HL = sample addr bank ' 7     |
0692   0609 ED 5B 38 01 >            LD      DE, (WRITEBUF)          ; DE = write buffer     ' 20    | (176)
0693   060D 01 12 80                LD      BC, $8012           ; prepare loop counter  ' 10    |
0694   0610                         wait32                      ; sync                  ' 32    |
0694   0610 1A          >            LD      A, (DE)
0694   0611 00          >            NOP
0694   0612 ED 4F       >            LD      R, A
0694   0614 18 00       >            JR      .loop
0695   0616             
0696   0616             ; $7D-$B2
0697   0616             .loop_ch3
0698   0616                         sampleOutput                ;                       ' 36    |
0698   0616 D9          >            EXX                     ;                           ' 4     | 4
0698   0617 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0698   0618 03          >            INC     BC              ; increment read address    ' 6     |
0698   0619 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0698   061B 12          >            LD      (DE), A         ; play sample               ' 7     |
0698   061C D9          >            EXX                     ;                           ' 4     | (36)
0699   061D                         readMixAndUnsign            ; mix/unsign 14 samples ' 44    |
0699   061D 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0699   061E 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0699   061F E2 25 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0699   0622 78          >            LD      A, B            ; fix overflow              ' 4     |
0699   0623 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0699   0625 80          >            ADD     B               ; unsign                    ' 4     |
0699   0626 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0699   0627 1C          >            INC     E               ;                           ' 4     |
0699   0628 2C          >            INC     L               ; next                      ' 4     |
0700   0629                         readMixAndUnsign            ;                       ' 44    |
0700   0629 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0700   062A 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0700   062B E2 31 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0700   062E 78          >            LD      A, B            ; fix overflow              ' 4     |
0700   062F CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0700   0631 80          >            ADD     B               ; unsign                    ' 4     |
0700   0632 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0700   0633 1C          >            INC     E               ;                           ' 4     |
0700   0634 2C          >            INC     L               ; next                      ' 4     |
0701   0635                         readMixAndUnsign            ;                       ' 44    | 254+2
0701   0635 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0701   0636 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0701   0637 E2 3D 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0701   063A 78          >            LD      A, B            ; fix overflow              ' 4     |
0701   063B CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0701   063D 80          >            ADD     B               ; unsign                    ' 4     |
0701   063E 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0701   063F 1C          >            INC     E               ;                           ' 4     |
0701   0640 2C          >            INC     L               ; next                      ' 4     |
0702   0641                         readMixAndUnsign            ;                       ' 44    |
0702   0641 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0702   0642 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0702   0643 E2 49 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0702   0646 78          >            LD      A, B            ; fix overflow              ' 4     |
0702   0647 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0702   0649 80          >            ADD     B               ; unsign                    ' 4     |
0702   064A 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0702   064B 1C          >            INC     E               ;                           ' 4     |
0702   064C 2C          >            INC     L               ; next                      ' 4     |
0703   064D                         readMixAndUnsign            ;                       ' 44    |
0703   064D 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0703   064E 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0703   064F E2 55 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0703   0652 78          >            LD      A, B            ; fix overflow              ' 4     |
0703   0653 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0703   0655 80          >            ADD     B               ; unsign                    ' 4     |
0703   0656 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0703   0657 1C          >            INC     E               ;                           ' 4     |
0703   0658 2C          >            INC     L               ; next                      ' 4     |
0704   0659             
0705   0659                         sampleOutput                ; +2 --> a bit late     ' 36    |
0705   0659 D9          >            EXX                     ;                           ' 4     | 4
0705   065A 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0705   065B 03          >            INC     BC              ; increment read address    ' 6     |
0705   065C CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0705   065E 12          >            LD      (DE), A         ; play sample               ' 7     |
0705   065F D9          >            EXX                     ;                           ' 4     | (36)
0706   0660                         readMixAndUnsign            ;                       ' 44    |
0706   0660 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0706   0661 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0706   0662 E2 68 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0706   0665 78          >            LD      A, B            ; fix overflow              ' 4     |
0706   0666 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0706   0668 80          >            ADD     B               ; unsign                    ' 4     |
0706   0669 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0706   066A 1C          >            INC     E               ;                           ' 4     |
0706   066B 2C          >            INC     L               ; next                      ' 4     |
0707   066C                         readMixAndUnsign            ;                       ' 44    |
0707   066C 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0707   066D 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0707   066E E2 74 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0707   0671 78          >            LD      A, B            ; fix overflow              ' 4     |
0707   0672 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0707   0674 80          >            ADD     B               ; unsign                    ' 4     |
0707   0675 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0707   0676 1C          >            INC     E               ;                           ' 4     |
0707   0677 2C          >            INC     L               ; next                      ' 4     |
0708   0678                         readMixAndUnsign            ;                       ' 44    | 254+2
0708   0678 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0708   0679 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0708   067A E2 80 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0708   067D 78          >            LD      A, B            ; fix overflow              ' 4     |
0708   067E CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0708   0680 80          >            ADD     B               ; unsign                    ' 4     |
0708   0681 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0708   0682 1C          >            INC     E               ;                           ' 4     |
0708   0683 2C          >            INC     L               ; next                      ' 4     |
0709   0684                         readMixAndUnsign            ;                       ' 44    |
0709   0684 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0709   0685 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0709   0686 E2 8C 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0709   0689 78          >            LD      A, B            ; fix overflow              ' 4     |
0709   068A CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0709   068C 80          >            ADD     B               ; unsign                    ' 4     |
0709   068D 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0709   068E 1C          >            INC     E               ;                           ' 4     |
0709   068F 2C          >            INC     L               ; next                      ' 4     |
0710   0690                         readMixAndUnsign            ;                       ' 44    |
0710   0690 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0710   0691 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0710   0692 E2 98 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0710   0695 78          >            LD      A, B            ; fix overflow              ' 4     |
0710   0696 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0710   0698 80          >            ADD     B               ; unsign                    ' 4     |
0710   0699 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0710   069A 1C          >            INC     E               ;                           ' 4     |
0710   069B 2C          >            INC     L               ; next                      ' 4     |
0711   069C             
0712   069C                         sampleOutput                ; +4 --> a bit late     ' 36    |
0712   069C D9          >            EXX                     ;                           ' 4     | 4
0712   069D 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0712   069E 03          >            INC     BC              ; increment read address    ' 6     |
0712   069F CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0712   06A1 12          >            LD      (DE), A         ; play sample               ' 7     |
0712   06A2 D9          >            EXX                     ;                           ' 4     | (36)
0713   06A3                         readMixAndUnsign            ;                       ' 44    |
0713   06A3 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0713   06A4 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0713   06A5 E2 AB 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0713   06A8 78          >            LD      A, B            ; fix overflow              ' 4     |
0713   06A9 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0713   06AB 80          >            ADD     B               ; unsign                    ' 4     |
0713   06AC 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0713   06AD 1C          >            INC     E               ;                           ' 4     |
0713   06AE 2C          >            INC     L               ; next                      ' 4     |
0714   06AF                         readMixAndUnsign            ;                       ' 44    | 254-4
0714   06AF 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0714   06B0 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0714   06B1 E2 B7 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0714   06B4 78          >            LD      A, B            ; fix overflow              ' 4     |
0714   06B5 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0714   06B7 80          >            ADD     B               ; unsign                    ' 4     |
0714   06B8 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0714   06B9 1C          >            INC     E               ;                           ' 4     |
0714   06BA 2C          >            INC     L               ; next                      ' 4     |
0715   06BB                         readMixAndUnsign            ;                       ' 44    |
0715   06BB 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0715   06BC 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0715   06BD E2 C3 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0715   06C0 78          >            LD      A, B            ; fix overflow              ' 4     |
0715   06C1 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0715   06C3 80          >            ADD     B               ; unsign                    ' 4     |
0715   06C4 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0715   06C5 1C          >            INC     E               ;                           ' 4     |
0715   06C6 2C          >            INC     L               ; next                      ' 4     |
0716   06C7                         readMixAndUnsign            ;                       ' 44    |
0716   06C7 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0716   06C8 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0716   06C9 E2 CF 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0716   06CC 78          >            LD      A, B            ; fix overflow              ' 4     |
0716   06CD CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0716   06CF 80          >            ADD     B               ; unsign                    ' 4     |
0716   06D0 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0716   06D1 1C          >            INC     E               ;                           ' 4     |
0716   06D2 2C          >            INC     L               ; next                      ' 4     |
0717   06D3                         wait24                      ;                       ' 24    |
0717   06D3 18 00       >            JR      .loop
0717   06D5 18 00       >            JR      .loop
0718   06D7 0D                      DEC     C                   ;                       ' 4     |
0719   06D8 C2 16 06                JP      NZ, .loop_ch3       ;                       ' 10    |
0720   06DB             
0721   06DB             ; $B3
0722   06DB                         sampleOutput                ;                       ' 36    |
0722   06DB D9          >            EXX                     ;                           ' 4     | 4
0722   06DC 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0722   06DD 03          >            INC     BC              ; increment read address    ' 6     |
0722   06DE CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0722   06E0 12          >            LD      (DE), A         ; play sample               ' 7     |
0722   06E1 D9          >            EXX                     ;                           ' 4     | (36)
0723   06E2                         readMixAndUnsign            ;                       ' 44    |
0723   06E2 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0723   06E3 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0723   06E4 E2 EA 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0723   06E7 78          >            LD      A, B            ; fix overflow              ' 4     |
0723   06E8 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0723   06EA 80          >            ADD     B               ; unsign                    ' 4     |
0723   06EB 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0723   06EC 1C          >            INC     E               ;                           ' 4     |
0723   06ED 2C          >            INC     L               ; next                      ' 4     |
0724   06EE                         readMixAndUnsign            ;                       ' 44    | 254
0724   06EE 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0724   06EF 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0724   06F0 E2 F6 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0724   06F3 78          >            LD      A, B            ; fix overflow              ' 4     |
0724   06F4 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0724   06F6 80          >            ADD     B               ; unsign                    ' 4     |
0724   06F7 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0724   06F8 1C          >            INC     E               ;                           ' 4     |
0724   06F9 2C          >            INC     L               ; next                      ' 4     |
0725   06FA                         readMixAndUnsign            ;                       ' 44    |
0725   06FA 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0725   06FB 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0725   06FC E2 02 07    >            JP      PO, .ok         ; check overflow            ' 10    |
0725   06FF 78          >            LD      A, B            ; fix overflow              ' 4     |
0725   0700 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0725   0702 80          >            ADD     B               ; unsign                    ' 4     |
0725   0703 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0725   0704 1C          >            INC     E               ;                           ' 4     |
0725   0705 2C          >            INC     L               ; next                      ' 4     |
0726   0706                         readMixAndUnsign            ;                       ' 44    |
0726   0706 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0726   0707 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0726   0708 E2 0E 07    >            JP      PO, .ok         ; check overflow            ' 10    |
0726   070B 78          >            LD      A, B            ; fix overflow              ' 4     |
0726   070C CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0726   070E 80          >            ADD     B               ; unsign                    ' 4     |
0726   070F 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0726   0710 1C          >            INC     E               ;                           ' 4     |
0726   0711 2C          >            INC     L               ; next                      ' 4     |
0727   0712                         wait42                      ;                       ' 42    |
0727   0712 3E 02       >            LD      A, w            ; 7-2
0727   0714 3D          >            DEC     A               ; 4
0727   0715 20 FD       >            JR      NZ, .loop       ; 12
0727   0717 00          >            NOP
0727   0718 00          >            NOP
0728   0719             
0729   0719             ; $B4
0730   0719                         sampleOutput                ;                       ' 36    |
0730   0719 D9          >            EXX                     ;                           ' 4     | 4
0730   071A 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0730   071B 03          >            INC     BC              ; increment read address    ' 6     |
0730   071C CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0730   071E 12          >            LD      (DE), A         ; play sample               ' 7     |
0730   071F D9          >            EXX                     ;                           ' 4     | (36)
0731   0720                         updateChannelData 3         ; update channel data   ' 178   | 254
0731   0720 2A 2E 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
0731   0723 23          >            INC     HL                      ;                       ' 6     | (38)
0731   0724 22 2E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
0731   0727 2A 30 01    >            LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
0731   072A 2B          >            DEC     HL                      ;                       ' 6     | 22 (60)
0731   072B 7C          >            LD      A, H                    ;                       ' 4     |
0731   072C B5          >            OR      L                       ;                       ' 4     | 18 (78)
0731   072D CA 3A 07    >            JP      Z, .done                ; sample done ?         ' 10    |
0731   0730 3E 04       >            LD      A, w            ; 7-2
0731   0732 3D          >            DEC     A               ; 4
0731   0733 20 FD       >            JR      NZ, .loop       ; 12
0731   0735 00          >            NOP
0731   0736 00          >            NOP
0731   0737 C3 4C 07    >            JP      .end                    ;                       ' 10    | 84 (162)
0731   073A 21 02 01    >            LD      HL, STATUS              ; HL = STATUS           ' 10    |
0731   073D CB 9E       >            RES     ch, (HL)                ; clear play status     ' 15    | 25 (103)
0731   073F AF          >            XOR     A                       ;                       ' 4     |
0731   0740 32 2C 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio            ' 13    | 17 (120)
0731   0743 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr    ' 16    |
0731   0746 22 2E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr      ' 16    | 42 (162)
0731   0749 21 01 00    >            LD      HL, $0001               ; HL = null PCM len     ' 10    |
0731   074C 22 30 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    | (178)
0732   074F                         wait40                      ; sync                  ' 40    |
0732   074F ED 4F       >            LD      R, A
0732   0751 ED 4F       >            LD      R, A
0732   0753 ED 4F       >            LD      R, A
0732   0755 ED 4F       >            LD      R, A
0732   0757 00          >            NOP
0733   0758             
0734   0758             
0735   0758             ; next write buffer
0736   0758             ; -----------------
0737   0758             
0738   0758             ; $B5
0739   0758             next_write_buf
0740   0758                         sampleOutput                ;                       ' 36    | 36
0740   0758 D9          >            EXX                     ;                           ' 4     | 4
0740   0759 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0740   075A 03          >            INC     BC              ; increment read address    ' 6     |
0740   075B CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0740   075D 12          >            LD      (DE), A         ; play sample               ' 7     |
0740   075E D9          >            EXX                     ;                           ' 4     | (36)
0741   075F             
0742   075F 14                      INC     D                   ; inc write addr        ' 4     |
0743   0760 CB 92                   RES     2, D                ; write addr &= 0x03FF  ' 8     | 32 (68)
0744   0762 ED 53 38 01             LD      (WRITEBUF), DE      ; save new write addr   ' 20    |
0745   0766             
0746   0766             set_DAC_enabled
0747   0766 3A 02 01                LD      A, (STATUS)         ; A = (STATUS)          ' 13    |
0748   0769 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
0749   076C 36 2B                   LD      (HL), $2B           ; register = DAC enable ' 10    | 50 (118)
0750   076E E6 0F                   AND     $0F                 ; PCM is playing ?      ' 7     |
0751   0770 C2 83 07                JP      NZ, .still_pcm      ;                       ' 10    |
0752   0773             
0753   0773 3A 61 01                LD      A, (YM_2B_CNT)      ;                       ' 13    |
0754   0776 B7                      OR      A                   ;                       ' 4     | 27 (145)
0755   0777 CA 91 07                JP      Z, .no_pcm          ; DAC enabled expired ? ' 10    |
0756   077A             
0757   077A 3D                      DEC     A                   ; decrement expiration  ' 4     |
0758   077B 32 61 01                LD      (YM_2B_CNT), A      ;                       ' 13    |
0759   077E 3E 80                   LD      A, $80              ; DAC enabled           ' 7     | 34 (179)
0760   0780 C3 98 07                JP      .set_dac            ; assume still PCM      ' 10    |
0761   0783             
0762   0783             .still_pcm                              ;                       ' 118
0763   0783 3E 04                   LD      A, 4                ; set DAC ON expiration ' 7     |
0764   0785 32 61 01                LD      (YM_2B_CNT), A      ; 4 frames to expire    ' 13    | 27 (145)
0765   0788             
0766   0788                         wait17                      ; sync                  ' 17    |
0766   0788 C3 8B 07    >            JP      .loop
0766   078B 1A          >            LD      A, (DE)
0767   078C 3E 80                   LD      A, $80              ; DAC enabled           ' 7     | 34 (179)
0768   078E C3 98 07                JP      .set_dac            ; assume still PCM      ' 10    |
0769   0791             
0770   0791             .no_pcm                                 ;                       ' 145
0771   0791                         wait21                      ; sync                  ' 21    |
0771   0791 18 00       >            JR      .loop
0771   0793 ED 4F       >            LD      R, A
0772   0795 3A 60 01                LD      A, (YM_2B_SAV)      ; use current DAC on    ' 13    | 34  (179)
0773   0798             
0774   0798             .set_dac                                ;                       ' 179
0775   0798 2C                      INC     L                   ; HL point on YM port1  ' 4     |
0776   0799 77                      LD      (HL), A             ; set DAC enabled       ' 7     |
0777   079A                         wait42                      ; sync                  ' 42    | 75 (254)
0777   079A 3E 02       >            LD      A, w            ; 7-2
0777   079C 3D          >            DEC     A               ; 4
0777   079D 20 FD       >            JR      NZ, .loop       ; 12
0777   079F 00          >            NOP
0777   07A0 00          >            NOP
0778   07A1                         waitYMReady                 ; wait YM to be ready   ' 22    |
0778   07A1 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
0778   07A3 C2 A1 07    >            JP      NZ, .wait       ; wait while busy           ' 10    |
0779   07A6             
0780   07A6             ; $B6
0781   07A6                         sampleOutputSafe            ; sample output         ' 46    | 46
0781   07A6 D9          >            EXX                     ;                           ' 4     | 4
0781   07A7 36 2A       >            LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
0781   07A9 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0781   07AA 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
0781   07AB CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
0781   07AD 12          >            LD      (DE), A         ; play sample               ' 7     |
0781   07AE D9          >            EXX                     ;                           ' 4     | (46)
0782   07AF             
0783   07AF                         wait160                     ; sync                  ' 160   | 206
0783   07AF 3E 09       >            LD      A, w            ; 7-2
0783   07B1 3D          >            DEC     A               ; 4
0783   07B2 20 FD       >            JR      NZ, .loop       ; 12
0783   07B4 1A          >            LD      A, (DE)
0783   07B5 1A          >            LD      A, (DE)
0784   07B6             
0785   07B6 FD 7D                   LD      A, IYL              ;                       ' 8     |
0786   07B8 B7                      OR      A                   ; vint happened ?       ' 4     | 22 (228)
0787   07B9 CA C2 07                JP      Z, .no_vint         ; no --> sync rd and wr ' 10    |
0788   07BC             
0789   07BC             .vint_to_do
0790   07BC                         wait16                      ; sync                  ' 16    | 26 (254)
0790   07BC 18 00       >            JR      .loop
0790   07BE 00          >            NOP
0791   07BF C3 C9 07                JP      prepare_xgm         ; go prepare XGM data   ' 10    |
0792   07C2             
0793   07C2             .no_vint                                ;                       ' 228
0794   07C2                         compareReadWrite            ; write buf != read buf ' 16    | 26 (254)
0794   07C2 D9          >            EXX                     ;                           ' 4     |
0794   07C3 78          >            LD      A, B            ; A = read buffer high      ' 4     |
0794   07C4 D9          >            EXX                     ;                           ' 4     | 16
0794   07C5 BA          >            CP      D               ; compare write buffer high ' 4     |
0795   07C6 C2 BF 02                JP      NZ, main_loop       ; continu to fill write ' 10    |
0796   07C9             
0797   07C9             
0798   07C9             ; prepare XGM buffer
0799   07C9             ; ------------------
0800   07C9             
0801   07C9             ; $B7
0802   07C9             prepare_xgm
0803   07C9                         sampleOutput                ;                       ' 36    | 36
0803   07C9 D9          >            EXX                     ;                           ' 4     | 4
0803   07CA 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0803   07CB 03          >            INC     BC              ; increment read address    ' 6     |
0803   07CC CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0803   07CE 12          >            LD      (DE), A         ; play sample               ' 7     |
0803   07CF D9          >            EXX                     ;                           ' 4     | (36)
0804   07D0             
0805   07D0 11 00 17                LD      DE, XGM_BUFFER      ; DE point to XGM buf   ' 10    |
0806   07D3 3A 02 01                LD      A, (STATUS)         ; A = STATUS            ' 13    |
0807   07D6 CB 77                   BIT     XGM_PLAY_SFT, A     ; is XGM playing ?      ' 8     | 41 (77)
0808   07D8 C2 E4 07                JP      NZ, has_xgm         ; go to prepare buf     ' 10    |
0809   07DB             
0810   07DB                         wait146                     ; sync                  ' 146   |
0810   07DB 3E 09       >            LD      A, w            ; 7-2
0810   07DD 3D          >            DEC     A               ; 4
0810   07DE 20 FD       >            JR      NZ, .loop       ; 12
0811   07E0 AF                      XOR     A                   ; A = 0                 ' 4     | 160 (237)
0812   07E1 C3 ED 09                JP      end_prep_xgm        ; preparation done      ' 10    |
0813   07E4             
0814   07E4             has_xgm
0815   07E4 2A 34 01                LD      HL, (XGM_ADDR)      ; XGM addr (b0-b15)     ' 16    |
0816   07E7 7C                      LD      A, H                ; A = XGM addr (b8-b15) ' 4     |
0817   07E8 17                      RLA                         ; CF = XGM addr b15     ' 4     | 146 (223)
0818   07E9 3A 36 01                LD      A, (XGM_ADDR+2)     ; A = sample addr (H)   ' 13    |
0819   07EC 17                      RLA                         ; sample addr (b22-b15) ' 4     |
0820   07ED                         setBank_BC                  ; setBank               ' 105   |
0820   07ED 01 00 60    >            LD  BC, BANKREG         ; BC = BANKREG              ' 10
0820   07F0 02          >            LD  (BC), A             ; #1 (bit 15)               ' 7
0820   07F1 1F          >            RRA                     ;                           ' 4
0820   07F2 02          >            LD  (BC), A             ; #2 (bit 16)               ' 7
0820   07F3 1F          >            RRA                     ;                           ' 4
0820   07F4 02          >            LD  (BC), A             ; #3 (bit 17)               ' 7
0820   07F5 1F          >            RRA                     ;                           ' 4
0820   07F6 02          >            LD  (BC), A             ; #4 (bit 18)               ' 7
0820   07F7 1F          >            RRA                     ;                           ' 4
0820   07F8 02          >            LD  (BC), A             ; #5 (bit 19)               ' 7
0820   07F9 1F          >            RRA                     ;                           ' 4
0820   07FA 02          >            LD  (BC), A             ; #6 (bit 20)               ' 7
0820   07FB 1F          >            RRA                     ;                           ' 4
0820   07FC 02          >            LD  (BC), A             ; #7 (bit 21)               ' 7
0820   07FD 1F          >            RRA                     ;                           ' 4
0820   07FE 02          >            LD  (BC), A             ; #8 (bit 22)               ' 7
0820   07FF 1F          >            RRA                     ;                           ' 4
0820   0800 02          >            LD  (BC), A             ; #9 (bit 23 = 0)           ' 7
0821   0801             
0822   0801 7C                      LD      A, H                ; save H                ' 4     |
0823   0802 CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     |
0824   0804 06 00                   LD      B, $0               ; B = 0                 ' 7     | 30 (254-1)
0825   0806 4E                      LD      C, (HL)             ; BC = bytes to process ' 7     |
0826   0807 67                      LD      H, A                ; restore H             ' 4     |
0827   0808             
0828   0808             ; $B7+X
0829   0808                         sampleOutput                ;                       ' 36    | (36-1)
0829   0808 D9          >            EXX                     ;                           ' 4     | 4
0829   0809 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0829   080A 03          >            INC     BC              ; increment read address    ' 6     |
0829   080B CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0829   080D 12          >            LD      (DE), A         ; play sample               ' 7     |
0829   080E D9          >            EXX                     ;                           ' 4     | (36)
0830   080F             
0831   080F 7D                      LD      A, L                ; A = addr low          ' 4     |
0832   0810 81                      ADD     C                   ; compute new addr (L)  ' 4     |
0833   0811 32 34 01                LD      (XGM_ADDR+0), A     ; store new addr (L)    ' 13    | 28 (63)
0834   0814 38 1A                   JR      C, .split           ; carry --> separate    ' 7     |
0835   0816             
0836   0816             .no_split
0837   0816                         wait104                     ; sync                  ' 104   | (167)
0837   0816 3E 05       >            LD      A, w            ; 7-2
0837   0818 3D          >            DEC     A               ; 4
0837   0819 20 FD       >            JR      NZ, .loop       ; 12
0837   081B ED 4F       >            LD      R, A
0837   081D ED 4F       >            LD      R, A
0837   081F 00          >            NOP
0838   0820             
0839   0820 CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     |
0840   0822 23                      INC     HL                  ; HL = start frame data ' 6     |
0841   0823 AF                      XOR     A                   ; no second part        ' 4     |
0842   0824 DD 6F                   LD      IXL, A              ; IXL = sec part size   ' 8     | 44 (211)
0843   0826 00                      NOP                         ;                       ' 4     |
0844   0827 0D                      DEC     C                   ; first part size = 0 ? ' 4     |
0845   0828 CA 0D 09                JP      Z, .second_part     ; go to second part     ' 10    |
0846   082B             
0847   082B                         wait12                      ; sync                  ' 12    | 22 (233)
0847   082B 18 00       >            JR      .loop
0848   082D C3 6C 08                JP      .first_part_pre     ; start filling         ' 10    |
0849   0830             
0850   0830             .split
0851   0830 DD 6F                   LD      IXL, A              ; IXL = sec part size   ' 8     |
0852   0832 91                      SUB     C                   ;                       ' 4     |
0853   0833 ED 44                   NEG                         ;                       ' 8     | 34 (97)
0854   0835 3D                      DEC     A                   ; A = (C - IXL) - 1     ' 4     |
0855   0836 C2 54 08                JP      NZ, .first_part_ok  ; not zero --> do it    ' 10    |
0856   0839             
0857   0839 7C                      LD      A, H                ; A = addr med (M)      ' 4     |
0858   083A C6 01                   ADD     $1                  ; inc with CF set       ' 7     |
0859   083C 32 35 01                LD      (XGM_ADDR+1), A     ; store new addr (M)    ' 13    |
0860   083F 3A 36 01                LD      A, (XGM_ADDR+2)     ; load sample addr (H)  ' 13    |
0861   0842 88                      ADC     B                   ; inc                   ' 4     | 68 (164)
0862   0843 32 36 01                LD      (XGM_ADDR+2), A     ; store sample addr (H) ' 13    |
0863   0846 CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     |
0864   0848 23                      INC     HL                  ; HL = start frame data ' 6     |
0865   0849             
0866   0849                         wait36                      ; sync                  ' 36    |
0866   0849 ED 4F       >            LD      R, A
0866   084B ED 4F       >            LD      R, A
0866   084D ED 4F       >            LD      R, A
0866   084F ED 4F       >            LD      R, A
0867   0851 C3 0D 09                JP      .second_part        ; go second part        ' 10    | 65 (211)
0868   0854             
0869   0854             .first_part_ok
0870   0854 4F                      LD      C, A                ; C = first part size   ' 4     |
0871   0855 7C                      LD      A, H                ; A = addr med (M)      ' 4     |
0872   0856 C6 01                   ADD     $1                  ; inc with CF set       ' 7     |
0873   0858 32 35 01                LD      (XGM_ADDR+1), A     ; store new addr (M)    ' 13    |
0874   085B 3A 36 01                LD      A, (XGM_ADDR+2)     ; load sample addr (H)  ' 13    | 72 (169)
0875   085E 88                      ADC     B                   ; inc                   ' 4     |
0876   085F 32 36 01                LD      (XGM_ADDR+2), A     ; store sample addr (H) ' 13    |
0877   0862 CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     |
0878   0864 23                      INC     HL                  ; HL = start frame data ' 6     |
0879   0865             
0880   0865                         wait64                      ; sync                  ' 64    | (233)
0880   0865 3E 03       >            LD      A, w            ; 7-2
0880   0867 3D          >            DEC     A               ; 4
0880   0868 20 FD       >            JR      NZ, .loop       ; 12
0880   086A 1A          >            LD      A, (DE)
0880   086B 1A          >            LD      A, (DE)
0881   086C             
0882   086C             .first_part_pre                         ;                       ' 233
0883   086C 3E 0B                   LD      A, 11               ; A = block fill size   ' 7     |
0884   086E B9                      CP      C                   ; C < block size        ' 4     | 21 (254)
0885   086F D2 98 08                JP      NC, .first_part_end ; go to last bytes      ' 10    |
0886   0872             
0887   0872             .first_part
0888   0872             ; $B7+X
0889   0872                         sampleOutput                ;                       ' 36    | 36
0889   0872 D9          >            EXX                     ;                           ' 4     | 4
0889   0873 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0889   0874 03          >            INC     BC              ; increment read address    ' 6     |
0889   0875 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0889   0877 12          >            LD      (DE), A         ; play sample               ' 7     |
0889   0878 D9          >            EXX                     ;                           ' 4     | (36)
0890   0879             
0891   0879 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0892   087B ED A0                   LDI                         ; 11 bytes at once      ' 16+1  |
0893   087D ED A0                   LDI                         ;                       ' 16+1  |
0894   087F ED A0                   LDI                         ;                       ' 16+1  |
0895   0881 ED A0                   LDI                         ;                       ' 16+1  |
0896   0883 ED A0                   LDI                         ;                       ' 16+1  | 187 (223)
0897   0885 ED A0                   LDI                         ;                       ' 16+1  |
0898   0887 ED A0                   LDI                         ;                       ' 16+1  |
0899   0889 ED A0                   LDI                         ;                       ' 16+1  |
0900   088B ED A0                   LDI                         ;                       ' 16+1  |
0901   088D ED A0                   LDI                         ;                       ' 16+1  |
0902   088F             
0903   088F                         wait10                      ; sync                  ' 10    |
0903   088F C3 92 08    >            JP      .loop
0904   0892 3E 0B                   LD      A, 11               ; A = block fill size   ' 7     |
0905   0894 B9                      CP      C                   ; remaining > 11        ' 4     | 31 (254)
0906   0895 DA 72 08                JP      C, .first_part      ; continu block fill    ' 10    |
0907   0898             
0908   0898             .first_part_end
0909   0898             ; $B7+X
0910   0898                         sampleOutput                ;                       ' 36    | 36
0910   0898 D9          >            EXX                     ;                           ' 4     | 4
0910   0899 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0910   089A 03          >            INC     BC              ; increment read address    ' 6     |
0910   089B CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0910   089D 12          >            LD      (DE), A         ; play sample               ' 7     |
0910   089E D9          >            EXX                     ;                           ' 4     | (36)
0911   089F             
0912   089F ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0913   08A1 E2 EC 08                JP      PO, .fst_part_d0    ;                       ' 10    | 27 (63)
0914   08A4 ED A0                   LDI                         ;                       ' 16+1  |
0915   08A6 E2 F2 08                JP      PO, .fst_part_d1    ;                       ' 10    | 27 (90)
0916   08A9 ED A0                   LDI                         ;                       ' 16+1  |
0917   08AB E2 F8 08                JP      PO, .fst_part_d2    ;                       ' 10    | 27 (117)
0918   08AE ED A0                   LDI                         ;                       ' 16+1  |
0919   08B0 E2 FE 08                JP      PO, .fst_part_d3    ;                       ' 10    | 27 (144)
0920   08B3 ED A0                   LDI                         ;                       ' 16+1  |
0921   08B5 E2 04 09                JP      PO, .fst_part_d4    ;                       ' 10    | 27 (171)
0922   08B8 ED A0                   LDI                         ;                       ' 16+1  |
0923   08BA E2 0A 09                JP      PO, .fst_part_d5    ;                       ' 10    | 27 (198)
0924   08BD             
0925   08BD                         wait56                      ; sync                  ' 56    | (254)
0925   08BD 3E 02       >            LD      A, w            ; 7-2
0925   08BF 3D          >            DEC     A               ; 4
0925   08C0 20 FD       >            JR      NZ, .loop       ; 12
0925   08C2 ED 4F       >            LD      R, A
0925   08C4 ED 4F       >            LD      R, A
0925   08C6 00          >            NOP
0926   08C7             
0927   08C7             ; $B7+X
0928   08C7                         sampleOutput                ;                       ' 36    | 36
0928   08C7 D9          >            EXX                     ;                           ' 4     | 4
0928   08C8 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0928   08C9 03          >            INC     BC              ; increment read address    ' 6     |
0928   08CA CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0928   08CC 12          >            LD      (DE), A         ; play sample               ' 7     |
0928   08CD D9          >            EXX                     ;                           ' 4     | (36)
0929   08CE             
0930   08CE ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0931   08D0 E2 EC 08                JP      PO, .fst_part_d0    ;                       ' 10    | 27 (63)
0932   08D3 ED A0                   LDI                         ;                       ' 16+1  |
0933   08D5 E2 F2 08                JP      PO, .fst_part_d1    ;                       ' 10    | 27 (90)
0934   08D8 ED A0                   LDI                         ;                       ' 16+1  |
0935   08DA E2 F8 08                JP      PO, .fst_part_d2    ;                       ' 10    | 27 (117)
0936   08DD ED A0                   LDI                         ;                       ' 16+1  |
0937   08DF E2 FE 08                JP      PO, .fst_part_d3    ;                       ' 10    | 27 (144)
0938   08E2 ED A0                   LDI                         ;                       ' 16+1  |
0939   08E4 E2 04 09                JP      PO, .fst_part_d4    ;                       ' 10    | 27 (171)
0940   08E7 ED A0                   LDI                         ;                       ' 16+1  |
0941   08E9 C3 0A 09                JP      .fst_part_d5        ;                       ' 10    | 27 (198)
0942   08EC             
0943   08EC             .fst_part_d0
0944   08EC                         wait27                      ; sync                  ' 27    | (90)
0944   08EC ED 4F       >            LD      R, A
0944   08EE ED 4F       >            LD      R, A
0944   08F0 ED 4F       >            LD      R, A
0945   08F2             .fst_part_d1
0946   08F2                         wait27                      ; sync                  ' 27    | (117)
0946   08F2 ED 4F       >            LD      R, A
0946   08F4 ED 4F       >            LD      R, A
0946   08F6 ED 4F       >            LD      R, A
0947   08F8             .fst_part_d2
0948   08F8                         wait27                      ; sync                  ' 27    | (144)
0948   08F8 ED 4F       >            LD      R, A
0948   08FA ED 4F       >            LD      R, A
0948   08FC ED 4F       >            LD      R, A
0949   08FE             .fst_part_d3
0950   08FE                         wait27                      ; sync                  ' 27    | (171)
0950   08FE ED 4F       >            LD      R, A
0950   0900 ED 4F       >            LD      R, A
0950   0902 ED 4F       >            LD      R, A
0951   0904             .fst_part_d4
0952   0904                         wait27                      ; sync                  ' 27    | (198)
0952   0904 ED 4F       >            LD      R, A
0952   0906 ED 4F       >            LD      R, A
0952   0908 ED 4F       >            LD      R, A
0953   090A             .fst_part_d5
0954   090A                         wait13                      ; sync                  ' 13    | (211)
0954   090A ED 4F       >            LD      R, A
0954   090C 00          >            NOP
0955   090D             
0956   090D             .second_part                            ;                       ' 211
0957   090D 00                      NOP                         ; sync                  ' 4
0958   090E DD 7D                   LD      A, IXL              ; A = second part size  ' 8     |
0959   0910 B7                      OR      A                   ;                       ' 4     | 26 (237)
0960   0911 CA ED 09                JP      Z, end_prep_xgm     ; done                  ' 10    |
0961   0914             
0962   0914                         wait17                      ; sync                  ' 17    | 254
0962   0914 C3 17 09    >            JP      .loop
0962   0917 1A          >            LD      A, (DE)
0963   0918             
0964   0918             ; $B7+X
0965   0918                         sampleOutput                ;                       ' 36    | 36
0965   0918 D9          >            EXX                     ;                           ' 4     | 4
0965   0919 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0965   091A 03          >            INC     BC              ; increment read address    ' 6     |
0965   091B CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0965   091D 12          >            LD      (DE), A         ; play sample               ' 7     |
0965   091E D9          >            EXX                     ;                           ' 4     | (36)
0966   091F             
0967   091F 2A 34 01                LD      HL, (XGM_ADDR)      ; XGM addr (b0-b15)     ' 16    |
0968   0922 7C                      LD      A, H                ; A = XGM addr (b8-b15) ' 4     |
0969   0923 17                      RLA                         ; CF = XGM addr b15     ' 4     | 146 (182)
0970   0924 3A 36 01                LD      A, (XGM_ADDR+2)     ; A = sample addr (H)   ' 13    |
0971   0927 17                      RLA                         ; sample addr (b22-b15) ' 4     |
0972   0928                         setBank_BC                  ; setBank               ' 105   |
0972   0928 01 00 60    >            LD  BC, BANKREG         ; BC = BANKREG              ' 10
0972   092B 02          >            LD  (BC), A             ; #1 (bit 15)               ' 7
0972   092C 1F          >            RRA                     ;                           ' 4
0972   092D 02          >            LD  (BC), A             ; #2 (bit 16)               ' 7
0972   092E 1F          >            RRA                     ;                           ' 4
0972   092F 02          >            LD  (BC), A             ; #3 (bit 17)               ' 7
0972   0930 1F          >            RRA                     ;                           ' 4
0972   0931 02          >            LD  (BC), A             ; #4 (bit 18)               ' 7
0972   0932 1F          >            RRA                     ;                           ' 4
0972   0933 02          >            LD  (BC), A             ; #5 (bit 19)               ' 7
0972   0934 1F          >            RRA                     ;                           ' 4
0972   0935 02          >            LD  (BC), A             ; #6 (bit 20)               ' 7
0972   0936 1F          >            RRA                     ;                           ' 4
0972   0937 02          >            LD  (BC), A             ; #7 (bit 21)               ' 7
0972   0938 1F          >            RRA                     ;                           ' 4
0972   0939 02          >            LD  (BC), A             ; #8 (bit 22)               ' 7
0972   093A 1F          >            RRA                     ;                           ' 4
0972   093B 02          >            LD  (BC), A             ; #9 (bit 23 = 0)           ' 7
0973   093C             
0974   093C CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     | 15 (197)
0975   093E 2E 00                   LD      L, 0                ;                       ' 7     |
0976   0940             
0977   0940                         wait21                      ; sync                  ' 21    | (218)
0977   0940 18 00       >            JR      .loop
0977   0942 ED 4F       >            LD      R, A
0978   0944             
0979   0944 06 00                   LD      B, 0                ; B = 0                 ' 7     |
0980   0946 DD 4D                   LD      C, IXL              ; BC = second part size ' 8     |
0981   0948 3E 0B                   LD      A, 11               ; A = block fill size   ' 7     | 36 (254)
0982   094A B9                      CP      C                   ; C < block size        ' 4     |
0983   094B D2 74 09                JP      NC, .sec_part_end   ; go to last bytes      ' 10    |
0984   094E             
0985   094E             ; $B7+X
0986   094E             .sec_part_loop
0987   094E                         sampleOutput                ;                       ' 36    | 36
0987   094E D9          >            EXX                     ;                           ' 4     | 4
0987   094F 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0987   0950 03          >            INC     BC              ; increment read address    ' 6     |
0987   0951 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0987   0953 12          >            LD      (DE), A         ; play sample               ' 7     |
0987   0954 D9          >            EXX                     ;                           ' 4     | (36)
0988   0955             
0989   0955 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0990   0957 ED A0                   LDI                         ; 11 bytes at once      ' 16+1  |
0991   0959 ED A0                   LDI                         ;                       ' 16+1  |
0992   095B ED A0                   LDI                         ;                       ' 16+1  |
0993   095D ED A0                   LDI                         ;                       ' 16+1  |
0994   095F ED A0                   LDI                         ;                       ' 16+1  | 187 (223)
0995   0961 ED A0                   LDI                         ;                       ' 16+1  |
0996   0963 ED A0                   LDI                         ;                       ' 16+1  |
0997   0965 ED A0                   LDI                         ;                       ' 16+1  |
0998   0967 ED A0                   LDI                         ;                       ' 16+1  |
0999   0969 ED A0                   LDI                         ;                       ' 16+1  |
1000   096B             
1001   096B                         wait10                      ; sync                  ' 10    |
1001   096B C3 6E 09    >            JP      .loop
1002   096E 3E 0B                   LD      A, 11               ; A = block fill size   ' 7     |
1003   0970 B9                      CP      C                   ; remaining > 11        ' 4     | 31 (254)
1004   0971 DA 4E 09                JP      C, .sec_part_loop   ; continu block fill    ' 10    |
1005   0974             
1006   0974             .sec_part_end
1007   0974             ; $B7+X
1008   0974                         sampleOutput                ;                       ' 36    | 36
1008   0974 D9          >            EXX                     ;                           ' 4     | 4
1008   0975 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1008   0976 03          >            INC     BC              ; increment read address    ' 6     |
1008   0977 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1008   0979 12          >            LD      (DE), A         ; play sample               ' 7     |
1008   097A D9          >            EXX                     ;                           ' 4     | (36)
1009   097B             
1010   097B ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
1011   097D E2 C8 09                JP      PO, .sec_part_d0    ;                       ' 10    | 27 (63)
1012   0980 ED A0                   LDI                         ;                       ' 16+1  |
1013   0982 E2 CE 09                JP      PO, .sec_part_d1    ;                       ' 10    | 27 (90)
1014   0985 ED A0                   LDI                         ;                       ' 16+1  |
1015   0987 E2 D4 09                JP      PO, .sec_part_d2    ;                       ' 10    | 27 (117)
1016   098A ED A0                   LDI                         ;                       ' 16+1  |
1017   098C E2 DA 09                JP      PO, .sec_part_d3    ;                       ' 10    | 27 (144)
1018   098F ED A0                   LDI                         ;                       ' 16+1  |
1019   0991 E2 E0 09                JP      PO, .sec_part_d4    ;                       ' 10    | 27 (171)
1020   0994 ED A0                   LDI                         ;                       ' 16+1  |
1021   0996 E2 E6 09                JP      PO, .sec_part_d5    ;                       ' 10    | 27 (198)
1022   0999             
1023   0999                         wait56                      ; sync                  ' 56    | (254)
1023   0999 3E 02       >            LD      A, w            ; 7-2
1023   099B 3D          >            DEC     A               ; 4
1023   099C 20 FD       >            JR      NZ, .loop       ; 12
1023   099E ED 4F       >            LD      R, A
1023   09A0 ED 4F       >            LD      R, A
1023   09A2 00          >            NOP
1024   09A3             
1025   09A3             ; $B7+X
1026   09A3                         sampleOutput                ;                       ' 36    | 36
1026   09A3 D9          >            EXX                     ;                           ' 4     | 4
1026   09A4 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1026   09A5 03          >            INC     BC              ; increment read address    ' 6     |
1026   09A6 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1026   09A8 12          >            LD      (DE), A         ; play sample               ' 7     |
1026   09A9 D9          >            EXX                     ;                           ' 4     | (36)
1027   09AA             
1028   09AA ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
1029   09AC E2 C8 09                JP      PO, .sec_part_d0    ;                       ' 10    | 27 (63)
1030   09AF ED A0                   LDI                         ;                       ' 16+1  |
1031   09B1 E2 CE 09                JP      PO, .sec_part_d1    ;                       ' 10    | 27 (90)
1032   09B4 ED A0                   LDI                         ;                       ' 16+1  |
1033   09B6 E2 D4 09                JP      PO, .sec_part_d2    ;                       ' 10    | 27 (117)
1034   09B9 ED A0                   LDI                         ;                       ' 16+1  |
1035   09BB E2 DA 09                JP      PO, .sec_part_d3    ;                       ' 10    | 27 (144)
1036   09BE ED A0                   LDI                         ;                       ' 16+1  |
1037   09C0 E2 E0 09                JP      PO, .sec_part_d4    ;                       ' 10    | 27 (171)
1038   09C3 ED A0                   LDI                         ;                       ' 16+1  |
1039   09C5 C3 E6 09                JP      .sec_part_d5        ;                       ' 10    | 27 (198)
1040   09C8             
1041   09C8             .sec_part_d0
1042   09C8                         wait27                      ; sync                  '       | (90)
1042   09C8 ED 4F       >            LD      R, A
1042   09CA ED 4F       >            LD      R, A
1042   09CC ED 4F       >            LD      R, A
1043   09CE             .sec_part_d1
1044   09CE                         wait27                      ; sync                  '       | (117)
1044   09CE ED 4F       >            LD      R, A
1044   09D0 ED 4F       >            LD      R, A
1044   09D2 ED 4F       >            LD      R, A
1045   09D4             .sec_part_d2
1046   09D4                         wait27                      ; sync                  '       | (144)
1046   09D4 ED 4F       >            LD      R, A
1046   09D6 ED 4F       >            LD      R, A
1046   09D8 ED 4F       >            LD      R, A
1047   09DA             .sec_part_d3
1048   09DA                         wait27                      ; sync                  '       | (171)
1048   09DA ED 4F       >            LD      R, A
1048   09DC ED 4F       >            LD      R, A
1048   09DE ED 4F       >            LD      R, A
1049   09E0             .sec_part_d4
1050   09E0                         wait27                      ; sync                  '       | (198)
1050   09E0 ED 4F       >            LD      R, A
1050   09E2 ED 4F       >            LD      R, A
1050   09E4 ED 4F       >            LD      R, A
1051   09E6             .sec_part_d5
1052   09E6                         wait35                      ; sync                  ' 35    |
1052   09E6 18 00       >            JR      .loop
1052   09E8 ED 4F       >            LD      R, A
1052   09EA 1A          >            LD      A, (DE)
1052   09EB 1A          >            LD      A, (DE)
1053   09EC AF                      XOR     A                   ; A = 0                 ' 4     | 39 (237)
1054   09ED             
1055   09ED             end_prep_xgm                            ;                       ' 237
1056   09ED 12                      LD      (DE), A             ; XGM buf end with 0    ' 7     |
1057   09EE                         wait10                      ; sync                  ' 10    | 17 (254)
1057   09EE C3 F1 09    >            JP      .loop
1058   09F1             
1059   09F1             
1060   09F1             ; free time + frame synchro
1061   09F1             ; -------------------------
1062   09F1             
1063   09F1             ; $B8+X
1064   09F1             loop_synchro
1065   09F1                         sampleOutput                ;                       ' 36    | (36)
1065   09F1 D9          >            EXX                     ;                           ' 4     | 4
1065   09F2 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1065   09F3 03          >            INC     BC              ; increment read address    ' 6     |
1065   09F4 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1065   09F6 12          >            LD      (DE), A         ; play sample               ' 7     |
1065   09F7 D9          >            EXX                     ;                           ' 4     | (36)
1066   09F8             
1067   09F8                         wait156                     ; sync                  ' 156   | 192
1067   09F8 3E 09       >            LD      A, w            ; 7-2
1067   09FA 3D          >            DEC     A               ; 4
1067   09FB 20 FD       >            JR      NZ, .loop       ; 12
1067   09FD C3 00 0A    >            JP      .loop
1068   0A00             
1069   0A00 3A 63 01                LD      A, (IDLE_LOOP)      ;                       ' 13    |
1070   0A03 3C                      INC     A                   ; increment idle loop   ' 4     | 30 (222)
1071   0A04 32 63 01                LD      (IDLE_LOOP), A      ;                       ' 13    |
1072   0A07             
1073   0A07 FD 7D                   LD      A, IYL              ; A = vint flag         ' 8     |
1074   0A09 B7                      OR      A                   ; vint happened ?       ' 4     | 22 (244)
1075   0A0A C2 10 0A                JP      NZ, pre_exec_xgm    ; --> execute xgm       ' 10    |
1076   0A0D             
1077   0A0D C3 F1 09                JP      loop_synchro        ; loop                  ' 10    | (254)
1078   0A10             
1079   0A10             pre_exec_xgm                            ;                       ' 244
1080   0A10 11 00 17                LD      DE, XGM_BUFFER      ; DE point to XGM buf   ' 10    | (254)
1081   0A13             
1082   0A13             
1083   0A13             ; execute XGM command
1084   0A13             ; -------------------
1085   0A13             
1086   0A13             ; $B9+X
1087   0A13             execute_xgm
1088   0A13                         sampleOutput                ;                       ' 36    | (36)
1088   0A13 D9          >            EXX                     ;                           ' 4     | 4
1088   0A14 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1088   0A15 03          >            INC     BC              ; increment read address    ' 6     |
1088   0A16 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1088   0A18 12          >            LD      (DE), A         ; play sample               ' 7     |
1088   0A19 D9          >            EXX                     ;                           ' 4     | (36)
1089   0A1A             
1090   0A1A 1A                      LD      A, (DE)             ; A = command           ' 7     |
1091   0A1B 32 20 0A                LD      (.ld_hl_xx + 1), A  ; set jump address      ' 13    |
1092   0A1E 1C                      INC     E                   ; next command          ' 4     | 44 (80)
1093   0A1F             .ld_hl_xx                               ;                       '       |
1094   0A1F 2A 00 16                LD      HL, (JUMP_TABLE)    ; LD HL, (jt)           ' 16    |
1095   0A22 E9                      JP      (HL)                ;                       ' 4     |
1096   0A23             
1097   0A23             
1098   0A23             ; next frame command
1099   0A23             ; ------------------
1100   0A23             
1101   0A23             com_next_frame                          ; 00                    ' 80
1102   0A23 C3 9B 11                JP      xgm_done            ; XGM frame done        ' 10    | (90)
1103   0A26             
1104   0A26             
1105   0A26             ; PSG command
1106   0A26             ; -----------
1107   0A26             
1108   0A26             com_psg_tone_w0                         ; 10                    ' 80
1109   0A26                         wait126                     ; sync                  ' 126   |
1109   0A26 3E 07       >            LD      A, w            ; 7-2
1109   0A28 3D          >            DEC     A               ; 4
1109   0A29 20 FD       >            JR      NZ, .loop       ; 12
1109   0A2B 18 00       >            JR      .loop
1110   0A2D 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 146 (226)
1111   0A30 C3 9D 0A                JP      psg_tone_write0     ;                       ' 10    |
1112   0A33             
1113   0A33             com_psg_tone_w1                         ; 11                    ' 80
1114   0A33                         wait108                     ; sync                  ' 108   |
1114   0A33 3E 06       >            LD      A, w            ; 7-2
1114   0A35 3D          >            DEC     A               ; 4
1114   0A36 20 FD       >            JR      NZ, .loop       ; 12
1114   0A38 C3 3B 0A    >            JP      .loop
1115   0A3B 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 128 (208)
1116   0A3E C3 9A 0A                JP      psg_tone_write1     ;                       ' 10    |
1117   0A41             
1118   0A41             com_psg_tone_w2                         ; 12                    ' 80
1119   0A41                         wait90                      ; sync                  ' 90    |
1119   0A41 3E 05       >            LD      A, w            ; 7-2
1119   0A43 3D          >            DEC     A               ; 4
1119   0A44 20 FD       >            JR      NZ, .loop       ; 12
1119   0A46 00          >            NOP
1119   0A47 00          >            NOP
1120   0A48 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 110 (190)
1121   0A4B C3 97 0A                JP      psg_tone_write2     ;                       ' 10    |
1122   0A4E             
1123   0A4E             com_psg_tone_w3                         ; 13                    ' 80
1124   0A4E                         wait72                      ; sync                  ' 72    |
1124   0A4E 3E 03       >            LD      A, w            ; 7-2
1124   0A50 3D          >            DEC     A               ; 4
1124   0A51 20 FD       >            JR      NZ, .loop       ; 12
1124   0A53 ED 4F       >            LD      R, A
1124   0A55 ED 4F       >            LD      R, A
1124   0A57 00          >            NOP
1125   0A58 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 92 (172)
1126   0A5B C3 94 0A                JP      psg_tone_write3     ;                       ' 10    |
1127   0A5E             
1128   0A5E             com_psg_tone_w4                         ; 14                    ' 80
1129   0A5E                         wait54                      ; sync                  ' 54    |
1129   0A5E 3E 03       >            LD      A, w            ; 7-2
1129   0A60 3D          >            DEC     A               ; 4
1129   0A61 20 FD       >            JR      NZ, .loop       ; 12
1129   0A63 00          >            NOP
1130   0A64 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 74 (154)
1131   0A67 C3 91 0A                JP      psg_tone_write4     ;                       ' 10    |
1132   0A6A             
1133   0A6A             com_psg_tone_w5                         ; 15                    ' 80
1134   0A6A                         wait36                      ; sync                  ' 36    |
1134   0A6A ED 4F       >            LD      R, A
1134   0A6C ED 4F       >            LD      R, A
1134   0A6E ED 4F       >            LD      R, A
1134   0A70 ED 4F       >            LD      R, A
1135   0A72 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 56 (136)
1136   0A75 C3 8E 0A                JP      psg_tone_write5     ;                       ' 10    |
1137   0A78             
1138   0A78             com_psg_tone_w6                         ; 16                    ' 80
1139   0A78                         wait18                      ; sync                  ' 18    |
1139   0A78 ED 4F       >            LD      R, A
1139   0A7A ED 4F       >            LD      R, A
1140   0A7C 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 38 (118)
1141   0A7F C3 8B 0A                JP      psg_tone_write6     ;                       ' 10    |
1142   0A82             
1143   0A82             com_psg_tone_w7                         ; 17                    ' 80
1144   0A82 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 20 (100)
1145   0A85 C3 88 0A                JP      psg_tone_write7     ;                       ' 10    |
1146   0A88             
1147   0A88             
1148   0A88             psg_tone_write7                         ;                       ' 100
1149   0A88 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1150   0A89 1C                      INC     E                   ; next data             ' 4     | 18 (118)
1151   0A8A 77                      LD      (HL), A             ; write to PSG          ' 7     |
1152   0A8B             
1153   0A8B             psg_tone_write6
1154   0A8B 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1155   0A8C 1C                      INC     E                   ; next data             ' 4     | 18 (136)
1156   0A8D 77                      LD      (HL), A             ; write to PSG          ' 7     |
1157   0A8E             
1158   0A8E             psg_tone_write5
1159   0A8E 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1160   0A8F 1C                      INC     E                   ; next data             ' 4     | 18 (154)
1161   0A90 77                      LD      (HL), A             ; write to PSG          ' 7     |
1162   0A91             
1163   0A91             psg_tone_write4
1164   0A91 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1165   0A92 1C                      INC     E                   ; next data             ' 4     | 18 (172)
1166   0A93 77                      LD      (HL), A             ; write to PSG          ' 7     |
1167   0A94             
1168   0A94             psg_tone_write3
1169   0A94 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1170   0A95 1C                      INC     E                   ; next data             ' 4     | 18 (190)
1171   0A96 77                      LD      (HL), A             ; write to PSG          ' 7     |
1172   0A97             
1173   0A97             psg_tone_write2
1174   0A97 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1175   0A98 1C                      INC     E                   ; next data             ' 4     | 18 (208)
1176   0A99 77                      LD      (HL), A             ; write to PSG          ' 7     |
1177   0A9A             
1178   0A9A             psg_tone_write1
1179   0A9A 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1180   0A9B 1C                      INC     E                   ; next data             ' 4     | 18 (226)
1181   0A9C 77                      LD      (HL), A             ; write to PSG          ' 7     |
1182   0A9D             
1183   0A9D             psg_tone_write0
1184   0A9D 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1185   0A9E 1C                      INC     E                   ; next data             ' 4     | 18 (244)
1186   0A9F 77                      LD      (HL), A             ; write to PSG          ' 7     |
1187   0AA0             
1188   0AA0 C3 13 0A                JP      execute_xgm         ;                       ' 10    | (254)
1189   0AA3             
1190   0AA3             
1191   0AA3             com_psg_env_w0                          ; 18                    ' 80
1192   0AA3                         wait72                      ; sync                  ' 72    |
1192   0AA3 3E 03       >            LD      A, w            ; 7-2
1192   0AA5 3D          >            DEC     A               ; 4
1192   0AA6 20 FD       >            JR      NZ, .loop       ; 12
1192   0AA8 ED 4F       >            LD      R, A
1192   0AAA ED 4F       >            LD      R, A
1192   0AAC 00          >            NOP
1193   0AAD 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 102 (182)
1194   0AB0 01 5C 01                LD      BC, PSG_ENV_SAV     ; BC point on PSG save  ' 10    |
1195   0AB3 C3 17 0B                JP      psg_env_write0      ;                       ' 10    |
1196   0AB6             
1197   0AB6             com_psg_env_w1                          ; 18                    ' 80
1198   0AB6                         wait10                      ; sync                  ' 10    |
1198   0AB6 C3 B9 0A    >            JP      .loop
1199   0AB9 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 40 (120)
1200   0ABC 01 5C 01                LD      BC, PSG_ENV_SAV     ; BC point on PSG save  ' 10    |
1201   0ABF C3 0A 0B                JP      psg_env_write1      ;                       ' 10    |
1202   0AC2             
1203   0AC2             com_psg_env_w2                          ; 18                    ' 80
1204   0AC2                         wait154                     ; sync                  ' 154   |
1204   0AC2 3E 09       >            LD      A, w            ; 7-2
1204   0AC4 3D          >            DEC     A               ; 4
1204   0AC5 20 FD       >            JR      NZ, .loop       ; 12
1204   0AC7 00          >            NOP
1204   0AC8 00          >            NOP
1205   0AC9 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 174 (254)
1206   0ACC 01 5C 01                LD      BC, PSG_ENV_SAV     ; BC point on PSG save  ' 10    |
1207   0ACF             
1208   0ACF                         sampleOutput                ;                       ' 36    | (36)
1208   0ACF D9          >            EXX                     ;                           ' 4     | 4
1208   0AD0 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1208   0AD1 03          >            INC     BC              ; increment read address    ' 6     |
1208   0AD2 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1208   0AD4 12          >            LD      (DE), A         ; play sample               ' 7     |
1208   0AD5 D9          >            EXX                     ;                           ' 4     | (36)
1209   0AD6             
1210   0AD6                         wait12                      ; sync                  ' 12    |
1210   0AD6 18 00       >            JR      .loop
1211   0AD8 C3 FD 0A                JP      psg_env_write2      ;                       ' 10    | 22 (58)
1212   0ADB             
1213   0ADB             com_psg_env_w3                          ; 18                    ' 80
1214   0ADB                         wait110                     ; sync                  ' 110   |
1214   0ADB 3E 06       >            LD      A, w            ; 7-2
1214   0ADD 3D          >            DEC     A               ; 4
1214   0ADE 20 FD       >            JR      NZ, .loop       ; 12
1214   0AE0 18 00       >            JR      .loop
1215   0AE2 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 130 (210)
1216   0AE5 01 5C 01                LD      BC, PSG_ENV_SAV     ; BC point on PSG save  ' 10    |
1217   0AE8             
1218   0AE8             psg_env_write3
1219   0AE8 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1220   0AE9 07                      RLCA                        ;                       ' 4     |
1221   0AEA 07                      RLCA                        ;                       ' 4     |
1222   0AEB 07                      RLCA                        ;                       ' 4     |
1223   0AEC E6 03                   AND     $3                  ; A = channel number    ' 7     | 41 (254-3)
1224   0AEE C6 5C                   ADD    (PSG_ENV_SAV & $FF)  ; add offset            ' 7     |
1225   0AF0 4F                      LD      C, A                ; BC point on save      ' 4     |
1226   0AF1                         wait4                       ; sync                  ' 4     |
1226   0AF1 00          >            NOP
1227   0AF2             
1228   0AF2                         sampleOutput                ;                       ' 36    | (36-3)
1228   0AF2 D9          >            EXX                     ;                           ' 4     | 4
1228   0AF3 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1228   0AF4 03          >            INC     BC              ; increment read address    ' 6     |
1228   0AF5 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1228   0AF7 12          >            LD      (DE), A         ; play sample               ' 7     |
1228   0AF8 D9          >            EXX                     ;                           ' 4     | (36)
1229   0AF9             
1230   0AF9 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1231   0AFA 1C                      INC     E                   ; next data             ' 4     | 25 (58)
1232   0AFB 77                      LD      (HL), A             ; write to PSG          ' 7     |
1233   0AFC 02                      LD      (BC), A             ; write to save         ' 7     |
1234   0AFD             
1235   0AFD             psg_env_write2                          ;                       ' 58
1236   0AFD 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1237   0AFE 07                      RLCA                        ;                       ' 4     |
1238   0AFF 07                      RLCA                        ;                       ' 4     |
1239   0B00 07                      RLCA                        ;                       ' 4     |
1240   0B01 E6 03                   AND     $3                  ; A = channel number    ' 7     |
1241   0B03 C6 5C                   ADD    (PSG_ENV_SAV & $FF)  ; add offset            ' 7     | 62 (120)
1242   0B05 4F                      LD      C, A                ; BC point on save      ' 4     |
1243   0B06 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1244   0B07 1C                      INC     E                   ; next data             ' 4     |
1245   0B08 77                      LD      (HL), A             ; write to PSG          ' 7     |
1246   0B09 02                      LD      (BC), A             ; write to save         ' 7     |
1247   0B0A             
1248   0B0A             psg_env_write1
1249   0B0A 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1250   0B0B 07                      RLCA                        ;                       ' 4     |
1251   0B0C 07                      RLCA                        ;                       ' 4     |
1252   0B0D 07                      RLCA                        ;                       ' 4     |
1253   0B0E E6 03                   AND     $3                  ; A = channel number    ' 7     |
1254   0B10 C6 5C                   ADD    (PSG_ENV_SAV & $FF)  ; add offset            ' 7     | 62 (182)
1255   0B12 4F                      LD      C, A                ; BC point on save      ' 4     |
1256   0B13 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1257   0B14 1C                      INC     E                   ; next data             ' 4     |
1258   0B15 77                      LD      (HL), A             ; write to PSG          ' 7     |
1259   0B16 02                      LD      (BC), A             ; write to save         ' 7     |
1260   0B17             
1261   0B17             psg_env_write0
1262   0B17 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1263   0B18 07                      RLCA                        ;                       ' 4     |
1264   0B19 07                      RLCA                        ;                       ' 4     |
1265   0B1A 07                      RLCA                        ;                       ' 4     |
1266   0B1B E6 03                   AND     $3                  ; A = channel number    ' 7     |
1267   0B1D C6 5C                   ADD    (PSG_ENV_SAV & $FF)  ; add offset            ' 7     | 62 (244)
1268   0B1F 4F                      LD      C, A                ; BC point on save      ' 4     |
1269   0B20 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1270   0B21 1C                      INC     E                   ; next data             ' 4     |
1271   0B22 77                      LD      (HL), A             ; write to PSG          ' 7     |
1272   0B23 02                      LD      (BC), A             ; write to save         ' 7     |
1273   0B24             
1274   0B24 C3 13 0A                JP      execute_xgm         ;                       ' 10    | (254)
1275   0B27             
1276   0B27             
1277   0B27             ; YM port0 command
1278   0B27             ; ----------------
1279   0B27             
1280   0B27             com_ym_port0_w0                         ; 20                    ' 80
1281   0B27                         wait36                      ; sync                  ' 36    |
1281   0B27 ED 4F       >            LD      R, A
1281   0B29 ED 4F       >            LD      R, A
1281   0B2B ED 4F       >            LD      R, A
1281   0B2D ED 4F       >            LD      R, A
1282   0B2F 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 66 (146)
1283   0B32 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1284   0B35 C3 11 0D                JP      ym_port_write0      ;                       ' 10    |
1285   0B38             
1286   0B38             com_ym_port0_w1                         ; 21                    ' 80
1287   0B38 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1288   0B3B 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    | 30 (110)
1289   0B3E C3 0B 0D                JP      ym_port_write1      ;                       ' 10    |
1290   0B41             
1291   0B41             com_ym_port0_w2                         ; 22                    ' 80
1292   0B41                         wait52                      ; sync                  ' 52    |
1292   0B41 3E 02       >            LD      A, w            ; 7-2
1292   0B43 3D          >            DEC     A               ; 4
1292   0B44 20 FD       >            JR      NZ, .loop       ; 12
1292   0B46 ED 4F       >            LD      R, A
1292   0B48 ED 4F       >            LD      R, A
1293   0B4A 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 82 (162)
1294   0B4D 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1295   0B50 C3 F6 0D                JP      ym_port_write2      ;                       ' 10    |
1296   0B53             
1297   0B53             com_ym_port0_w3                         ; 23                    ' 80
1298   0B53 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1299   0B56 44 4D                   LD      BC, HL              ; BC point on YM port0  ' 10    |
1300   0B58 03                      INC     BC                  ; BC point on YM port1  ' 6     | 36 (116)
1301   0B59 C3 E7 0C                JP      com_ym_port_w3      ; execute               ' 10    |
1302   0B5C             
1303   0B5C             com_ym_port0_w4                         ; 24                    ' 80
1304   0B5C                         wait144                     ; sync                  ' 144   |
1304   0B5C 3E 08       >            LD      A, w            ; 7-2
1304   0B5E 3D          >            DEC     A               ; 4
1304   0B5F 20 FD       >            JR      NZ, .loop       ; 12
1304   0B61 1A          >            LD      A, (DE)
1304   0B62 1A          >            LD      A, (DE)
1305   0B63 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 174 (254)
1306   0B66 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1307   0B69 C3 D7 0D                JP      ym_port_write4      ;                       ' 10    |
1308   0B6C             
1309   0B6C             com_ym_port0_w5                         ; 25                    ' 80
1310   0B6C                         wait52                      ; sync                  ' 52    |
1310   0B6C 3E 02       >            LD      A, w            ; 7-2
1310   0B6E 3D          >            DEC     A               ; 4
1310   0B6F 20 FD       >            JR      NZ, .loop       ; 12
1310   0B71 ED 4F       >            LD      R, A
1310   0B73 ED 4F       >            LD      R, A
1311   0B75 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 82 (162)
1312   0B78 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1313   0B7B C3 C5 0D                JP      ym_port_write5      ;                       ' 10    |
1314   0B7E             
1315   0B7E             com_ym_port0_w6                         ; 26                    ' 80
1316   0B7E 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1317   0B81 44 4D                   LD      BC, HL              ; BC point on YM port0  ' 10    |
1318   0B83 03                      INC     BC                  ; BC point on YM port1  ' 6     | 36 (116)
1319   0B84 C3 F0 0C                JP      com_ym_port_w6      ; execute               ' 10    |
1320   0B87             
1321   0B87             com_ym_port0_w7                         ; 27                    ' 80
1322   0B87                         wait144                     ; sync                  ' 144   |
1322   0B87 3E 08       >            LD      A, w            ; 7-2
1322   0B89 3D          >            DEC     A               ; 4
1322   0B8A 20 FD       >            JR      NZ, .loop       ; 12
1322   0B8C 1A          >            LD      A, (DE)
1322   0B8D 1A          >            LD      A, (DE)
1323   0B8E 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 174 (254)
1324   0B91 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1325   0B94 C3 A6 0D                JP      ym_port_write7      ;                       ' 10    |
1326   0B97             
1327   0B97             com_ym_port0_w8                         ; 28                    ' 80
1328   0B97                         wait52                      ; sync                  ' 52    |
1328   0B97 3E 02       >            LD      A, w            ; 7-2
1328   0B99 3D          >            DEC     A               ; 4
1328   0B9A 20 FD       >            JR      NZ, .loop       ; 12
1328   0B9C ED 4F       >            LD      R, A
1328   0B9E ED 4F       >            LD      R, A
1329   0BA0 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 82 (162)
1330   0BA3 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1331   0BA6 C3 94 0D                JP      ym_port_write8      ;                       ' 10    |
1332   0BA9             
1333   0BA9             com_ym_port0_w9                         ; 29                    ' 80
1334   0BA9 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1335   0BAC 44 4D                   LD      BC, HL              ; BC point on YM port0  ' 10    |
1336   0BAE 03                      INC     BC                  ; BC point on YM port1  ' 6     | 36 (116)
1337   0BAF C3 F9 0C                JP      com_ym_port_w9      ; execute               ' 10    |
1338   0BB2             
1339   0BB2             com_ym_port0_wA                         ; 2A                    ' 80
1340   0BB2                         wait144                     ; sync                  ' 144   |
1340   0BB2 3E 08       >            LD      A, w            ; 7-2
1340   0BB4 3D          >            DEC     A               ; 4
1340   0BB5 20 FD       >            JR      NZ, .loop       ; 12
1340   0BB7 1A          >            LD      A, (DE)
1340   0BB8 1A          >            LD      A, (DE)
1341   0BB9 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 174 (254)
1342   0BBC 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1343   0BBF C3 75 0D                JP      ym_port_writeA      ;                       ' 10    |
1344   0BC2             
1345   0BC2             com_ym_port0_wB                         ; 2B                    ' 80
1346   0BC2                         wait52                      ; sync                  ' 52    |
1346   0BC2 3E 02       >            LD      A, w            ; 7-2
1346   0BC4 3D          >            DEC     A               ; 4
1346   0BC5 20 FD       >            JR      NZ, .loop       ; 12
1346   0BC7 ED 4F       >            LD      R, A
1346   0BC9 ED 4F       >            LD      R, A
1347   0BCB 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 82 (162)
1348   0BCE 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1349   0BD1 C3 63 0D                JP      ym_port_writeB      ;                       ' 10    |
1350   0BD4             
1351   0BD4             com_ym_port0_wC                         ; 2C                    ' 80
1352   0BD4 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1353   0BD7 44 4D                   LD      BC, HL              ; BC point on YM port0  ' 10    |
1354   0BD9 03                      INC     BC                  ; BC point on YM port1  ' 6     | 36 (116)
1355   0BDA C3 02 0D                JP      com_ym_port_wC      ; execute               ' 10    |
1356   0BDD             
1357   0BDD             com_ym_port0_wD                         ; 2D                    ' 80
1358   0BDD                         wait144                     ; sync                  ' 144   |
1358   0BDD 3E 08       >            LD      A, w            ; 7-2
1358   0BDF 3D          >            DEC     A               ; 4
1358   0BE0 20 FD       >            JR      NZ, .loop       ; 12
1358   0BE2 1A          >            LD      A, (DE)
1358   0BE3 1A          >            LD      A, (DE)
1359   0BE4 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 174 (254)
1360   0BE7 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1361   0BEA C3 44 0D                JP      ym_port_writeD      ;                       ' 10    |
1362   0BED             
1363   0BED             com_ym_port0_wE                         ; 2E                    ' 80
1364   0BED                         wait36                      ; sync                  ' 36    |
1364   0BED ED 4F       >            LD      R, A
1364   0BEF ED 4F       >            LD      R, A
1364   0BF1 ED 4F       >            LD      R, A
1364   0BF3 ED 4F       >            LD      R, A
1365   0BF5 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 66 (146)
1366   0BF8 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1367   0BFB C3 2F 0D                JP      ym_port_writeE      ;                       ' 10    |
1368   0BFE             
1369   0BFE             com_ym_port0_wF                         ; 2F                    ' 80
1370   0BFE 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1371   0C01 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    | 30 (110)
1372   0C04 C3 29 0D                JP      ym_port_writeF      ;                       ' 10    |
1373   0C07             
1374   0C07             
1375   0C07             ; YM port2 command
1376   0C07             ; ----------------
1377   0C07             
1378   0C07             com_ym_port2_w0                         ; 30                    ' 80
1379   0C07                         wait36                      ; sync                  ' 36    |
1379   0C07 ED 4F       >            LD      R, A
1379   0C09 ED 4F       >            LD      R, A
1379   0C0B ED 4F       >            LD      R, A
1379   0C0D ED 4F       >            LD      R, A
1380   0C0F 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 66 (146)
1381   0C12 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1382   0C15 C3 11 0D                JP      ym_port_write0      ;                       ' 10    |
1383   0C18             
1384   0C18             com_ym_port2_w1                         ; 31                    ' 80
1385   0C18 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1386   0C1B 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    | 30 (110)
1387   0C1E C3 0B 0D                JP      ym_port_write1      ;                       ' 10    |
1388   0C21             
1389   0C21             com_ym_port2_w2                         ; 32                    ' 80
1390   0C21                         wait52                      ; sync                  ' 52    |
1390   0C21 3E 02       >            LD      A, w            ; 7-2
1390   0C23 3D          >            DEC     A               ; 4
1390   0C24 20 FD       >            JR      NZ, .loop       ; 12
1390   0C26 ED 4F       >            LD      R, A
1390   0C28 ED 4F       >            LD      R, A
1391   0C2A 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 82 (162)
1392   0C2D 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1393   0C30 C3 F6 0D                JP      ym_port_write2      ;                       ' 10    |
1394   0C33             
1395   0C33             com_ym_port2_w3                         ; 33                    ' 80
1396   0C33 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1397   0C36 44 4D                   LD      BC, HL              ; BC point on YM port2  ' 10    |
1398   0C38 03                      INC     BC                  ; BC point on YM port3  ' 6     | 36 (116)
1399   0C39 C3 E7 0C                JP      com_ym_port_w3      ; execute               ' 10    |
1400   0C3C             
1401   0C3C             com_ym_port2_w4                         ; 34                    ' 80
1402   0C3C                         wait144                     ; sync                  ' 144   |
1402   0C3C 3E 08       >            LD      A, w            ; 7-2
1402   0C3E 3D          >            DEC     A               ; 4
1402   0C3F 20 FD       >            JR      NZ, .loop       ; 12
1402   0C41 1A          >            LD      A, (DE)
1402   0C42 1A          >            LD      A, (DE)
1403   0C43 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 174 (254)
1404   0C46 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1405   0C49 C3 D7 0D                JP      ym_port_write4      ;                       ' 10    |
1406   0C4C             
1407   0C4C             com_ym_port2_w5                         ; 35                    ' 80
1408   0C4C                         wait52                      ; sync                  ' 52    |
1408   0C4C 3E 02       >            LD      A, w            ; 7-2
1408   0C4E 3D          >            DEC     A               ; 4
1408   0C4F 20 FD       >            JR      NZ, .loop       ; 12
1408   0C51 ED 4F       >            LD      R, A
1408   0C53 ED 4F       >            LD      R, A
1409   0C55 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 82 (162)
1410   0C58 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1411   0C5B C3 C5 0D                JP      ym_port_write5      ;                       ' 10    |
1412   0C5E             
1413   0C5E             com_ym_port2_w6                         ; 36                    ' 80
1414   0C5E 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1415   0C61 44 4D                   LD      BC, HL              ; BC point on YM port2  ' 10    |
1416   0C63 03                      INC     BC                  ; BC point on YM port3  ' 6     | 36 (116)
1417   0C64 C3 F0 0C                JP      com_ym_port_w6      ; execute               ' 10    |
1418   0C67             
1419   0C67             com_ym_port2_w7                         ; 37                    ' 80
1420   0C67                         wait144                     ; sync                  ' 144   |
1420   0C67 3E 08       >            LD      A, w            ; 7-2
1420   0C69 3D          >            DEC     A               ; 4
1420   0C6A 20 FD       >            JR      NZ, .loop       ; 12
1420   0C6C 1A          >            LD      A, (DE)
1420   0C6D 1A          >            LD      A, (DE)
1421   0C6E 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 174 (254)
1422   0C71 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1423   0C74 C3 A6 0D                JP      ym_port_write7      ;                       ' 10    |
1424   0C77             
1425   0C77             com_ym_port2_w8                         ; 38                    ' 80
1426   0C77                         wait52                      ; sync                  ' 52    |
1426   0C77 3E 02       >            LD      A, w            ; 7-2
1426   0C79 3D          >            DEC     A               ; 4
1426   0C7A 20 FD       >            JR      NZ, .loop       ; 12
1426   0C7C ED 4F       >            LD      R, A
1426   0C7E ED 4F       >            LD      R, A
1427   0C80 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 82 (162)
1428   0C83 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1429   0C86 C3 94 0D                JP      ym_port_write8      ;                       ' 10    |
1430   0C89             
1431   0C89             com_ym_port2_w9                         ; 39                    ' 80
1432   0C89 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1433   0C8C 44 4D                   LD      BC, HL              ; BC point on YM port2  ' 10    |
1434   0C8E 03                      INC     BC                  ; BC point on YM port3  ' 6     | 36 (116)
1435   0C8F C3 F9 0C                JP      com_ym_port_w9      ; execute               ' 10    |
1436   0C92             
1437   0C92             com_ym_port2_wA                         ; 3A                    ' 80
1438   0C92                         wait144                     ; sync                  ' 144   |
1438   0C92 3E 08       >            LD      A, w            ; 7-2
1438   0C94 3D          >            DEC     A               ; 4
1438   0C95 20 FD       >            JR      NZ, .loop       ; 12
1438   0C97 1A          >            LD      A, (DE)
1438   0C98 1A          >            LD      A, (DE)
1439   0C99 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 174 (254)
1440   0C9C 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1441   0C9F C3 75 0D                JP      ym_port_writeA      ;                       ' 10    |
1442   0CA2             
1443   0CA2             com_ym_port2_wB                         ; 3B                    ' 80
1444   0CA2                         wait52                      ; sync                  ' 52    |
1444   0CA2 3E 02       >            LD      A, w            ; 7-2
1444   0CA4 3D          >            DEC     A               ; 4
1444   0CA5 20 FD       >            JR      NZ, .loop       ; 12
1444   0CA7 ED 4F       >            LD      R, A
1444   0CA9 ED 4F       >            LD      R, A
1445   0CAB 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 82 (162)
1446   0CAE 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1447   0CB1 C3 63 0D                JP      ym_port_writeB      ;                       ' 10    |
1448   0CB4             
1449   0CB4             com_ym_port2_wC                         ; 3C                    ' 80
1450   0CB4 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1451   0CB7 44 4D                   LD      BC, HL              ; BC point on YM port2  ' 10    |
1452   0CB9 03                      INC     BC                  ; BC point on YM port3  ' 6     | 36 (116)
1453   0CBA C3 02 0D                JP      com_ym_port_wC      ; execute               ' 10    |
1454   0CBD             
1455   0CBD             com_ym_port2_wD                         ; 3D                    ' 80
1456   0CBD                         wait144                     ; sync                  ' 144   |
1456   0CBD 3E 08       >            LD      A, w            ; 7-2
1456   0CBF 3D          >            DEC     A               ; 4
1456   0CC0 20 FD       >            JR      NZ, .loop       ; 12
1456   0CC2 1A          >            LD      A, (DE)
1456   0CC3 1A          >            LD      A, (DE)
1457   0CC4 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 174 (254)
1458   0CC7 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1459   0CCA C3 44 0D                JP      ym_port_writeD      ;                       ' 10    |
1460   0CCD             
1461   0CCD             com_ym_port2_wE                         ; 3E                    ' 80
1462   0CCD                         wait36                      ; sync                  ' 36    |
1462   0CCD ED 4F       >            LD      R, A
1462   0CCF ED 4F       >            LD      R, A
1462   0CD1 ED 4F       >            LD      R, A
1462   0CD3 ED 4F       >            LD      R, A
1463   0CD5 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 66 (146)
1464   0CD8 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1465   0CDB C3 2F 0D                JP      ym_port_writeE      ;                       ' 10    |
1466   0CDE             
1467   0CDE             com_ym_port2_wF                         ; 3F                    ' 80
1468   0CDE 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1469   0CE1 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    | 30 (110)
1470   0CE4 C3 29 0D                JP      ym_port_writeF      ;                       ' 10    |
1471   0CE7             
1472   0CE7             
1473   0CE7             com_ym_port_w3                          ;                       ' 116
1474   0CE7 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1475   0CE8 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1476   0CE9 1C                      INC     E                   ; next data             ' 4     |
1477   0CEA 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (152)
1478   0CEB 1C                      INC     E                   ; next data             ' 4     |
1479   0CEC 02                      LD      (BC), A             ; write data to YM      ' 7     |
1480   0CED C3 F6 0D                JP      ym_port_write2      ;                       ' 10    | (162)
1481   0CF0             
1482   0CF0             com_ym_port_w6                          ;                       ' 116
1483   0CF0 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1484   0CF1 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1485   0CF2 1C                      INC     E                   ; next data             ' 4     |
1486   0CF3 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (152)
1487   0CF4 1C                      INC     E                   ; next data             ' 4     |
1488   0CF5 02                      LD      (BC), A             ; write data to YM      ' 7     |
1489   0CF6 C3 C5 0D                JP      ym_port_write5      ;                       ' 10    | (162)
1490   0CF9             
1491   0CF9             com_ym_port_w9                          ;                       ' 116
1492   0CF9 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1493   0CFA 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1494   0CFB 1C                      INC     E                   ; next data             ' 4     |
1495   0CFC 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (152)
1496   0CFD 1C                      INC     E                   ; next data             ' 4     |
1497   0CFE 02                      LD      (BC), A             ; write data to YM      ' 7     |
1498   0CFF C3 94 0D                JP      ym_port_write8      ;                       ' 10    | (162)
1499   0D02             
1500   0D02             com_ym_port_wC                          ;                       ' 116
1501   0D02 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1502   0D03 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1503   0D04 1C                      INC     E                   ; next data             ' 4     |
1504   0D05 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (152)
1505   0D06 1C                      INC     E                   ; next data             ' 4     |
1506   0D07 02                      LD      (BC), A             ; write data to YM      ' 7     |
1507   0D08 C3 63 0D                JP      ym_port_writeB      ;                       ' 10    | (162)
1508   0D0B             
1509   0D0B             
1510   0D0B             ym_port_write1                          ;                       ' 110
1511   0D0B 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1512   0D0C 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1513   0D0D 1C                      INC     E                   ; next data             ' 4     |
1514   0D0E 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (146)
1515   0D0F 1C                      INC     E                   ; next data             ' 4     |
1516   0D10 02                      LD      (BC), A             ; write data to YM      ' 7     |
1517   0D11             
1518   0D11             ym_port_write0
1519   0D11 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1520   0D12                         waitYMReady                 ; wait YM to be ready   ' 22    |
1520   0D12 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1520   0D14 C2 12 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1521   0D17 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (204)
1522   0D18 1C                      INC     E                   ; next data             ' 4     |
1523   0D19 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1524   0D1A 1C                      INC     E                   ; next data             ' 4     |
1525   0D1B 02                      LD      (BC), A             ; write to YM           ' 7     |
1526   0D1C             
1527   0D1C 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1528   0D1F                         waitYMReady                 ; wait YM to be ready   ' 22    | 42 (246)
1528   0D1F CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1528   0D21 C2 1F 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1529   0D24 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1530   0D26             
1531   0D26 C3 13 0A                JP      execute_xgm         ; +2 cycles here        ' 10    | (254+2)
1532   0D29             
1533   0D29             ym_port_writeF                          ;                       ' 110
1534   0D29 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1535   0D2A 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1536   0D2B 1C                      INC     E                   ; next data             ' 4     |
1537   0D2C 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (146)
1538   0D2D 1C                      INC     E                   ; next data             ' 4     |
1539   0D2E 02                      LD      (BC), A             ; write data to YM      ' 7     |
1540   0D2F             
1541   0D2F             ym_port_writeE
1542   0D2F 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1543   0D30                         waitYMReady                 ; wait YM to be ready   ' 22    |
1543   0D30 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1543   0D32 C2 30 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1544   0D35 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (204)
1545   0D36 1C                      INC     E                   ; next data             ' 4     |
1546   0D37 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1547   0D38 1C                      INC     E                   ; next data             ' 4     |
1548   0D39 02                      LD      (BC), A             ; write to YM           ' 7     |
1549   0D3A             
1550   0D3A                         wait28                      ; sync                  ' 28    |
1550   0D3A 18 00       >            JR      .loop
1550   0D3C ED 4F       >            LD      R, A
1550   0D3E 1A          >            LD      A, (DE)
1551   0D3F                         waitYMReady                 ; wait YM to be ready   ' 22    | 50 (254)
1551   0D3F CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1551   0D41 C2 3F 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1552   0D44             
1553   0D44             ym_port_writeD
1554   0D44                         sampleOutputSafe            ;                       ' 46    | (46)
1554   0D44 D9          >            EXX                     ;                           ' 4     | 4
1554   0D45 36 2A       >            LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
1554   0D47 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1554   0D48 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
1554   0D49 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
1554   0D4B 12          >            LD      (DE), A         ; play sample               ' 7     |
1554   0D4C D9          >            EXX                     ;                           ' 4     | (46)
1555   0D4D             
1556   0D4D 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1557   0D4E                         waitYMReady                 ; wait YM to be ready   ' 22    |
1557   0D4E CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1557   0D50 C2 4E 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1558   0D53 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (104)
1559   0D54 1C                      INC     E                   ; next data             ' 4     |
1560   0D55 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1561   0D56 1C                      INC     E                   ; next data             ' 4     |
1562   0D57 02                      LD      (BC), A             ; write to YM           ' 7     |
1563   0D58             
1564   0D58             ;ym_port_writeC
1565   0D58 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1566   0D59                         waitYMReady                 ; wait YM to be ready   ' 22    |
1566   0D59 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1566   0D5B C2 59 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1567   0D5E 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (162)
1568   0D5F 1C                      INC     E                   ; next data             ' 4     |
1569   0D60 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1570   0D61 1C                      INC     E                   ; next data             ' 4     |
1571   0D62 02                      LD      (BC), A             ; write to YM           ' 7     |
1572   0D63             
1573   0D63             ym_port_writeB
1574   0D63 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1575   0D64                         waitYMReady                 ; wait YM to be ready   ' 22    |
1575   0D64 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1575   0D66 C2 64 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1576   0D69 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (220)
1577   0D6A 1C                      INC     E                   ; next data             ' 4     |
1578   0D6B 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1579   0D6C 1C                      INC     E                   ; next data             ' 4     |
1580   0D6D 02                      LD      (BC), A             ; write to YM           ' 7     |
1581   0D6E             
1582   0D6E                         wait12                      ; sync                  ' 12    |
1582   0D6E 18 00       >            JR      .loop
1583   0D70                         waitYMReady                 ; wait YM to be ready   ' 22    | 34 (254)
1583   0D70 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1583   0D72 C2 70 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1584   0D75             
1585   0D75             ym_port_writeA
1586   0D75                         sampleOutputSafe            ;                       ' 46    | (46)
1586   0D75 D9          >            EXX                     ;                           ' 4     | 4
1586   0D76 36 2A       >            LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
1586   0D78 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1586   0D79 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
1586   0D7A CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
1586   0D7C 12          >            LD      (DE), A         ; play sample               ' 7     |
1586   0D7D D9          >            EXX                     ;                           ' 4     | (46)
1587   0D7E             
1588   0D7E 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1589   0D7F                         waitYMReady                 ; wait YM to be ready   ' 22    |
1589   0D7F CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1589   0D81 C2 7F 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1590   0D84 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (104)
1591   0D85 1C                      INC     E                   ; next data             ' 4     |
1592   0D86 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1593   0D87 1C                      INC     E                   ; next data             ' 4     |
1594   0D88 02                      LD      (BC), A             ; write to YM           ' 7     |
1595   0D89             
1596   0D89             ;ym_port_write9
1597   0D89 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1598   0D8A                         waitYMReady                 ; wait YM to be ready   ' 22    |
1598   0D8A CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1598   0D8C C2 8A 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1599   0D8F 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (162)
1600   0D90 1C                      INC     E                   ; next data             ' 4     |
1601   0D91 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1602   0D92 1C                      INC     E                   ; next data             ' 4     |
1603   0D93 02                      LD      (BC), A             ; write to YM           ' 7     |
1604   0D94             
1605   0D94             ym_port_write8
1606   0D94 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1607   0D95                         waitYMReady                 ; wait YM to be ready   ' 22    |
1607   0D95 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1607   0D97 C2 95 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1608   0D9A 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (220)
1609   0D9B 1C                      INC     E                   ; next data             ' 4     |
1610   0D9C 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1611   0D9D 1C                      INC     E                   ; next data             ' 4     |
1612   0D9E 02                      LD      (BC), A             ; write to YM           ' 7     |
1613   0D9F             
1614   0D9F                         wait12                      ; sync                  ' 12    |
1614   0D9F 18 00       >            JR      .loop
1615   0DA1                         waitYMReady                 ; wait YM to be ready   ' 22    | 34 (254)
1615   0DA1 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1615   0DA3 C2 A1 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1616   0DA6             
1617   0DA6             ym_port_write7
1618   0DA6                         sampleOutputSafe            ;                       ' 46    | (46)
1618   0DA6 D9          >            EXX                     ;                           ' 4     | 4
1618   0DA7 36 2A       >            LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
1618   0DA9 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1618   0DAA 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
1618   0DAB CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
1618   0DAD 12          >            LD      (DE), A         ; play sample               ' 7     |
1618   0DAE D9          >            EXX                     ;                           ' 4     | (46)
1619   0DAF             
1620   0DAF 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1621   0DB0                         waitYMReady                 ; wait YM to be ready   ' 22    |
1621   0DB0 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1621   0DB2 C2 B0 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1622   0DB5 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (104)
1623   0DB6 1C                      INC     E                   ; next data             ' 4     |
1624   0DB7 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1625   0DB8 1C                      INC     E                   ; next data             ' 4     |
1626   0DB9 02                      LD      (BC), A             ; write to YM           ' 7     |
1627   0DBA             
1628   0DBA             ;ym_port_write6
1629   0DBA 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1630   0DBB                         waitYMReady                 ; wait YM to be ready   ' 22    |
1630   0DBB CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1630   0DBD C2 BB 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1631   0DC0 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (162)
1632   0DC1 1C                      INC     E                   ; next data             ' 4     |
1633   0DC2 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1634   0DC3 1C                      INC     E                   ; next data             ' 4     |
1635   0DC4 02                      LD      (BC), A             ; write to YM           ' 7     |
1636   0DC5             
1637   0DC5             ym_port_write5
1638   0DC5 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1639   0DC6                         waitYMReady                 ; wait YM to be ready   ' 22    |
1639   0DC6 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1639   0DC8 C2 C6 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1640   0DCB 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (220)
1641   0DCC 1C                      INC     E                   ; next data             ' 4     |
1642   0DCD 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1643   0DCE 1C                      INC     E                   ; next data             ' 4     |
1644   0DCF 02                      LD      (BC), A             ; write to YM           ' 7     |
1645   0DD0             
1646   0DD0                         wait12                      ; sync                  ' 12    |
1646   0DD0 18 00       >            JR      .loop
1647   0DD2                         waitYMReady                 ; wait YM to be ready   ' 22    | 34 (254)
1647   0DD2 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1647   0DD4 C2 D2 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1648   0DD7             
1649   0DD7             ym_port_write4
1650   0DD7                         sampleOutputSafe            ;                       ' 46    | (46)
1650   0DD7 D9          >            EXX                     ;                           ' 4     | 4
1650   0DD8 36 2A       >            LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
1650   0DDA 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1650   0DDB 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
1650   0DDC CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
1650   0DDE 12          >            LD      (DE), A         ; play sample               ' 7     |
1650   0DDF D9          >            EXX                     ;                           ' 4     | (46)
1651   0DE0             
1652   0DE0 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1653   0DE1                         waitYMReady                 ; wait YM to be ready   ' 22    |
1653   0DE1 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1653   0DE3 C2 E1 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1654   0DE6 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (104)
1655   0DE7 1C                      INC     E                   ; next data             ' 4     |
1656   0DE8 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1657   0DE9 1C                      INC     E                   ; next data             ' 4     |
1658   0DEA 02                      LD      (BC), A             ; write to YM           ' 7     |
1659   0DEB             
1660   0DEB             ;ym_port_write3
1661   0DEB 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1662   0DEC                         waitYMReady                 ; wait YM to be ready   ' 22    |
1662   0DEC CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1662   0DEE C2 EC 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1663   0DF1 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (162)
1664   0DF2 1C                      INC     E                   ; next data             ' 4     |
1665   0DF3 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1666   0DF4 1C                      INC     E                   ; next data             ' 4     |
1667   0DF5 02                      LD      (BC), A             ; write to YM           ' 7     |
1668   0DF6             
1669   0DF6             ym_port_write2
1670   0DF6 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1671   0DF7                         waitYMReady                 ; wait YM to be ready   ' 22    |
1671   0DF7 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1671   0DF9 C2 F7 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1672   0DFC 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (220)
1673   0DFD 1C                      INC     E                   ; next data             ' 4     |
1674   0DFE 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1675   0DFF 1C                      INC     E                   ; next data             ' 4     |
1676   0E00 02                      LD      (BC), A             ; write to YM           ' 7     |
1677   0E01             
1678   0E01                         wait12                      ; sync                  ' 12    |
1678   0E01 18 00       >            JR      .loop
1679   0E03                         waitYMReady                 ; wait YM to be ready   ' 22    | 34 (254)
1679   0E03 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1679   0E05 C2 03 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1680   0E08             
1681   0E08                         sampleOutputSafe            ;                       ' 46    | (46)
1681   0E08 D9          >            EXX                     ;                           ' 4     | 4
1681   0E09 36 2A       >            LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
1681   0E0B 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1681   0E0C 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
1681   0E0D CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
1681   0E0F 12          >            LD      (DE), A         ; play sample               ' 7     |
1681   0E10 D9          >            EXX                     ;                           ' 4     | (46)
1682   0E11                         wait32                      ; sync                  ' 32    | (78)
1682   0E11 1A          >            LD      A, (DE)
1682   0E12 00          >            NOP
1682   0E13 ED 4F       >            LD      R, A
1682   0E15 18 00       >            JR      .loop
1683   0E17             
1684   0E17                         waitYMReady                 ; wait YM to be ready   ' 22    |
1684   0E17 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1684   0E19 C2 17 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1685   0E1C C3 0B 0D                JP      ym_port_write1      ; execute next          ' 10    | 32 (110)
1686   0E1F             
1687   0E1F             
1688   0E1F             ; YM KEY command
1689   0E1F             ; --------------
1690   0E1F             
1691   0E1F             com_ym_key_w0                           ; 40                    ' 80
1692   0E1F                         wait18                      ; sync                  ' 40    |
1692   0E1F ED 4F       >            LD      R, A
1692   0E21 ED 4F       >            LD      R, A
1693   0E23 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1694   0E26 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    | 84 (164)
1695   0E29                         wait4                       ; sync                  ' 4     |
1695   0E29 00          >            NOP
1696   0E2A 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    |
1697   0E2C C3 98 0E                JP      ym_key_write0       ;                       ' 10    |
1698   0E2F             
1699   0E2F             com_ym_key_w1                           ; 41                    ' 80
1700   0E2F 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1701   0E32 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1702   0E35                         wait4                       ; sync                  ' 4     |
1702   0E35 00          >            NOP
1703   0E36 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 44 (124)
1704   0E38 C3 90 0E                JP      ym_key_write1       ;                       ' 10    |
1705   0E3B             
1706   0E3B             com_ym_key_w2                           ; 43                    ' 80
1707   0E3B                         wait134                     ; sync                  ' 134   |
1707   0E3B 3E 08       >            LD      A, w            ; 7-2
1707   0E3D 3D          >            DEC     A               ; 4
1707   0E3E 20 FD       >            JR      NZ, .loop       ; 12
1707   0E40 00          >            NOP
1708   0E41 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1709   0E44 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1710   0E47 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 174 (254)
1711   0E49 C3 CB 0E                JP      ym_key_write2       ;                       ' 10    |
1712   0E4C             
1713   0E4C             com_ym_key_w3                           ; 44                    ' 80
1714   0E4C                         wait64                      ; sync                  ' 64    |
1714   0E4C 3E 03       >            LD      A, w            ; 7-2
1714   0E4E 3D          >            DEC     A               ; 4
1714   0E4F 20 FD       >            JR      NZ, .loop       ; 12
1714   0E51 1A          >            LD      A, (DE)
1714   0E52 1A          >            LD      A, (DE)
1715   0E53 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1716   0E56 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1717   0E59 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 104 (184)
1718   0E5B C3 BC 0E                JP      ym_key_write3       ;                       ' 10    |
1719   0E5E             
1720   0E5E             com_ym_key_w4                           ; 45                    ' 80
1721   0E5E                         wait24                      ; sync                  ' 24    |
1721   0E5E 18 00       >            JR      .loop
1721   0E60 18 00       >            JR      .loop
1722   0E62 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1723   0E65 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1724   0E68 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 64 (144)
1725   0E6A C3 B4 0E                JP      ym_key_write4       ;                       ' 10    |
1726   0E6D             
1727   0E6D             com_ym_key_w5                           ; 46                    ' 80
1728   0E6D                         wait154                     ; sync                  ' 174   |
1728   0E6D 3E 09       >            LD      A, w            ; 7-2
1728   0E6F 3D          >            DEC     A               ; 4
1728   0E70 20 FD       >            JR      NZ, .loop       ; 12
1728   0E72 00          >            NOP
1728   0E73 00          >            NOP
1729   0E74 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 174 (254)
1730   0E77 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1731   0E7A             
1732   0E7A                         sampleOutputSafe            ;                       ' 46    | (46)
1732   0E7A D9          >            EXX                     ;                           ' 4     | 4
1732   0E7B 36 2A       >            LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
1732   0E7D 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1732   0E7E 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
1732   0E7F CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
1732   0E81 12          >            LD      (DE), A         ; play sample               ' 7     |
1732   0E82 D9          >            EXX                     ;                           ' 4     | (46)
1733   0E83             
1734   0E83                         wait16                      ; sync                  ' 16    |
1734   0E83 18 00       >            JR      .loop
1734   0E85 00          >            NOP
1735   0E86                         waitYMReady                 ; wait YM to be ready   ' 22    |
1735   0E86 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1735   0E88 C2 86 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1736   0E8B 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 58 (104)
1737   0E8D C3 AC 0E                JP      ym_key_write5       ;                       ' 10    |
1738   0E90             
1739   0E90             
1740   0E90             ym_key_write1                           ;                       ' 124
1741   0E90 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1742   0E91 1C                      INC     E                   ; next data             ' 4     |
1743   0E92                         waitYMReady                 ; wait YM to be ready   ' 22    | 40 (164)
1743   0E92 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1743   0E94 C2 92 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1744   0E97 02                      LD      (BC), A             ; write to YM           ' 7     |
1745   0E98             
1746   0E98             ym_key_write0
1747   0E98 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1748   0E99 1C                      INC     E                   ; next data             ' 4     |
1749   0E9A                         waitYMReady                 ; wait YM to be ready   ' 22    | 40 (204)
1749   0E9A CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1749   0E9C C2 9A 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1750   0E9F 02                      LD      (BC), A             ; write to YM           ' 7     |
1751   0EA0             
1752   0EA0                         wait8                       ; sync                  ' 8     |
1752   0EA0 00          >            NOP
1752   0EA1 00          >            NOP
1753   0EA2                         waitYMReady                 ; wait YM to be ready   ' 22    | 40 (244)
1753   0EA2 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1753   0EA4 C2 A2 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1754   0EA7 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1755   0EA9             
1756   0EA9 C3 13 0A                JP      execute_xgm         ;                       ' 10    | (254)
1757   0EAC             
1758   0EAC             ym_key_write5
1759   0EAC 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1760   0EAD 1C                      INC     E                   ; next data             ' 4     |
1761   0EAE                         waitYMReady                 ; wait YM to be ready   ' 22    | 40 (144)
1761   0EAE CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1761   0EB0 C2 AE 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1762   0EB3 02                      LD      (BC), A             ; write to YM           ' 7     |
1763   0EB4             
1764   0EB4             ym_key_write4
1765   0EB4 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1766   0EB5 1C                      INC     E                   ; next data             ' 4     |
1767   0EB6                         waitYMReady                 ; wait YM to be ready   ' 22    | 40 (184)
1767   0EB6 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1767   0EB8 C2 B6 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1768   0EBB 02                      LD      (BC), A             ; write to YM           ' 7     |
1769   0EBC             
1770   0EBC             ym_key_write3
1771   0EBC 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1772   0EBD 1C                      INC     E                   ; next data             ' 4     |
1773   0EBE                         waitYMReady                 ; wait YM to be ready   ' 22    | 40 (224)
1773   0EBE CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1773   0EC0 C2 BE 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1774   0EC3 02                      LD      (BC), A             ; write to YM           ' 7     |
1775   0EC4             
1776   0EC4                         wait8                       ; sync                  ' 8     |
1776   0EC4 00          >            NOP
1776   0EC5 00          >            NOP
1777   0EC6                         waitYMReady                 ; wait YM to be ready   ' 22    | 30 (254)
1777   0EC6 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1777   0EC8 C2 C6 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1778   0ECB             
1779   0ECB             ym_key_write2
1780   0ECB                         sampleOutputSafe            ;                       ' 46    | (46)
1780   0ECB D9          >            EXX                     ;                           ' 4     | 4
1780   0ECC 36 2A       >            LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
1780   0ECE 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1780   0ECF 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
1780   0ED0 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
1780   0ED2 12          >            LD      (DE), A         ; play sample               ' 7     |
1780   0ED3 D9          >            EXX                     ;                           ' 4     | (46)
1781   0ED4             
1782   0ED4                         wait8                       ; sync                  ' 8     |
1782   0ED4 00          >            NOP
1782   0ED5 00          >            NOP
1783   0ED6                         waitYMReady                 ; wait YM to be ready   ' 22    | 40 (86)
1783   0ED6 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1783   0ED8 C2 D6 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1784   0EDB 36 28                   LD      (HL), $28           ; restore write to key  ' 10    |
1785   0EDD             
1786   0EDD 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1787   0EDE 13                      INC     DE                  ; next data             ' 6     |
1788   0EDF                         wait8                       ; wait YM to be ready   ' 8     | 28 (114)
1788   0EDF 00          >            NOP
1788   0EE0 00          >            NOP
1789   0EE1 02                      LD      (BC), A             ; write to YM           ' 7     |
1790   0EE2             
1791   0EE2 C3 90 0E                JP      ym_key_write1       ; execute next          ' 10    | (124)
1792   0EE5             
1793   0EE5             
1794   0EE5             ; PCM command
1795   0EE5             ; -----------
1796   0EE5             
1797   0EE5             com_pcm_p0_ch0                          ; 50                    ' 80
1798   0EE5 0E 00                   LD      C, 0                ; C = prio              ' 7     |
1799   0EE7 C3 35 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
1800   0EEA             
1801   0EEA             com_pcm_p1_ch0                          ; 54                    ' 80
1802   0EEA 0E 01                   LD      C, 1                ; C = prio              ' 7     |
1803   0EEC C3 35 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
1804   0EEF             
1805   0EEF             com_pcm_p2_ch0                          ; 58                    ' 80
1806   0EEF 0E 02                   LD      C, 2                ; C = prio              ' 7     |
1807   0EF1 C3 35 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
1808   0EF4             
1809   0EF4             com_pcm_p3_ch0                          ; 5C                    ' 80
1810   0EF4 0E 03                   LD      C, 3                ; C = prio              ' 7     |
1811   0EF6 C3 35 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
1812   0EF9             
1813   0EF9             com_pcm_p0_ch1                          ; 51                    ' 80
1814   0EF9 0E 00                   LD      C, 0                ; C = prio              ' 7     |
1815   0EFB C3 6A 0F                JP      com_pcm_ch1         ; execute PCM com       ' 10    | 17 (97)
1816   0EFE             
1817   0EFE             com_pcm_p1_ch1                          ; 55                    ' 80
1818   0EFE 0E 01                   LD      C, 1                ; C = prio              ' 7     |
1819   0F00 C3 35 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
1820   0F03             
1821   0F03             com_pcm_p2_ch1                          ; 59                    ' 80
1822   0F03 0E 02                   LD      C, 2                ; C = prio              ' 7     |
1823   0F05 C3 6A 0F                JP      com_pcm_ch1         ; execute PCM com       ' 10    | (119)
1824   0F08             
1825   0F08             com_pcm_p3_ch1                          ; 5D                    ' 80
1826   0F08 0E 03                   LD      C, 3                ; C = prio              ' 7     |
1827   0F0A C3 6A 0F                JP      com_pcm_ch1         ; execute PCM com       ' 10    | (119)
1828   0F0D             
1829   0F0D             com_pcm_p0_ch2                          ; 52                    ' 80
1830   0F0D 0E 00                   LD      C, 0                ; C = prio              ' 7     |
1831   0F0F C3 9F 0F                JP      com_pcm_ch2         ; execute PCM com       ' 10    | (119)
1832   0F12             
1833   0F12             com_pcm_p1_ch2                          ; 56                    ' 80
1834   0F12 0E 01                   LD      C, 1                ; C = prio              ' 7     |
1835   0F14 C3 9F 0F                JP      com_pcm_ch2         ; execute PCM com       ' 10    | (119)
1836   0F17             
1837   0F17             com_pcm_p2_ch2                          ; 5A                    ' 80
1838   0F17 0E 02                   LD      C, 2                ; C = prio              ' 7     |
1839   0F19 C3 9F 0F                JP      com_pcm_ch2         ; execute PCM com       ' 10    | (119)
1840   0F1C             
1841   0F1C             com_pcm_p3_ch2                          ; 5E                    ' 80
1842   0F1C 0E 03                   LD      C, 3                ; C = prio              ' 7     |
1843   0F1E C3 9F 0F                JP      com_pcm_ch2         ; execute PCM com       ' 10    | (119)
1844   0F21             
1845   0F21             com_pcm_p0_ch3                          ; 53                    ' 80
1846   0F21 0E 00                   LD      C, 0                ; C = prio              ' 7     |
1847   0F23 C3 D4 0F                JP      com_pcm_ch3         ; execute PCM com       ' 10    | (119)
1848   0F26             
1849   0F26             com_pcm_p1_ch3                          ; 57                    ' 80
1850   0F26 0E 01                   LD      C, 1                ; C = prio              ' 7     |
1851   0F28 C3 D4 0F                JP      com_pcm_ch3         ; execute PCM com       ' 10    | (119)
1852   0F2B             
1853   0F2B             com_pcm_p2_ch3                          ; 5B                    ' 80
1854   0F2B 0E 02                   LD      C, 2                ; C = prio              ' 7     |
1855   0F2D C3 D4 0F                JP      com_pcm_ch3         ; execute PCM com       ' 10    | (119)
1856   0F30             
1857   0F30             com_pcm_p3_ch3                          ; 5F                    ' 80
1858   0F30 0E 03                   LD      C, 3                ; C = prio              ' 7     |
1859   0F32 C3 D4 0F                JP      com_pcm_ch3         ; execute PCM com       ' 10    | (119)
1860   0F35             
1861   0F35             
1862   0F35             com_pcm_ch0                             ;                       ' 97
1863   0F35 CD 10 14                CALL    prepareXGMPCMCom    ; prepare PCM com       ' 17++  | (46)
1864   0F38             
1865   0F38                         handlePCMCommandXGM 0       ; handle command        ' 170   | (216)
1865   0F38 21 14 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (10)
1865   0F3B 79          >            LD      A, C                    ; A = new prio              ' 4     |
1865   0F3C BE          >            CP      (HL)                    ; compare new and old prio  ' 7     | 25 (35)
1865   0F3D 78          >            LD      A, B                    ; A = SFX id (max = $3F)    ' 4     |
1865   0F3E D2 50 0F    >            JP      NC, .play_new_wait      ; >= old prio --> play      ' 10    |
1865   0F41 B7          >            OR      A                       ; silent PCM ?              ' 4     |
1865   0F42 CA 54 0F    >            JP      Z, .play_new            ; always play               ' 10    | 14 (49)
1865   0F45 3E 06       >            LD      A, w            ; 7-2
1865   0F47 3D          >            DEC     A               ; 4
1865   0F48 20 FD       >            JR      NZ, .loop       ; 12
1865   0F4A ED 4F       >            LD      R, A
1865   0F4C 00          >            NOP
1865   0F4D C3 67 0F    >            JP      .end                    ;                           ' 10    | 121 (170)
1865   0F50 F6 00       >            OR      0                       ;                           ' 7     |
1865   0F52 F6 00       >            OR      0                       ; sync without changing A   ' 7     | 14 (49)
1865   0F54 71          >            LD      (HL), C                 ; set new prio              ' 7     | (56)
1865   0F55 26 1C       >            LD      H, (ID_TABLE>>8)        ;                           ' 7     |
1865   0F57 87          >            ADD     A                       ;                           ' 4     |
1865   0F58 87          >            ADD     A                       ;                           ' 4     | 19 (75)
1865   0F59 6F          >            LD      L, A                    ; HL point on new PCM addr  ' 4     |
1865   0F5A D5          >            PUSH    DE                      ; save DE                   ' 11    |
1865   0F5B 11 16 01    >            LD      DE, PCM_ADDR+(ch*8)     ; DE point on PCM info      ' 10    | 21 (96)
1865   0F5E ED A0       >            LDI                             ; copy params               ' 16    |
1865   0F60 ED A0       >            LDI                             ;                           ' 16    | 64 (160)
1865   0F62 ED A0       >            LDI                             ;                           ' 16    |
1865   0F64 ED A0       >            LDI                             ;                           ' 16    |
1865   0F66 D1          >            POP     DE                      ; restore DE                ' 10    | (170)
1866   0F67 C3 09 10                JP      com_pcm_done        ; done                  ' 10    |
1867   0F6A             
1868   0F6A             com_pcm_ch1                             ;                       ' 97
1869   0F6A CD 10 14                CALL    prepareXGMPCMCom    ; prepare PCM com       ' 17++  | (46)
1870   0F6D             
1871   0F6D                         handlePCMCommandXGM 1       ; handle command        ' 170   | (216)
1871   0F6D 21 1C 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (10)
1871   0F70 79          >            LD      A, C                    ; A = new prio              ' 4     |
1871   0F71 BE          >            CP      (HL)                    ; compare new and old prio  ' 7     | 25 (35)
1871   0F72 78          >            LD      A, B                    ; A = SFX id (max = $3F)    ' 4     |
1871   0F73 D2 85 0F    >            JP      NC, .play_new_wait      ; >= old prio --> play      ' 10    |
1871   0F76 B7          >            OR      A                       ; silent PCM ?              ' 4     |
1871   0F77 CA 89 0F    >            JP      Z, .play_new            ; always play               ' 10    | 14 (49)
1871   0F7A 3E 06       >            LD      A, w            ; 7-2
1871   0F7C 3D          >            DEC     A               ; 4
1871   0F7D 20 FD       >            JR      NZ, .loop       ; 12
1871   0F7F ED 4F       >            LD      R, A
1871   0F81 00          >            NOP
1871   0F82 C3 9C 0F    >            JP      .end                    ;                           ' 10    | 121 (170)
1871   0F85 F6 00       >            OR      0                       ;                           ' 7     |
1871   0F87 F6 00       >            OR      0                       ; sync without changing A   ' 7     | 14 (49)
1871   0F89 71          >            LD      (HL), C                 ; set new prio              ' 7     | (56)
1871   0F8A 26 1C       >            LD      H, (ID_TABLE>>8)        ;                           ' 7     |
1871   0F8C 87          >            ADD     A                       ;                           ' 4     |
1871   0F8D 87          >            ADD     A                       ;                           ' 4     | 19 (75)
1871   0F8E 6F          >            LD      L, A                    ; HL point on new PCM addr  ' 4     |
1871   0F8F D5          >            PUSH    DE                      ; save DE                   ' 11    |
1871   0F90 11 1E 01    >            LD      DE, PCM_ADDR+(ch*8)     ; DE point on PCM info      ' 10    | 21 (96)
1871   0F93 ED A0       >            LDI                             ; copy params               ' 16    |
1871   0F95 ED A0       >            LDI                             ;                           ' 16    | 64 (160)
1871   0F97 ED A0       >            LDI                             ;                           ' 16    |
1871   0F99 ED A0       >            LDI                             ;                           ' 16    |
1871   0F9B D1          >            POP     DE                      ; restore DE                ' 10    | (170)
1872   0F9C C3 09 10                JP      com_pcm_done        ; done                  ' 10    |
1873   0F9F             
1874   0F9F             com_pcm_ch2                             ;                       ' 97
1875   0F9F CD 10 14                CALL    prepareXGMPCMCom    ; prepare PCM com       ' 17++  | (46)
1876   0FA2             
1877   0FA2                         handlePCMCommandXGM 2       ; handle command        ' 170   | (216)
1877   0FA2 21 24 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (10)
1877   0FA5 79          >            LD      A, C                    ; A = new prio              ' 4     |
1877   0FA6 BE          >            CP      (HL)                    ; compare new and old prio  ' 7     | 25 (35)
1877   0FA7 78          >            LD      A, B                    ; A = SFX id (max = $3F)    ' 4     |
1877   0FA8 D2 BA 0F    >            JP      NC, .play_new_wait      ; >= old prio --> play      ' 10    |
1877   0FAB B7          >            OR      A                       ; silent PCM ?              ' 4     |
1877   0FAC CA BE 0F    >            JP      Z, .play_new            ; always play               ' 10    | 14 (49)
1877   0FAF 3E 06       >            LD      A, w            ; 7-2
1877   0FB1 3D          >            DEC     A               ; 4
1877   0FB2 20 FD       >            JR      NZ, .loop       ; 12
1877   0FB4 ED 4F       >            LD      R, A
1877   0FB6 00          >            NOP
1877   0FB7 C3 D1 0F    >            JP      .end                    ;                           ' 10    | 121 (170)
1877   0FBA F6 00       >            OR      0                       ;                           ' 7     |
1877   0FBC F6 00       >            OR      0                       ; sync without changing A   ' 7     | 14 (49)
1877   0FBE 71          >            LD      (HL), C                 ; set new prio              ' 7     | (56)
1877   0FBF 26 1C       >            LD      H, (ID_TABLE>>8)        ;                           ' 7     |
1877   0FC1 87          >            ADD     A                       ;                           ' 4     |
1877   0FC2 87          >            ADD     A                       ;                           ' 4     | 19 (75)
1877   0FC3 6F          >            LD      L, A                    ; HL point on new PCM addr  ' 4     |
1877   0FC4 D5          >            PUSH    DE                      ; save DE                   ' 11    |
1877   0FC5 11 26 01    >            LD      DE, PCM_ADDR+(ch*8)     ; DE point on PCM info      ' 10    | 21 (96)
1877   0FC8 ED A0       >            LDI                             ; copy params               ' 16    |
1877   0FCA ED A0       >            LDI                             ;                           ' 16    | 64 (160)
1877   0FCC ED A0       >            LDI                             ;                           ' 16    |
1877   0FCE ED A0       >            LDI                             ;                           ' 16    |
1877   0FD0 D1          >            POP     DE                      ; restore DE                ' 10    | (170)
1878   0FD1 C3 09 10                JP      com_pcm_done        ; done                  ' 10    |
1879   0FD4             
1880   0FD4             com_pcm_ch3                             ;                       ' 97
1881   0FD4 CD 10 14                CALL    prepareXGMPCMCom    ; prepare PCM com       ' 17++  | (46)
1882   0FD7             
1883   0FD7                         handlePCMCommandXGM 3       ; handle command        ' 170   | (216)
1883   0FD7 21 2C 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (10)
1883   0FDA 79          >            LD      A, C                    ; A = new prio              ' 4     |
1883   0FDB BE          >            CP      (HL)                    ; compare new and old prio  ' 7     | 25 (35)
1883   0FDC 78          >            LD      A, B                    ; A = SFX id (max = $3F)    ' 4     |
1883   0FDD D2 EF 0F    >            JP      NC, .play_new_wait      ; >= old prio --> play      ' 10    |
1883   0FE0 B7          >            OR      A                       ; silent PCM ?              ' 4     |
1883   0FE1 CA F3 0F    >            JP      Z, .play_new            ; always play               ' 10    | 14 (49)
1883   0FE4 3E 06       >            LD      A, w            ; 7-2
1883   0FE6 3D          >            DEC     A               ; 4
1883   0FE7 20 FD       >            JR      NZ, .loop       ; 12
1883   0FE9 ED 4F       >            LD      R, A
1883   0FEB 00          >            NOP
1883   0FEC C3 06 10    >            JP      .end                    ;                           ' 10    | 121 (170)
1883   0FEF F6 00       >            OR      0                       ;                           ' 7     |
1883   0FF1 F6 00       >            OR      0                       ; sync without changing A   ' 7     | 14 (49)
1883   0FF3 71          >            LD      (HL), C                 ; set new prio              ' 7     | (56)
1883   0FF4 26 1C       >            LD      H, (ID_TABLE>>8)        ;                           ' 7     |
1883   0FF6 87          >            ADD     A                       ;                           ' 4     |
1883   0FF7 87          >            ADD     A                       ;                           ' 4     | 19 (75)
1883   0FF8 6F          >            LD      L, A                    ; HL point on new PCM addr  ' 4     |
1883   0FF9 D5          >            PUSH    DE                      ; save DE                   ' 11    |
1883   0FFA 11 2E 01    >            LD      DE, PCM_ADDR+(ch*8)     ; DE point on PCM info      ' 10    | 21 (96)
1883   0FFD ED A0       >            LDI                             ; copy params               ' 16    |
1883   0FFF ED A0       >            LDI                             ;                           ' 16    | 64 (160)
1883   1001 ED A0       >            LDI                             ;                           ' 16    |
1883   1003 ED A0       >            LDI                             ;                           ' 16    |
1883   1005 D1          >            POP     DE                      ; restore DE                ' 10    | (170)
1884   1006 C3 09 10                JP      com_pcm_done        ; done                  ' 10    |
1885   1009             
1886   1009             com_pcm_done                            ;                       ' 216
1887   1009                         wait28                      ; sync                  ' 28    |
1887   1009 18 00       >            JR      .loop
1887   100B ED 4F       >            LD      R, A
1887   100D 1A          >            LD      A, (DE)
1888   100E C3 13 0A                JP      execute_xgm         ;                       ' 10    | 38 (254)
1889   1011             
1890   1011             
1891   1011             ; STATE command
1892   1011             ; -------------
1893   1011             
1894   1011             com_state_w0                            ; 60                    ' 80
1895   1011                         wait114                     ; sync                  ' 114   |
1895   1011 3E 07       >            LD      A, w            ; 7-2
1895   1013 3D          >            DEC     A               ; 4
1895   1014 20 FD       >            JR      NZ, .loop       ; 12
1896   1016 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 131 (211)
1897   1018 C3 56 11                JP      state_w0            ; execute               ' 10    |
1898   101B             
1899   101B             com_state_w1                            ; 61                    ' 80
1900   101B                         wait81                      ; sync                  ' 81    |
1900   101B 3E 04       >            LD      A, w            ; 7-2
1900   101D 3D          >            DEC     A               ; 4
1900   101E 20 FD       >            JR      NZ, .loop       ; 12
1900   1020 00          >            NOP
1900   1021 00          >            NOP
1900   1022 1A          >            LD      A, (DE)
1901   1023 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 98 (178)
1902   1025 C3 50 11                JP      state_w1            ; execute               ' 10    |
1903   1028             
1904   1028             com_state_w2                            ; 62                    ' 80
1905   1028                         wait48                      ; sync                  ' 48    |
1905   1028 ED 4F       >            LD      R, A
1905   102A ED 4F       >            LD      R, A
1905   102C ED 4F       >            LD      R, A
1905   102E ED 4F       >            LD      R, A
1905   1030 18 00       >            JR      .loop
1906   1032 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 65 (145)
1907   1034 C3 4A 11                JP      state_w2            ; execute               ' 10    |
1908   1037             
1909   1037             com_state_w3                            ; 63                    ' 80
1910   1037                         wait15                      ; sync                  ' 15    |
1910   1037 00          >            NOP
1910   1038 00          >            NOP
1910   1039 1A          >            LD      A, (DE)
1911   103A 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 32 (112)
1912   103C C3 44 11                JP      state_w3            ; execute               ' 10    |
1913   103F             
1914   103F             com_state_w4                            ; 64                    ' 80
1915   103F                         wait174                     ; sync                  ' 174   | (254)
1915   103F 3E 0A       >            LD      A, w            ; 7-2
1915   1041 3D          >            DEC     A               ; 4
1915   1042 20 FD       >            JR      NZ, .loop       ; 12
1915   1044 18 00       >            JR      .loop
1916   1046                         sampleOutput                ; sample output         ' 36    | (36)
1916   1046 D9          >            EXX                     ;                           ' 4     | 4
1916   1047 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1916   1048 03          >            INC     BC              ; increment read address    ' 6     |
1916   1049 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1916   104B 12          >            LD      (DE), A         ; play sample               ' 7     |
1916   104C D9          >            EXX                     ;                           ' 4     | (36)
1917   104D             
1918   104D                         wait26                      ; sync                  ' 26    |
1918   104D ED 4F       >            LD      R, A
1918   104F ED 4F       >            LD      R, A
1918   1051 00          >            NOP
1918   1052 00          >            NOP
1919   1053 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 43 (79)
1920   1055 C3 3E 11                JP      state_w4            ; execute               ' 10    |
1921   1058             
1922   1058             com_state_w5                            ; 65                    ' 80
1923   1058                         wait157                     ; sync                  ' 157   |
1923   1058 3E 09       >            LD      A, w            ; 7-2
1923   105A 3D          >            DEC     A               ; 4
1923   105B 20 FD       >            JR      NZ, .loop       ; 12
1923   105D 1A          >            LD      A, (DE)
1923   105E 00          >            NOP
1924   105F 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 174 (254)
1925   1061 C3 2E 11                JP      state_w5            ; execute               ' 10    |
1926   1064             
1927   1064             com_state_w6                            ; 66                    ' 80
1928   1064                         wait124                     ; sync                  ' 124   |
1928   1064 3E 07       >            LD      A, w            ; 7-2
1928   1066 3D          >            DEC     A               ; 4
1928   1067 20 FD       >            JR      NZ, .loop       ; 12
1928   1069 C3 6C 10    >            JP      .loop
1929   106C 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 141 (221)
1930   106E C3 28 11                JP      state_w6            ; execute               ' 10    |
1931   1071             
1932   1071             com_state_w7                            ; 67                    ' 80
1933   1071                         wait91                      ; sync                  ' 91    |
1933   1071 3E 05       >            LD      A, w            ; 7-2
1933   1073 3D          >            DEC     A               ; 4
1933   1074 20 FD       >            JR      NZ, .loop       ; 12
1933   1076 ED 4F       >            LD      R, A
1934   1078 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 108 (188)
1935   107A C3 22 11                JP      state_w7            ; execute               ' 10    |
1936   107D             
1937   107D             com_state_w8                            ; 68                    ' 80
1938   107D                         wait58                      ; sync                  ' 58    |
1938   107D 3E 03       >            LD      A, w            ; 7-2
1938   107F 3D          >            DEC     A               ; 4
1938   1080 20 FD       >            JR      NZ, .loop       ; 12
1938   1082 00          >            NOP
1938   1083 00          >            NOP
1939   1084 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 75 (155)
1940   1086 C3 1C 11                JP      state_w8            ; execute               ' 10    |
1941   1089             
1942   1089             com_state_w9                            ; 69                    ' 80
1943   1089                         wait25                      ; sync                  ' 25    |
1943   1089 ED 4F       >            LD      R, A
1943   108B ED 4F       >            LD      R, A
1943   108D 1A          >            LD      A, (DE)
1944   108E 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 42 (122)
1945   1090 C3 16 11                JP      state_w9            ; execute               ' 10    |
1946   1093             
1947   1093             com_state_wA                            ; 6A                    ' 80
1948   1093                         wait174                     ; sync                  ' 174   | (254)
1948   1093 3E 0A       >            LD      A, w            ; 7-2
1948   1095 3D          >            DEC     A               ; 4
1948   1096 20 FD       >            JR      NZ, .loop       ; 12
1948   1098 18 00       >            JR      .loop
1949   109A                         sampleOutput                ; sample output         ' 36    | (36)
1949   109A D9          >            EXX                     ;                           ' 4     | 4
1949   109B 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1949   109C 03          >            INC     BC              ; increment read address    ' 6     |
1949   109D CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1949   109F 12          >            LD      (DE), A         ; play sample               ' 7     |
1949   10A0 D9          >            EXX                     ;                           ' 4     | (36)
1950   10A1             
1951   10A1                         wait36                      ; sync                  ' 36    |
1951   10A1 ED 4F       >            LD      R, A
1951   10A3 ED 4F       >            LD      R, A
1951   10A5 ED 4F       >            LD      R, A
1951   10A7 ED 4F       >            LD      R, A
1952   10A9 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 53 (89)
1953   10AB C3 10 11                JP      state_wA            ; execute               ' 10    |
1954   10AE             
1955   10AE             com_state_wB                            ; 6B                    ' 80
1956   10AE                         wait157                     ; sync                  ' 157   |
1956   10AE 3E 09       >            LD      A, w            ; 7-2
1956   10B0 3D          >            DEC     A               ; 4
1956   10B1 20 FD       >            JR      NZ, .loop       ; 12
1956   10B3 1A          >            LD      A, (DE)
1956   10B4 00          >            NOP
1957   10B5 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 174 (254)
1958   10B7 C3 FF 10                JP      state_wB            ; execute               ' 10    |
1959   10BA             
1960   10BA             com_state_wC                            ; 6C                    ' 80
1961   10BA                         wait124                     ; sync                  ' 124   |
1961   10BA 3E 07       >            LD      A, w            ; 7-2
1961   10BC 3D          >            DEC     A               ; 4
1961   10BD 20 FD       >            JR      NZ, .loop       ; 12
1961   10BF C3 C2 10    >            JP      .loop
1962   10C2 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 141 (221)
1963   10C4 C3 F9 10                JP      state_wC            ; execute               ' 10    |
1964   10C7             
1965   10C7             com_state_wD                            ; 6D                    ' 80
1966   10C7                         wait91                      ; sync                  ' 91    |
1966   10C7 3E 05       >            LD      A, w            ; 7-2
1966   10C9 3D          >            DEC     A               ; 4
1966   10CA 20 FD       >            JR      NZ, .loop       ; 12
1966   10CC ED 4F       >            LD      R, A
1967   10CE 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 108 (188)
1968   10D0 C3 F3 10                JP      state_wD            ; execute               ' 10    |
1969   10D3             
1970   10D3             com_state_wE                            ; 6E                    ' 80
1971   10D3                         wait58                      ; sync                  ' 58    |
1971   10D3 3E 03       >            LD      A, w            ; 7-2
1971   10D5 3D          >            DEC     A               ; 4
1971   10D6 20 FD       >            JR      NZ, .loop       ; 12
1971   10D8 00          >            NOP
1971   10D9 00          >            NOP
1972   10DA 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 75 (155)
1973   10DC C3 ED 10                JP      state_wE            ; execute               ' 10    |
1974   10DF             
1975   10DF             com_state_wF                            ; 6F                    ' 80
1976   10DF                         wait35                      ; sync                  ' 35    |
1976   10DF 18 00       >            JR      .loop
1976   10E1 ED 4F       >            LD      R, A
1976   10E3 1A          >            LD      A, (DE)
1976   10E4 1A          >            LD      A, (DE)
1977   10E5 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 42 (122)
1978   10E7             
1979   10E7             state_wF                                ;                       ' 122
1980   10E7 1A                      LD      A, (DE)             ; A = state register    ' 7     |
1981   10E8 1C                      INC     E                   ; next data             ' 4     |
1982   10E9 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (155)
1983   10EA 1A                      LD      A, (DE)             ; A = state value       ' 7     |
1984   10EB 1C                      INC     E                   ; next data             ' 4     |
1985   10EC 77                      LD      (HL), A             ; write to save         ' 7     |
1986   10ED             
1987   10ED             state_wE
1988   10ED 1A                      LD      A, (DE)             ; A = state register    ' 7     |
1989   10EE 1C                      INC     E                   ; next data             ' 4     |
1990   10EF 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (188)
1991   10F0 1A                      LD      A, (DE)             ; A = state value       ' 7     |
1992   10F1 1C                      INC     E                   ; next data             ' 4     |
1993   10F2 77                      LD      (HL), A             ; write to save         ' 7     |
1994   10F3             
1995   10F3             state_wD
1996   10F3 1A                      LD      A, (DE)             ; A = state register    ' 7     |
1997   10F4 1C                      INC     E                   ; next data             ' 4     |
1998   10F5 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (221)
1999   10F6 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2000   10F7 1C                      INC     E                   ; next data             ' 4     |
2001   10F8 77                      LD      (HL), A             ; write to save         ' 7     |
2002   10F9             
2003   10F9             state_wC
2004   10F9 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2005   10FA 1C                      INC     E                   ; next data             ' 4     |
2006   10FB 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (254)
2007   10FC 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2008   10FD 1C                      INC     E                   ; next data             ' 4     |
2009   10FE 77                      LD      (HL), A             ; write to save         ' 7     |
2010   10FF             
2011   10FF             state_wB
2012   10FF                         sampleOutput                ; sample output         ' 36    |
2012   10FF D9          >            EXX                     ;                           ' 4     | 4
2012   1100 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2012   1101 03          >            INC     BC              ; increment read address    ' 6     |
2012   1102 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2012   1104 12          >            LD      (DE), A         ; play sample               ' 7     |
2012   1105 D9          >            EXX                     ;                           ' 4     | (36)
2013   1106                         wait20                      ; wait                  ' 20    | (56)
2013   1106 1A          >            LD      A, (DE)
2013   1107 00          >            NOP
2013   1108 ED 4F       >            LD      R, A
2014   110A             
2015   110A 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2016   110B 1C                      INC     E                   ; next data             ' 4     |
2017   110C 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (89)
2018   110D 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2019   110E 1C                      INC     E                   ; next data             ' 4     |
2020   110F 77                      LD      (HL), A             ; write to save         ' 7     |
2021   1110             
2022   1110             state_wA
2023   1110 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2024   1111 1C                      INC     E                   ; next data             ' 4     |
2025   1112 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (122)
2026   1113 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2027   1114 1C                      INC     E                   ; next data             ' 4     |
2028   1115 77                      LD      (HL), A             ; write to save         ' 7     |
2029   1116             
2030   1116             state_w9
2031   1116 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2032   1117 1C                      INC     E                   ; next data             ' 4     |
2033   1118 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (155)
2034   1119 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2035   111A 1C                      INC     E                   ; next data             ' 4     |
2036   111B 77                      LD      (HL), A             ; write to save         ' 7     |
2037   111C             
2038   111C             state_w8
2039   111C 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2040   111D 1C                      INC     E                   ; next data             ' 4     |
2041   111E 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (188)
2042   111F 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2043   1120 1C                      INC     E                   ; next data             ' 4     |
2044   1121 77                      LD      (HL), A             ; write to save         ' 7     |
2045   1122             
2046   1122             state_w7
2047   1122 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2048   1123 1C                      INC     E                   ; next data             ' 4     |
2049   1124 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (221)
2050   1125 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2051   1126 1C                      INC     E                   ; next data             ' 4     |
2052   1127 77                      LD      (HL), A             ; write to save         ' 7     |
2053   1128             
2054   1128             state_w6
2055   1128 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2056   1129 1C                      INC     E                   ; next data             ' 4     |
2057   112A 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (254)
2058   112B 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2059   112C 1C                      INC     E                   ; next data             ' 4     |
2060   112D 77                      LD      (HL), A             ; write to save         ' 7     |
2061   112E             
2062   112E             state_w5
2063   112E                         sampleOutput                ; sample output         ' 36    |
2063   112E D9          >            EXX                     ;                           ' 4     | 4
2063   112F 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2063   1130 03          >            INC     BC              ; increment read address    ' 6     |
2063   1131 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2063   1133 12          >            LD      (DE), A         ; play sample               ' 7     |
2063   1134 D9          >            EXX                     ;                           ' 4     | (36)
2064   1135                         wait10                      ; wait                  ' 10    | (46)
2064   1135 C3 38 11    >            JP      .loop
2065   1138             
2066   1138 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2067   1139 1C                      INC     E                   ; next data             ' 4     |
2068   113A 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (79)
2069   113B 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2070   113C 1C                      INC     E                   ; next data             ' 4     |
2071   113D 77                      LD      (HL), A             ; write to save         ' 7     |
2072   113E             
2073   113E             state_w4
2074   113E 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2075   113F 1C                      INC     E                   ; next data             ' 4     |
2076   1140 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (112)
2077   1141 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2078   1142 1C                      INC     E                   ; next data             ' 4     |
2079   1143 77                      LD      (HL), A             ; write to save         ' 7     |
2080   1144             
2081   1144             state_w3
2082   1144 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2083   1145 1C                      INC     E                   ; next data             ' 4     |
2084   1146 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (145)
2085   1147 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2086   1148 1C                      INC     E                   ; next data             ' 4     |
2087   1149 77                      LD      (HL), A             ; write to save         ' 7     |
2088   114A             
2089   114A             state_w2
2090   114A 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2091   114B 1C                      INC     E                   ; next data             ' 4     |
2092   114C 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (178)
2093   114D 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2094   114E 1C                      INC     E                   ; next data             ' 4     |
2095   114F 77                      LD      (HL), A             ; write to save         ' 7     |
2096   1150             
2097   1150             state_w1
2098   1150 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2099   1151 1C                      INC     E                   ; next data             ' 4     |
2100   1152 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (211)
2101   1153 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2102   1154 1C                      INC     E                   ; next data             ' 4     |
2103   1155 77                      LD      (HL), A             ; write to save         ' 7     |
2104   1156             
2105   1156             state_w0
2106   1156 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2107   1157 1C                      INC     E                   ; next data             ' 4     |
2108   1158 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (244)
2109   1159 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2110   115A 1C                      INC     E                   ; next data             ' 4     |
2111   115B 77                      LD      (HL), A             ; write to save         ' 7     |
2112   115C             
2113   115C C3 13 0A                JP      execute_xgm         ;                       ' 10    | (254)
2114   115F             
2115   115F             
2116   115F             ; NULL command
2117   115F             ; ------------
2118   115F             
2119   115F             com_null                                ; 01-0F / 60-7D         ' 80
2120   115F                         wait164                     ; sync                  ' 164   |
2120   115F 3E 09       >            LD      A, w            ; 7-2
2120   1161 3D          >            DEC     A               ; 4
2120   1162 20 FD       >            JR      NZ, .loop       ; 12
2120   1164 ED 4F       >            LD      R, A
2120   1166 ED 4F       >            LD      R, A
2121   1168 C3 13 0A                JP      execute_xgm         ;                       ' 10    | 174 (254)
2122   116B             
2123   116B             
2124   116B             ; LOOP command
2125   116B             ; ------------
2126   116B             
2127   116B             com_loop                                ; FE                        ' 80
2128   116B 1A                      LD      A, (DE)             ; A = loop addr b7-b0       ' 7     |
2129   116C 6F                      LD      L, A                ; L = loop addr b7-b0       ' 4     |
2130   116D 1C                      INC     E                   ; next param                ' 4     |
2131   116E 1A                      LD      A, (DE)             ; A = loop addr b15-b8      ' 7     | 30 (110)
2132   116F 67                      LD      H, A                ; HL = loop addr b15-b0     ' 4     |
2133   1170 1C                      INC     E                   ; next param                ' 4     |
2134   1171             
2135   1171 ED 4B 04 01             LD      BC, (XGM_ARG_A+0)   ; BC = XGM base addr (ML)   ' 20    |
2136   1175 09                      ADD     HL, BC              ; HL = XGM base addr + loop ' 11    | 47 (157)
2137   1176 22 34 01                LD      (XGM_ADDR+0), HL    ; set new XGM addr (ML)     ' 16    |
2138   1179             
2139   1179 1A                      LD      A, (DE)             ; A = loop addr b7-b0       ' 7     |
2140   117A 21 06 01                LD      HL, XGM_ARG_A+2     ; HL point XGM base adr H   ' 10    |
2141   117D 8E                      ADC     (HL)                ; A = XGM base addr + loop  ' 7     | 41 (198)
2142   117E 1C                      INC     E                   ; next param                ' 4     |
2143   117F 32 36 01                LD      (XGM_ADDR+2), A     ; set new XGM addr (H)      ' 13    |
2144   1182             
2145   1182                         wait46                      ; sync                      ' 46    |
2145   1182 3E 02       >            LD      A, w            ; 7-2
2145   1184 3D          >            DEC     A               ; 4
2145   1185 20 FD       >            JR      NZ, .loop       ; 12
2145   1187 18 00       >            JR      .loop
2146   1189 C3 13 0A                JP      execute_xgm         ;                           ' 10    | 56 (254)
2147   118C             
2148   118C             
2149   118C             ; END XGM command
2150   118C             ; ---------------
2151   118C             
2152   118C             com_end                                 ; FF                    ' 80
2153   118C 21 02 01                LD      HL, STATUS          ; HL = STATUS           ' 10    | 25 (105)
2154   118F CB B6                   RES     XGM_PLAY_SFT, (HL)  ; clear play status     ' 15    |
2155   1191             
2156   1191                         wait139                     ; sync                  ' 139   |
2156   1191 3E 08       >            LD      A, w            ; 7-2
2156   1193 3D          >            DEC     A               ; 4
2156   1194 20 FD       >            JR      NZ, .loop       ; 12
2156   1196 ED 4F       >            LD      R, A
2157   1198 C3 13 0A                JP      execute_xgm         ;                       ' 10    | 149 (254)
2158   119B             
2159   119B             ; $B9+X+Y
2160   119B             xgm_done                            ;                       ' 90
2161   119B FD 2D                   DEC     IYL             ; no more vint to do ?  ' 8     |
2162   119D CA AD 11                JP      Z, external_com ; execute extern com    ' 10    | 18 (108)
2163   11A0             
2164   11A0                         wait136                 ; sync                  ' 136   |
2164   11A0 3E 07       >            LD      A, w            ; 7-2
2164   11A2 3D          >            DEC     A               ; 4
2164   11A3 20 FD       >            JR      NZ, .loop       ; 12
2164   11A5 ED 4F       >            LD      R, A
2164   11A7 ED 4F       >            LD      R, A
2164   11A9 00          >            NOP
2165   11AA C3 C9 07                JP      prepare_xgm     ; continue xgm process  ' 10    | 146 (254)
2166   11AD             
2167   11AD             
2168   11AD             
2169   11AD             ; execute external command
2170   11AD             ; ------------------------
2171   11AD             
2172   11AD             ; $B9+X+Y
2173   11AD             external_com                            ;                           ' 108
2174   11AD 21 00 01                LD      HL, COMMAND         ; HL point on COMMAND       ' 10    | (118)
2175   11B0             
2176   11B0             .chk_xgm_play
2177   11B0 CB 76                   BIT     XGM_PLAY_SFT, (HL)  ; play XGM command ?        ' 12    |
2178   11B2 CA CD 11                JP      Z, .chk_xgm_resume  ;                           ' 10    | 22 (140)
2179   11B5             
2180   11B5 CB B6                   RES     XGM_PLAY_SFT, (HL)  ; clear command             ' 15    |
2181   11B7 2C                      INC     L                   ;                           ' 4     |
2182   11B8 2C                      INC     L                   ; HL point on status        ' 4     | 38 (178)
2183   11B9 CB F6                   SET     XGM_PLAY_SFT, (HL)  ; set play status           ' 15    |
2184   11BB             
2185   11BB 2A 04 01                LD      HL, (XGM_ARG_A)     ; set new XGM address       ' 16    |
2186   11BE 22 34 01                LD      (XGM_ADDR), HL      ;                           ' 16    | 58 (236)
2187   11C1 3A 06 01                LD      A, (XGM_ARG_A+2)    ;                           ' 13    |
2188   11C4 32 36 01                LD      (XGM_ADDR+2),A      ;                           ' 13    |
2189   11C7             
2190   11C7 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2191   11CA C3 6A 12                JP      external_com_pcm    ; do PCM commands           ' 10    | (254+2)
2192   11CD                                                     ; +2 cycles here, ignore
2193   11CD             
2194   11CD             .chk_xgm_resume
2195   11CD CB 6E                   BIT     XGM_RESUME_SFT, (HL)    ; play XGM command ?    ' 12    |
2196   11CF CA F3 11                JP      Z, .chk_xgm_stop        ;                       ' 10    | 22 (162)
2197   11D2             
2198   11D2 CB AE                   RES     XGM_RESUME_SFT, (HL)    ; clear command         ' 15    |
2199   11D4 2C                      INC     L                       ;                       ' 4     |
2200   11D5 2C                      INC     L                       ; HL point on status    ' 4     | 38 (200)
2201   11D6 CB F6                   SET     XGM_PLAY_SFT, (HL)      ; set play status       ' 15    |
2202   11D8             
2203   11D8 11 44 01                LD      DE, YM_RR_SAV       ; DE point on save state    ' 10    |
2204   11DB                         wait44                      ; sync                      ' 44    | 54 (254)
2204   11DB 3E 02       >            LD      A, w            ; 7-2
2204   11DD 3D          >            DEC     A               ; 4
2204   11DE 20 FD       >            JR      NZ, .loop       ; 12
2204   11E0 C3 E3 11    >            JP      .loop
2205   11E3             
2206   11E3 CD 23 14                CALL    loadState           ; load state                ' 140+  | (140)
2207   11E6             
2208   11E6                         wait94                      ; sync                      ' 94    |
2208   11E6 3E 05       >            LD      A, w            ; 7-2
2208   11E8 3D          >            DEC     A               ; 4
2208   11E9 20 FD       >            JR      NZ, .loop       ; 12
2208   11EB 18 00       >            JR      .loop
2209   11ED 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    | 114 (254)
2210   11F0 C3 6A 12                JP      external_com_pcm    ; do PCM commands           ' 10    |
2211   11F3             
2212   11F3             .chk_xgm_stop
2213   11F3 CB 66                   BIT     XGM_STOP_SFT, (HL)  ; stop XGM command ?        ' 12    |
2214   11F5 CA 5F 12                JP      Z, .chk_pcm0_pre    ;                           ' 10    | 22 (184)
2215   11F8             
2216   11F8 CB A6                   RES     XGM_STOP_SFT, (HL)  ; clear command             ' 15    |
2217   11FA 2C                      INC     L                   ;                           ' 4     |
2218   11FB 2C                      INC     L                   ; HL point on status        ' 4     | 38 (222)
2219   11FC CB B6                   RES     XGM_PLAY_SFT, (HL)  ; clear play status         ' 15    |
2220   11FE             
2221   11FE 11 64 01                LD      DE, YM_RR_OFF       ; DE point on off state     ' 10    |
2222   1201                         wait22                      ; sync                      ' 22    | 32 (254)
2222   1201 ED 4F       >            LD      R, A
2222   1203 ED 4F       >            LD      R, A
2222   1205 00          >            NOP
2223   1206             
2224   1206 CD 23 14                CALL    loadState           ; stop music                ' 140+  | (140)
2225   1209             
2226   1209 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0      ' 10    |
2227   120C 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1      ' 10    | 20 (160)
2228   120F             
2229   120F 36 28                   LD      (HL), $28           ; set reg num to YM         ' 10    |
2230   1211                         waitYMReady                 ; wait YM to be ready       ' 22    | 32 (192)
2230   1211 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2230   1213 C2 11 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2231   1216             
2232   1216 AF                      XOR     A                   ; A = $00                   ' 4     |
2233   1217 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2234   1218 3C                      INC     A                   ; A = $01                   ' 4     | 37 (229)
2235   1219                         waitYMReady                 ; wait YM to be ready       ' 22    |
2235   1219 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2235   121B C2 19 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2236   121E             
2237   121E 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2238   121F                         waitYMReady                 ; wait YM to be ready       ' 22    | 29 (254+4)
2238   121F CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2238   1221 C2 1F 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2239   1224             
2240   1224                         sampleOutputSafe            ; *** sample output ****    ' 46    | (46+4)
2240   1224 D9          >            EXX                     ;                           ' 4     | 4
2240   1225 36 2A       >            LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
2240   1227 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2240   1228 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
2240   1229 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
2240   122B 12          >            LD      (DE), A         ; play sample               ' 7     |
2240   122C D9          >            EXX                     ;                           ' 4     | (46)
2241   122D             
2242   122D                         waitYMReady                 ; wait YM to be ready       ' 22    |
2242   122D CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2242   122F C2 2D 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2243   1232 36 28                   LD      (HL), $28           ; set reg num to YM         ' 10    |
2244   1234 3E 02                   LD      A, $02              ; A = $02                   ' 7     | 61 (111)
2245   1236                         waitYMReady                 ; wait YM to be ready       ' 22    |
2245   1236 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2245   1238 C2 36 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2246   123B             
2247   123B 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2248   123C C6 02                   ADD     $2                  ; A = $04                   ' 7     | 36 (147)
2249   123E                         waitYMReady                 ; wait YM to be ready       ' 22    |
2249   123E CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2249   1240 C2 3E 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2250   1243             
2251   1243 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2252   1244 3C                      INC     A                   ; A = $05                   ' 4     | 33 (180)
2253   1245                         waitYMReady                 ; wait YM to be ready       ' 22    |
2253   1245 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2253   1247 C2 45 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2254   124A             
2255   124A 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2256   124B 3C                      INC     A                   ; A = $06                   ' 4     | 33 (213)
2257   124C                         waitYMReady                 ; wait YM to be ready       ' 22    |
2257   124C CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2257   124E C2 4C 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2258   1251             
2259   1251 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2260   1252                         waitYMReady                 ; wait YM to be ready       ' 22    | 39 (252)
2260   1252 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2260   1254 C2 52 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2261   1257 36 2A                   LD      (HL), $2A           ; restore DAC write         ' 10    |
2262   1259             
2263   1259 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2264   125C C3 6A 12                JP      external_com_pcm    ; continue                  ' 10    | 20 (254+18)
2265   125F                                                     ; +18 cycles here, ignore
2266   125F             
2267   125F             .chk_pcm0_pre                           ;                           ' 184
2268   125F 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2269   1262                         wait60                      ; sync                      ' 70    | 254
2269   1262 3E 03       >            LD      A, w            ; 7-2
2269   1264 3D          >            DEC     A               ; 4
2269   1265 20 FD       >            JR      NZ, .loop       ; 12
2269   1267 C3 6A 12    >            JP      .loop
2270   126A             
2271   126A             ; $BA+X+Y
2272   126A             external_com_pcm
2273   126A                         sampleOutput                ; *** sample output ****    ' 36    | (36)
2273   126A D9          >            EXX                     ;                           ' 4     | 4
2273   126B 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2273   126C 03          >            INC     BC              ; increment read address    ' 6     |
2273   126D CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2273   126F 12          >            LD      (DE), A         ; play sample               ' 7     |
2273   1270 D9          >            EXX                     ;                           ' 4     | (36)
2274   1271             
2275   1271             .chk_pcm0
2276   1271 CB 46                   BIT     CH0_SFT, (HL)       ; play PCM0 command ?       ' 12    |
2277   1273 CA B6 12                JP      Z, .chk_pcm1        ;                           ' 10    | 22 (58)
2278   1276             
2279   1276 CB 86                   RES     CH0_SFT, (HL)       ; clear command             ' 15    |
2280   1278 2C                      INC     L                   ;                           ' 4     |
2281   1279 2C                      INC     L                   ; HL point on status        ' 4     | 38 (96)
2282   127A CB C6                   SET     CH0_SFT, (HL)       ; set play status           ' 15    |
2283   127C             
2284   127C                         handlePCMCommand 0          ; handle play PCM command   ' 173   | (269)
2284   127C ED 4B 08 01 >            LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
2284   1280 21 14 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
2284   1283 79          >            LD      A, C                    ; A = new prio              ' 4     |
2284   1284 BE          >            CP      (HL)                    ; compare to old prio       ' 7     |
2284   1285 78          >            LD      A, B                    ; A = SFX id                ' 4     | 25 (55)
2284   1286 D2 97 12    >            JP      NC, .play_new_wait      ; >= old prio --> play      ' 10    |
2284   1289 B7          >            OR      A                       ; silent PCM ?              ' 4     |
2284   128A CA 9B 12    >            JP      Z, .play_new            ; always play               ' 10    | 14 (69)
2284   128D 3E 05       >            LD      A, w            ; 7-2
2284   128F 3D          >            DEC     A               ; 4
2284   1290 20 FD       >            JR      NZ, .loop       ; 12
2284   1292 18 00       >            JR      .loop
2284   1294 C3 AC 12    >            JP      .end                    ;                           ' 10    | 88 (173)
2284   1297 00          >            NOP                             ;                           ' 4     |
2284   1298 C3 9B 12    >            JP      .play_new               ; sync                      ' 10    | 14 (69)
2284   129B 71          >            LD      (HL), C                 ; set new prio              ' 7     | (76)
2284   129C 26 07       >            LD      H, (ID_TABLE>>10)       ;                           ' 7     |
2284   129E 6F          >            LD      L, A                    ;                           ' 4     |
2284   129F 29          >            ADD     HL, HL                  ;                           ' 6     | 33 (109)
2284   12A0 29          >            ADD     HL, HL                  ; HL point on new PCM addr  ' 6     |
2284   12A1 11 16 01    >            LD      DE, PCM_ADDR+(ch*8)     ; DE point on PCM info      ' 10    |
2284   12A4 ED A0       >            LDI                             ; copy params               ' 16    |
2284   12A6 ED A0       >            LDI                             ;                           ' 16    | 64 (173)
2284   12A8 ED A0       >            LDI                             ;                           ' 16    |
2284   12AA ED A0       >            LDI                             ;                           ' 16    |
2285   12AC                         sampleOutput                ; *** sample output ****    ' 36    | (36+15)
2285   12AC D9          >            EXX                     ;                           ' 4     | 4
2285   12AD 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2285   12AE 03          >            INC     BC              ; increment read address    ' 6     |
2285   12AF CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2285   12B1 12          >            LD      (DE), A         ; play sample               ' 7     |
2285   12B2 D9          >            EXX                     ;                           ' 4     | (36)
2286   12B3 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    | (61)
2287   12B6                                                     ; +3 cycles here, ignore
2288   12B6             
2289   12B6             .chk_pcm1
2290   12B6 CB 4E                   BIT     CH1_SFT, (HL)       ; play PCM1 command ?       ' 12    |
2291   12B8 CA FB 12                JP      Z, .chk_pcm2        ;                           ' 10    | 22 (80)
2292   12BB             
2293   12BB CB 8E                   RES     CH1_SFT, (HL)       ; clear command             ' 15    |
2294   12BD 2C                      INC     L                   ;                           ' 4     |
2295   12BE 2C                      INC     L                   ; HL point on status        ' 4     | 38 (118)
2296   12BF CB CE                   SET     CH1_SFT, (HL)       ; set play status           ' 15    |
2297   12C1             
2298   12C1                         handlePCMCommand 1          ; handle play PCM command   ' 173   | (291)
2298   12C1 ED 4B 0A 01 >            LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
2298   12C5 21 1C 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
2298   12C8 79          >            LD      A, C                    ; A = new prio              ' 4     |
2298   12C9 BE          >            CP      (HL)                    ; compare to old prio       ' 7     |
2298   12CA 78          >            LD      A, B                    ; A = SFX id                ' 4     | 25 (55)
2298   12CB D2 DC 12    >            JP      NC, .play_new_wait      ; >= old prio --> play      ' 10    |
2298   12CE B7          >            OR      A                       ; silent PCM ?              ' 4     |
2298   12CF CA E0 12    >            JP      Z, .play_new            ; always play               ' 10    | 14 (69)
2298   12D2 3E 05       >            LD      A, w            ; 7-2
2298   12D4 3D          >            DEC     A               ; 4
2298   12D5 20 FD       >            JR      NZ, .loop       ; 12
2298   12D7 18 00       >            JR      .loop
2298   12D9 C3 F1 12    >            JP      .end                    ;                           ' 10    | 88 (173)
2298   12DC 00          >            NOP                             ;                           ' 4     |
2298   12DD C3 E0 12    >            JP      .play_new               ; sync                      ' 10    | 14 (69)
2298   12E0 71          >            LD      (HL), C                 ; set new prio              ' 7     | (76)
2298   12E1 26 07       >            LD      H, (ID_TABLE>>10)       ;                           ' 7     |
2298   12E3 6F          >            LD      L, A                    ;                           ' 4     |
2298   12E4 29          >            ADD     HL, HL                  ;                           ' 6     | 33 (109)
2298   12E5 29          >            ADD     HL, HL                  ; HL point on new PCM addr  ' 6     |
2298   12E6 11 1E 01    >            LD      DE, PCM_ADDR+(ch*8)     ; DE point on PCM info      ' 10    |
2298   12E9 ED A0       >            LDI                             ; copy params               ' 16    |
2298   12EB ED A0       >            LDI                             ;                           ' 16    | 64 (173)
2298   12ED ED A0       >            LDI                             ;                           ' 16    |
2298   12EF ED A0       >            LDI                             ;                           ' 16    |
2299   12F1                         sampleOutput                ; *** sample output ****    ' 36    | (36+37)
2299   12F1 D9          >            EXX                     ;                           ' 4     | 4
2299   12F2 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2299   12F3 03          >            INC     BC              ; increment read address    ' 6     |
2299   12F4 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2299   12F6 12          >            LD      (DE), A         ; play sample               ' 7     |
2299   12F7 D9          >            EXX                     ;                           ' 4     | (36)
2300   12F8 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    | (83)
2301   12FB                                                     ; +3 cycles here, ignore
2302   12FB             
2303   12FB             .chk_pcm2
2304   12FB CB 56                   BIT     CH2_SFT, (HL)       ; play PCM2 command ?       ' 12    |
2305   12FD CA 40 13                JP      Z, .chk_pcm3        ;                           ' 10    | 22 (102)
2306   1300             
2307   1300 CB 96                   RES     CH2_SFT, (HL)       ; clear command             ' 15    |
2308   1302 2C                      INC     L                   ;                           ' 4     |
2309   1303 2C                      INC     L                   ; HL point on status        ' 4     | 38 (140)
2310   1304 CB D6                   SET     CH2_SFT, (HL)       ; set play status           ' 15    |
2311   1306             
2312   1306                         handlePCMCommand 2          ; handle play PCM command   ' 173   | (313)
2312   1306 ED 4B 0C 01 >            LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
2312   130A 21 24 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
2312   130D 79          >            LD      A, C                    ; A = new prio              ' 4     |
2312   130E BE          >            CP      (HL)                    ; compare to old prio       ' 7     |
2312   130F 78          >            LD      A, B                    ; A = SFX id                ' 4     | 25 (55)
2312   1310 D2 21 13    >            JP      NC, .play_new_wait      ; >= old prio --> play      ' 10    |
2312   1313 B7          >            OR      A                       ; silent PCM ?              ' 4     |
2312   1314 CA 25 13    >            JP      Z, .play_new            ; always play               ' 10    | 14 (69)
2312   1317 3E 05       >            LD      A, w            ; 7-2
2312   1319 3D          >            DEC     A               ; 4
2312   131A 20 FD       >            JR      NZ, .loop       ; 12
2312   131C 18 00       >            JR      .loop
2312   131E C3 36 13    >            JP      .end                    ;                           ' 10    | 88 (173)
2312   1321 00          >            NOP                             ;                           ' 4     |
2312   1322 C3 25 13    >            JP      .play_new               ; sync                      ' 10    | 14 (69)
2312   1325 71          >            LD      (HL), C                 ; set new prio              ' 7     | (76)
2312   1326 26 07       >            LD      H, (ID_TABLE>>10)       ;                           ' 7     |
2312   1328 6F          >            LD      L, A                    ;                           ' 4     |
2312   1329 29          >            ADD     HL, HL                  ;                           ' 6     | 33 (109)
2312   132A 29          >            ADD     HL, HL                  ; HL point on new PCM addr  ' 6     |
2312   132B 11 26 01    >            LD      DE, PCM_ADDR+(ch*8)     ; DE point on PCM info      ' 10    |
2312   132E ED A0       >            LDI                             ; copy params               ' 16    |
2312   1330 ED A0       >            LDI                             ;                           ' 16    | 64 (173)
2312   1332 ED A0       >            LDI                             ;                           ' 16    |
2312   1334 ED A0       >            LDI                             ;                           ' 16    |
2313   1336                         sampleOutput                ; *** sample output ****    ' 36    | (36+59)
2313   1336 D9          >            EXX                     ;                           ' 4     | 4
2313   1337 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2313   1338 03          >            INC     BC              ; increment read address    ' 6     |
2313   1339 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2313   133B 12          >            LD      (DE), A         ; play sample               ' 7     |
2313   133C D9          >            EXX                     ;                           ' 4     | (36)
2314   133D 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    | (105)
2315   1340                                                     ; +3 cycles here, ignore
2316   1340             
2317   1340             .chk_pcm3
2318   1340 CB 5E                   BIT     CH3_SFT, (HL)       ; play PCM3 command ?       ' 12    |
2319   1342 CA 83 13                JP      Z, frame_end        ;                           ' 10    | 22 (124)
2320   1345             
2321   1345 CB 9E                   RES     CH3_SFT, (HL)       ; clear command             ' 15    |
2322   1347 2C                      INC     L                   ;                           ' 4     |
2323   1348 2C                      INC     L                   ; HL point on status        ' 4     | 38 (162)
2324   1349 CB DE                   SET     CH3_SFT, (HL)       ; set play status           ' 15    |
2325   134B             
2326   134B                         handlePCMCommand 3          ; handle play PCM command   ' 173   | (335)
2326   134B ED 4B 0E 01 >            LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
2326   134F 21 2C 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
2326   1352 79          >            LD      A, C                    ; A = new prio              ' 4     |
2326   1353 BE          >            CP      (HL)                    ; compare to old prio       ' 7     |
2326   1354 78          >            LD      A, B                    ; A = SFX id                ' 4     | 25 (55)
2326   1355 D2 66 13    >            JP      NC, .play_new_wait      ; >= old prio --> play      ' 10    |
2326   1358 B7          >            OR      A                       ; silent PCM ?              ' 4     |
2326   1359 CA 6A 13    >            JP      Z, .play_new            ; always play               ' 10    | 14 (69)
2326   135C 3E 05       >            LD      A, w            ; 7-2
2326   135E 3D          >            DEC     A               ; 4
2326   135F 20 FD       >            JR      NZ, .loop       ; 12
2326   1361 18 00       >            JR      .loop
2326   1363 C3 7B 13    >            JP      .end                    ;                           ' 10    | 88 (173)
2326   1366 00          >            NOP                             ;                           ' 4     |
2326   1367 C3 6A 13    >            JP      .play_new               ; sync                      ' 10    | 14 (69)
2326   136A 71          >            LD      (HL), C                 ; set new prio              ' 7     | (76)
2326   136B 26 07       >            LD      H, (ID_TABLE>>10)       ;                           ' 7     |
2326   136D 6F          >            LD      L, A                    ;                           ' 4     |
2326   136E 29          >            ADD     HL, HL                  ;                           ' 6     | 33 (109)
2326   136F 29          >            ADD     HL, HL                  ; HL point on new PCM addr  ' 6     |
2326   1370 11 2E 01    >            LD      DE, PCM_ADDR+(ch*8)     ; DE point on PCM info      ' 10    |
2326   1373 ED A0       >            LDI                             ; copy params               ' 16    |
2326   1375 ED A0       >            LDI                             ;                           ' 16    | 64 (173)
2326   1377 ED A0       >            LDI                             ;                           ' 16    |
2326   1379 ED A0       >            LDI                             ;                           ' 16    |
2327   137B                         sampleOutput                ; *** sample output ****    ' 36    | (36+81)
2327   137B D9          >            EXX                     ;                           ' 4     | 4
2327   137C 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2327   137D 03          >            INC     BC              ; increment read address    ' 6     |
2327   137E CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2327   1380 12          >            LD      (DE), A         ; play sample               ' 7     |
2327   1381 D9          >            EXX                     ;                           ' 4     | (36)
2328   1382                         wait7                       ; sync                      ' 7     | (124)
2328   1382 1A          >            LD      A, (DE)
2329   1383             
2330   1383             
2331   1383             ; frame done (we should be <= 0xE8 to respect frame time here)
2332   1383             ; So median (X+Y+Z) should be <= 0x2E (<= 46) else we are running out of time !
2333   1383             ; ----------------------------------------------------------------------------
2334   1383             
2335   1383             ; $BA+X+Y+Z
2336   1383             frame_end                               ;                       ' 124
2337   1383             
2338   1383                         wait39                      ; sync                  ' 39    | (163)
2338   1383 ED 4F       >            LD      R, A
2338   1385 ED 4F       >            LD      R, A
2338   1387 ED 4F       >            LD      R, A
2338   1389 18 00       >            JR      .loop
2339   138B             
2340   138B FD 7D                   LD      A, IYL              ;                       ' 8     |
2341   138D 32 62 01                LD      (VINT_OVER), A      ; keep trace of it      ' 13    |
2342   1390 B7                      OR      A                   ; vint happened ?       ' 4     | 35 (198)
2343   1391 C2 A5 13                JP      NZ, .vint_happened  ; go to ext command     ' 10    |
2344   1394             
2345   1394 ED 5B 38 01             LD      DE, (WRITEBUF)      ; DE = write buf        ' 20    |
2346   1398                         compareReadWrite            ;                       ' 16    | 46 (244)
2346   1398 D9          >            EXX                     ;                           ' 4     |
2346   1399 78          >            LD      A, B            ; A = read buffer high      ' 4     |
2346   139A D9          >            EXX                     ;                           ' 4     | 16
2346   139B BA          >            CP      D               ; compare write buffer high ' 4     |
2347   139C CA A2 13                JP      Z, .wait            ; wait until wb != rb   ' 10    |
2348   139F             
2349   139F C3 BF 02                JP      main_loop           ; process next frame    ' 10    | (254)
2350   13A2             
2351   13A2             .wait
2352   13A2 C3 AF 13                JP      free_time           ; we have free time     ' 10    | (254)
2353   13A5             
2354   13A5             .vint_happened                          ;                       ' 198
2355   13A5                         wait46                      ; sync                  ' 46    |
2355   13A5 3E 02       >            LD      A, w            ; 7-2
2355   13A7 3D          >            DEC     A               ; 4
2355   13A8 20 FD       >            JR      NZ, .loop       ; 12
2355   13AA 18 00       >            JR      .loop
2356   13AC C3 C9 07                JP      prepare_xgm         ; continue xgm process  ' 10    | 56 (254)
2357   13AF             
2358   13AF             
2359   13AF             ; free time here
2360   13AF             ; --------------
2361   13AF             ; $BB+X+Y+Z
2362   13AF             free_time
2363   13AF                         sampleOutput                ; *** sample output *** ' 36    | (36)
2363   13AF D9          >            EXX                     ;                           ' 4     | 4
2363   13B0 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2363   13B1 03          >            INC     BC              ; increment read address    ' 6     |
2363   13B2 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2363   13B4 12          >            LD      (DE), A         ; play sample               ' 7     |
2363   13B5 D9          >            EXX                     ;                           ' 4     | (36)
2364   13B6             
2365   13B6                         wait110                     ; sync                  ' 110   | (146)
2365   13B6 3E 06       >            LD      A, w            ; 7-2
2365   13B8 3D          >            DEC     A               ; 4
2365   13B9 20 FD       >            JR      NZ, .loop       ; 12
2365   13BB 18 00       >            JR      .loop
2366   13BD             
2367   13BD 3A 63 01                LD      A, (IDLE_LOOP)      ;                       ' 13    |
2368   13C0 3C                      INC     A                   ; increment idle loop   ' 4     | 30 (176)
2369   13C1 32 63 01                LD      (IDLE_LOOP), A      ;                       ' 13    |
2370   13C4             
2371   13C4 FD 7D                   LD      A, IYL              ;                       ' 8     |
2372   13C6 B7                      OR      A                   ; vint happened ?       ' 4     | 22 (198)
2373   13C7 C2 DB 13                JP      NZ, .vint_happened  ; go to ext command     ' 10    |
2374   13CA             
2375   13CA ED 5B 38 01             LD      DE, (WRITEBUF)      ; DE = write buf        ' 20    |
2376   13CE                         compareReadWrite            ;                       ' 16    | 46 (244)
2376   13CE D9          >            EXX                     ;                           ' 4     |
2376   13CF 78          >            LD      A, B            ; A = read buffer high      ' 4     |
2376   13D0 D9          >            EXX                     ;                           ' 4     | 16
2376   13D1 BA          >            CP      D               ; compare write buffer high ' 4     |
2377   13D2 CA D8 13                JP      Z, .wait            ; wait until wb != rb   ' 10    |
2378   13D5             
2379   13D5 C3 BF 02                JP      main_loop           ; process next frame    ' 10    | (254)
2380   13D8             
2381   13D8             .wait
2382   13D8 C3 AF 13                JP      free_time           ; we have free time     ' 10    | (254)
2383   13DB             
2384   13DB             .vint_happened                          ;                       ' 198
2385   13DB                         wait46                      ; sync                  ' 46    |
2385   13DB 3E 02       >            LD      A, w            ; 7-2
2385   13DD 3D          >            DEC     A               ; 4
2385   13DE 20 FD       >            JR      NZ, .loop       ; 12
2385   13E0 18 00       >            JR      .loop
2386   13E2 C3 C9 07                JP      prepare_xgm         ; continue xgm process  ' 10    | 56 (254)
2387   13E5             
2388   13E5             
2389   13E5             
2390   13E5             ; ##############################  functions  ################################
2391   13E5             
2392   13E5                         INCLUDE "z80_fct.i80"   ; basic functions
0001+  13E5             ; ########################### function #############################
0002+  13E5             
0003+  13E5             ; initDAC
0004+  13E5             ; -----------
0005+  13E5             ; HL <-  YMPORT0
0006+  13E5             ; DE <-  $2A80
0007+  13E5             ;
0008+  13E5             ; prepare DAC for output
0009+  13E5             
0010+  13E5             initDAC
0011+  13E5 11 80 2B                LD      DE, $2B80
0012+  13E8 CD F2 13                CALL    writeYM0        ; enable DAC
0013+  13EB 11 80 2A                LD      DE, $2A80
0014+  13EE CD F2 13                CALL    writeYM0        ; DAC data to silent
0015+  13F1 C9                      RET
0016+  13F2             
0017+  13F2             ; writeYM0 / writeYM1
0018+  13F2             ; -------------------
0019+  13F2             ; D   -> address
0020+  13F2             ; E   -> value
0021+  13F2             ; HL <-  YMPORT0 / YMPORT2
0022+  13F2             ;
0023+  13F2             ; write to YM2612
0024+  13F2             
0025+  13F2             writeYM0
0026+  13F2 21 00 40                LD      HL, YMPORT0
0027+  13F5                         writeYM
0027+  13F5 CB 7E       >            BIT     7, (HL)         ; test YM not busy
0027+  13F7 20 FC       >            JR      NZ, .wait0
0027+  13F9 72          >            LD      (HL), D         ; write address
0027+  13FA CB 7E       >            BIT     7, (HL)         ; test YM not busy
0027+  13FC 20 FC       >            JR      NZ, .wait1
0027+  13FE 2C          >            INC     L
0027+  13FF 73          >            LD      (HL), E         ; write value
0028+  1400 C9                      RET
0029+  1401             writeYM1
0030+  1401 21 02 40                LD      HL, YMPORT2
0031+  1404                         writeYM
0031+  1404 CB 7E       >            BIT     7, (HL)         ; test YM not busy
0031+  1406 20 FC       >            JR      NZ, .wait0
0031+  1408 72          >            LD      (HL), D         ; write address
0031+  1409 CB 7E       >            BIT     7, (HL)         ; test YM not busy
0031+  140B 20 FC       >            JR      NZ, .wait1
0031+  140D 2C          >            INC     L
0031+  140E 73          >            LD      (HL), E         ; write value
0032+  140F C9                      RET
0033+  1410             
2393   1410             
2394   1410             
2395   1410             ; prepareXGMPCMCom
2396   1410             ; ----------------
2397   1410             ;              B   -> PCM id
2398   1410             ;              A   -> PCM id
2399   1410             ; XGM data ->  DE  -> XGM data
2400   1410             ;
2401   1410             ; prepare the XGM PCM command
2402   1410             ; = 1 sample + 46 cycles
2403   1410             
2404   1410             prepareXGMPCMCom                        ;                       ' 114
2405   1410                         wait118                     ; sync                  ' 118   | (232)
2405   1410 3E 07       >            LD      A, w            ; 7-2
2405   1412 3D          >            DEC     A               ; 4
2405   1413 20 FD       >            JR      NZ, .loop       ; 12
2405   1415 00          >            NOP
2406   1416             
2407   1416 1A                      LD      A, (DE)             ;                       ' 7     |
2408   1417 1C                      INC     E                   ; next command          ' 4     |
2409   1418 E6 3F                   AND     $3F                 ; A = PCM id            ' 7     | 22 (254)
2410   141A 47                      LD      B, A                ; B = PCM id            ' 4     |
2411   141B             
2412   141B                         sampleOutput                ;                       ' 36    |
2412   141B D9          >            EXX                     ;                           ' 4     | 4
2412   141C 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2412   141D 03          >            INC     BC              ; increment read address    ' 6     |
2412   141E CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2412   1420 12          >            LD      (DE), A         ; play sample               ' 7     |
2412   1421 D9          >            EXX                     ;                           ' 4     | (36)
2413   1422             
2414   1422 C9                      RET                         ; done                  ' 10    | (46)
2415   1423             
2416   1423             
2417   1423             
2418   1423             ; loadState
2419   1423             ; ---------
2420   1423             ;     ?       ->  HL  -> ?
2421   1423             ;     ?       ->  BC  -> ?
2422   1423             ; reg source  ->  DE  -> ?
2423   1423             ;
2424   1423             ; load the YM and PSG state
2425   1423             ; = 8 samples + 140 cycles
2426   1423             
2427   1423             loadState
2428   1423             
2429   1423                         sampleOutput                ; *** sample output ****    ' 36    | (36)
2429   1423 D9          >            EXX                     ;                           ' 4     | 4
2429   1424 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2429   1425 03          >            INC     BC              ; increment read address    ' 6     |
2429   1426 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2429   1428 12          >            LD      (DE), A         ; play sample               ' 7     |
2429   1429 D9          >            EXX                     ;                           ' 4     | (36)
2430   142A             
2431   142A             
2432   142A 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0      ' 10    |
2433   142D 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1      ' 10    | 20 (56)
2434   1430             
2435   1430 CD 52 14                CALL    loadYMState         ; load YM state             ' 188+  | (244)
2436   1433             
2437   1433 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2      ' 10    |
2438   1436 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3      ' 10    | 20 (254+10)
2439   1439             
2440   1439                         sampleOutputSafe            ; *** sample output ****    ' 46    | (46+10)
2440   1439 D9          >            EXX                     ;                           ' 4     | 4
2440   143A 36 2A       >            LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
2440   143C 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2440   143D 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
2440   143E CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
2440   1440 12          >            LD      (DE), A         ; play sample               ' 7     |
2440   1441 D9          >            EXX                     ;                           ' 4     | (46)
2441   1442             
2442   1442 CD 52 14                CALL    loadYMState         ; load YM state             ' 188+  | (244)
2443   1445             
2444   1445 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG           ' 10    | (254)
2445   1448             
2446   1448                         sampleOutput                ; *** sample output ****    ' 36    | (36)
2446   1448 D9          >            EXX                     ;                           ' 4     | 4
2446   1449 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2446   144A 03          >            INC     BC              ; increment read address    ' 6     |
2446   144B CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2446   144D 12          >            LD      (DE), A         ; play sample               ' 7     |
2446   144E D9          >            EXX                     ;                           ' 4     | (36)
2447   144F             
2448   144F C3 17 15                JP      loadPSGState        ; load PSG state            ' 10+94 | (140)
2449   1452             
2450   1452             
2451   1452             ; loadYMState
2452   1452             ; -----------
2453   1452             ; YMPORT0/2   ->  HL
2454   1452             ; YMPORT1/3   ->  BC
2455   1452             ; reg source  ->  DE  -> ?
2456   1452             ;
2457   1452             ; load the YM RR state
2458   1452             ; = 4 samples (244 cycles)
2459   1452             
2460   1452             loadYMState                             ;                           ' 56
2461   1452             
2462   1452                         waitYMReady                 ; wait YM to be ready       ' 22    |
2462   1452 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2462   1454 C2 52 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2463   1457 36 80                   LD      (HL), $80           ; set reg num to YM         ' 10    |
2464   1459 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2465   145A 1C                      INC     E                   ; next                      ' 4     | 54 (110)
2466   145B                         wait4                       ; wait YM to be ready       ' 4     |
2466   145B 00          >            NOP
2467   145C 02                      LD      (BC), A             ; restore state             ' 7     |
2468   145D             
2469   145D                         wait8                       ; let busy flag to update   ' 8     |
2469   145D 00          >            NOP
2469   145E 00          >            NOP
2470   145F                         waitYMReady                 ; wait YM to be ready       ' 22    |
2470   145F CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2470   1461 C2 5F 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2471   1464 36 81                   LD      (HL), $81           ; set reg num to YM         ' 10    |
2472   1466 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (172)
2473   1467 1C                      INC     E                   ; next                      ' 4     |
2474   1468                         wait4                       ; wait YM to be ready       ' 4     |
2474   1468 00          >            NOP
2475   1469 02                      LD      (BC), A             ; restore state             ' 7     |
2476   146A             
2477   146A                         wait8                       ; let busy flag to update   ' 8     |
2477   146A 00          >            NOP
2477   146B 00          >            NOP
2478   146C                         waitYMReady                 ; wait YM to be ready       ' 22    |
2478   146C CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2478   146E C2 6C 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2479   1471 36 82                   LD      (HL), $82           ; set reg num to YM         ' 10    |
2480   1473 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (234)
2481   1474 1C                      INC     E                   ; next                      ' 4     |
2482   1475                         wait4                       ; wait YM to be ready       ' 4     |
2482   1475 00          >            NOP
2483   1476 02                      LD      (BC), A             ; restore state             ' 7     |
2484   1477             
2485   1477                         wait8                       ; let busy flag to update   ' 8     |
2485   1477 00          >            NOP
2485   1478 00          >            NOP
2486   1479                         waitYMReady                 ; wait YM to be ready       ' 22    | 30 (254+10)
2486   1479 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2486   147B C2 79 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2487   147E             
2488   147E                         sampleOutputSafe            ; *** sample output ****    ' 46    | (46+10)
2488   147E D9          >            EXX                     ;                           ' 4     | 4
2488   147F 36 2A       >            LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
2488   1481 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2488   1482 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
2488   1483 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
2488   1485 12          >            LD      (DE), A         ; play sample               ' 7     |
2488   1486 D9          >            EXX                     ;                           ' 4     | (46)
2489   1487             
2490   1487                         waitYMReady                 ; wait YM to be ready       ' 22    |
2490   1487 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2490   1489 C2 87 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2491   148C 36 84                   LD      (HL), $84           ; set reg num to YM         ' 10    |
2492   148E 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2493   148F 1C                      INC     E                   ; next                      ' 4     | 54 (110)
2494   1490                         wait4                       ; wait YM to be ready       ' 4     |
2494   1490 00          >            NOP
2495   1491 02                      LD      (BC), A             ; restore state             ' 7     |
2496   1492             
2497   1492                         wait8                       ; let busy flag to update   ' 8     |
2497   1492 00          >            NOP
2497   1493 00          >            NOP
2498   1494                         waitYMReady                 ; wait YM to be ready       ' 22    |
2498   1494 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2498   1496 C2 94 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2499   1499 36 85                   LD      (HL), $85           ; set reg num to YM         ' 10    |
2500   149B 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (172)
2501   149C 1C                      INC     E                   ; next                      ' 4     |
2502   149D                         wait4                       ; wait YM to be ready       ' 4     |
2502   149D 00          >            NOP
2503   149E 02                      LD      (BC), A             ; restore state             ' 7     |
2504   149F             
2505   149F                         wait8                       ; let busy flag to update   ' 8     |
2505   149F 00          >            NOP
2505   14A0 00          >            NOP
2506   14A1                         waitYMReady                 ; wait YM to be ready       ' 22    |
2506   14A1 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2506   14A3 C2 A1 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2507   14A6 36 86                   LD      (HL), $86           ; set reg num to YM         ' 10    |
2508   14A8 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (234)
2509   14A9 1C                      INC     E                   ; next                      ' 4     |
2510   14AA                         wait4                       ; wait YM to be ready       ' 4     |
2510   14AA 00          >            NOP
2511   14AB 02                      LD      (BC), A             ; restore state             ' 7     |
2512   14AC             
2513   14AC                         wait8                       ; let busy flag to update   ' 8     |
2513   14AC 00          >            NOP
2513   14AD 00          >            NOP
2514   14AE                         waitYMReady                 ; wait YM to be ready       ' 22    | 30 (254+10)
2514   14AE CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2514   14B0 C2 AE 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2515   14B3             
2516   14B3                         sampleOutputSafe            ; *** sample output ****    ' 46    | (46+10)
2516   14B3 D9          >            EXX                     ;                           ' 4     | 4
2516   14B4 36 2A       >            LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
2516   14B6 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2516   14B7 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
2516   14B8 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
2516   14BA 12          >            LD      (DE), A         ; play sample               ' 7     |
2516   14BB D9          >            EXX                     ;                           ' 4     | (46)
2517   14BC             
2518   14BC                         waitYMReady                 ; wait YM to be ready       ' 22    |
2518   14BC CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2518   14BE C2 BC 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2519   14C1 36 88                   LD      (HL), $88           ; set reg num to YM         ' 10    |
2520   14C3 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2521   14C4 1C                      INC     E                   ; next                      ' 4     | 54 (110)
2522   14C5                         wait4                       ; wait YM to be ready       ' 4     |
2522   14C5 00          >            NOP
2523   14C6 02                      LD      (BC), A             ; restore state             ' 7     |
2524   14C7             
2525   14C7                         wait8                       ; let busy flag to update   ' 8     |
2525   14C7 00          >            NOP
2525   14C8 00          >            NOP
2526   14C9                         waitYMReady                 ; wait YM to be ready       ' 22    |
2526   14C9 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2526   14CB C2 C9 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2527   14CE 36 89                   LD      (HL), $89           ; set reg num to YM         ' 10    |
2528   14D0 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (172)
2529   14D1 1C                      INC     E                   ; next                      ' 4     |
2530   14D2                         wait4                       ; wait YM to be ready       ' 4     |
2530   14D2 00          >            NOP
2531   14D3 02                      LD      (BC), A             ; restore state             ' 7     |
2532   14D4             
2533   14D4                         wait8                       ; let busy flag to update   ' 8     |
2533   14D4 00          >            NOP
2533   14D5 00          >            NOP
2534   14D6                         waitYMReady                 ; wait YM to be ready       ' 22    |
2534   14D6 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2534   14D8 C2 D6 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2535   14DB 36 8A                   LD      (HL), $8A           ; set reg num to YM         ' 10    |
2536   14DD 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (234)
2537   14DE 1C                      INC     E                   ; next                      ' 4     |
2538   14DF                         wait4                       ; wait YM to be ready       ' 4     |
2538   14DF 00          >            NOP
2539   14E0 02                      LD      (BC), A             ; restore state             ' 7     |
2540   14E1             
2541   14E1                         wait8                       ; let busy flag to update   ' 8     |
2541   14E1 00          >            NOP
2541   14E2 00          >            NOP
2542   14E3                         waitYMReady                 ; wait YM to be ready       ' 22    | 30 (254+10)
2542   14E3 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2542   14E5 C2 E3 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2543   14E8             
2544   14E8                         sampleOutputSafe            ; *** sample output ****    ' 46    | (46+10)
2544   14E8 D9          >            EXX                     ;                           ' 4     | 4
2544   14E9 36 2A       >            LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
2544   14EB 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2544   14EC 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
2544   14ED CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
2544   14EF 12          >            LD      (DE), A         ; play sample               ' 7     |
2544   14F0 D9          >            EXX                     ;                           ' 4     | (46)
2545   14F1             
2546   14F1                         waitYMReady                 ; wait YM to be ready       ' 22    |
2546   14F1 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2546   14F3 C2 F1 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2547   14F6 36 8C                   LD      (HL), $8C           ; set reg num to YM         ' 10    |
2548   14F8 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2549   14F9 1C                      INC     E                   ; next                      ' 4     | 54 (110)
2550   14FA                         wait4                       ; wait YM to be ready       ' 4     |
2550   14FA 00          >            NOP
2551   14FB 02                      LD      (BC), A             ; restore state             ' 7     |
2552   14FC             
2553   14FC                         wait8                       ; let busy flag to update   ' 8     |
2553   14FC 00          >            NOP
2553   14FD 00          >            NOP
2554   14FE                         waitYMReady                 ; wait YM to be ready       ' 22    |
2554   14FE CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2554   1500 C2 FE 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2555   1503 36 8D                   LD      (HL), $8D           ; set reg num to YM         ' 10    |
2556   1505 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (172)
2557   1506 1C                      INC     E                   ; next                      ' 4     |
2558   1507                         wait4                       ; wait YM to be ready       ' 4     |
2558   1507 00          >            NOP
2559   1508 02                      LD      (BC), A             ; restore state             ' 7     |
2560   1509             
2561   1509                         wait8                       ; let busy flag to update   ' 8     |
2561   1509 00          >            NOP
2561   150A 00          >            NOP
2562   150B                         waitYMReady                 ; wait YM to be ready       ' 22    |
2562   150B CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2562   150D C2 0B 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2563   1510 36 8E                   LD      (HL), $8E           ; set reg num to YM         ' 10    |
2564   1512 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (234)
2565   1513 1C                      INC     E                   ; next                      ' 4     |
2566   1514                         wait4                       ; wait YM to be ready       ' 4     |
2566   1514 00          >            NOP
2567   1515 02                      LD      (BC), A             ; restore state             ' 7     |
2568   1516             
2569   1516 C9                      RET                         ; done                      ' 10    | (244)
2570   1517             
2571   1517             
2572   1517             ; loadPSGState
2573   1517             ; ------------
2574   1517             ; PSGPORT     ->  HL
2575   1517             ; reg source  ->  DE  -> ?
2576   1517             ;
2577   1517             ; load the PSG env state
2578   1517             ; 94 cycles
2579   1517             
2580   1517             loadPSGState
2581   1517             
2582   1517 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2583   1518 1C                      INC     E                   ; next                      ' 4     | (21)
2584   1519 77                      LD      (HL), A             ; PSG restore channel 0 env ' 10    |
2585   151A             
2586   151A 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2587   151B 1C                      INC     E                   ; next                      ' 4     | 21 (42)
2588   151C 77                      LD      (HL), A             ; PSG restore channel 1 env ' 10    |
2589   151D             
2590   151D 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2591   151E 1C                      INC     E                   ; next                      ' 4     | 21 (63)
2592   151F 77                      LD      (HL), A             ; PSG restore channel 2 env ' 10    |
2593   1520             
2594   1520 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2595   1521 1C                      INC     E                   ; next                      ' 4     | 21 (84)
2596   1522 77                      LD      (HL), A             ; PSG restore channel 3 env ' 10    |
2597   1523             
2598   1523 C9                      RET                         ; done                      ' 10    | (94)
2599   1524             
2600   1524             
2601   1524             ; ##############################  jump table  ################################
2602   1524             
2603   1524 00                      BLOCK   $1600-$
2604   1600             
2605   1600 23 0A                   DW      com_next_frame                                                                  ; 00
2606   1602             
2607   1602                         DW      com_null, com_null, com_null                                                    ; 01-03
2607   1602 5F115F115F11
2608   1608                         DW      com_null, com_null, com_null, com_null                                          ; 04-07
2608   1608 5F115F115F115F11
2609   1610                         DW      com_null, com_null, com_null, com_null                                          ; 08-0B
2609   1610 5F115F115F115F11
2610   1618                         DW      com_null, com_null, com_null, com_null                                          ; 0C-0F
2610   1618 5F115F115F115F11
2611   1620             
2612   1620                         DW      com_psg_tone_w0, com_psg_tone_w1, com_psg_tone_w2, com_psg_tone_w3              ; 10-13
2612   1620 260A330A410A4E0A
2613   1628                         DW      com_psg_tone_w4, com_psg_tone_w5, com_psg_tone_w6, com_psg_tone_w7              ; 14-17
2613   1628 5E0A6A0A780A820A
2614   1630                         DW      com_psg_env_w0, com_psg_env_w1, com_psg_env_w2, com_psg_env_w3                  ; 18-1B
2614   1630 A30AB60AC20ADB0A
2615   1638                         DW      com_null, com_null, com_null, com_null                                          ; 1C-1F
2615   1638 5F115F115F115F11
2616   1640             
2617   1640                         DW      com_ym_port0_w0, com_ym_port0_w1, com_ym_port0_w2, com_ym_port0_w3              ; 20-23
2617   1640 270B380B410B530B
2618   1648                         DW      com_ym_port0_w4, com_ym_port0_w5, com_ym_port0_w6, com_ym_port0_w7              ; 24-27
2618   1648 5C0B6C0B7E0B870B
2619   1650                         DW      com_ym_port0_w8, com_ym_port0_w9, com_ym_port0_wA, com_ym_port0_wB              ; 28-2B
2619   1650 970BA90BB20BC20B
2620   1658                         DW      com_ym_port0_wC, com_ym_port0_wD, com_ym_port0_wE, com_ym_port0_wF              ; 2C-2F
2620   1658 D40BDD0BED0BFE0B
2621   1660             
2622   1660                         DW      com_ym_port2_w0, com_ym_port2_w1, com_ym_port2_w2, com_ym_port2_w3              ; 30-33
2622   1660 070C180C210C330C
2623   1668                         DW      com_ym_port2_w4, com_ym_port2_w5, com_ym_port2_w6, com_ym_port2_w7              ; 34-37
2623   1668 3C0C4C0C5E0C670C
2624   1670                         DW      com_ym_port2_w8, com_ym_port2_w9, com_ym_port2_wA, com_ym_port2_wB              ; 38-3B
2624   1670 770C890C920CA20C
2625   1678                         DW      com_ym_port2_wC, com_ym_port2_wD, com_ym_port2_wE, com_ym_port2_wF              ; 3C-3F
2625   1678 B40CBD0CCD0CDE0C
2626   1680             
2627   1680                         DW      com_ym_key_w0, com_ym_key_w1, com_ym_key_w2, com_ym_key_w3                      ; 40-43
2627   1680 1F0E2F0E3B0E4C0E
2628   1688                         DW      com_ym_key_w4, com_ym_key_w5, com_null, com_null                                ; 44-47
2628   1688 5E0E6D0E5F115F11
2629   1690                         DW      com_null, com_null, com_null, com_null                                          ; 48-4B
2629   1690 5F115F115F115F11
2630   1698                         DW      com_null, com_null, com_null, com_null                                          ; 4C-4F
2630   1698 5F115F115F115F11
2631   16A0             
2632   16A0                         DW      com_pcm_p0_ch0, com_pcm_p0_ch1, com_pcm_p0_ch2, com_pcm_p0_ch3                  ; 50-53
2632   16A0 E50EF90E0D0F210F
2633   16A8                         DW      com_pcm_p1_ch0, com_pcm_p1_ch1, com_pcm_p1_ch2, com_pcm_p1_ch3                  ; 54-57
2633   16A8 EA0EFE0E120F260F
2634   16B0                         DW      com_pcm_p2_ch0, com_pcm_p2_ch1, com_pcm_p2_ch2, com_pcm_p2_ch3                  ; 58-5B
2634   16B0 EF0E030F170F2B0F
2635   16B8                         DW      com_pcm_p3_ch0, com_pcm_p3_ch1, com_pcm_p3_ch2, com_pcm_p3_ch3                  ; 5C-5F
2635   16B8 F40E080F1C0F300F
2636   16C0             
2637   16C0                         DW      com_state_w0, com_state_w1, com_state_w2, com_state_w3                          ; 60-63
2637   16C0 11101B1028103710
2638   16C8                         DW      com_state_w4, com_state_w5, com_state_w6, com_state_w7                          ; 64-67
2638   16C8 3F10581064107110
2639   16D0                         DW      com_state_w8, com_state_w9, com_state_wA, com_state_wB                          ; 68-6B
2639   16D0 7D1089109310AE10
2640   16D8                         DW      com_state_wC, com_state_wD, com_state_wE, com_state_wF                          ; 6C-6F
2640   16D8 BA10C710D310DF10
2641   16E0             
2642   16E0                         DW      com_null, com_null, com_null, com_null                                          ; 70-74
2642   16E0 5F115F115F115F11
2643   16E8                         DW      com_null, com_null, com_null, com_null                                          ; 74-77
2643   16E8 5F115F115F115F11
2644   16F0                         DW      com_null, com_null, com_null, com_null                                          ; 78-7B
2644   16F0 5F115F115F115F11
2645   16F8 5F 11 5F 11             DW      com_null, com_null                                                              ; 7C-7D
2646   16FC             
2647   16FC 6B 11                   DW      com_loop                                                                        ; 7E
2648   16FE 8C 11                   DW      com_end                                                                         ; 7F
2649   1700             
2650   1700             
2651   1700                         END
